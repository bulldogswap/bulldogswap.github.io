{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _NETWORK_URLS;import{SafeAppConnector}from'@gnosis.pm/safe-apps-web3-react';import{InjectedConnector}from'@web3-react/injected-connector';import{PortisConnector}from'@web3-react/portis-connector';import{WalletConnectConnector}from'@web3-react/walletconnect-connector';import{WalletLinkConnector}from'@web3-react/walletlink-connector';import UNISWAP_LOGO_URL from\"../assets/svg/logo.svg\";import{ALL_SUPPORTED_CHAIN_IDS,SupportedChainId}from'../constants/chains';import getLibrary from'../utils/getLibrary';import{FortmaticConnector}from'./Fortmatic';import{NetworkConnector}from'./NetworkConnector';var INFURA_KEY=process.env.REACT_APP_INFURA_KEY;var FORMATIC_KEY=process.env.REACT_APP_FORTMATIC_KEY;var PORTIS_ID=process.env.REACT_APP_PORTIS_ID;var WALLETCONNECT_BRIDGE_URL=process.env.REACT_APP_WALLETCONNECT_BRIDGE_URL;if(typeof INFURA_KEY==='undefined'){throw new Error(\"REACT_APP_INFURA_KEY must be a defined environment variable\");}var NETWORK_URLS=(_NETWORK_URLS={},_defineProperty(_NETWORK_URLS,SupportedChainId.MAINNET,\"https://mainnet.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.RINKEBY,\"https://rinkeby.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.ROPSTEN,\"https://ropsten.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.GOERLI,\"https://goerli.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.KOVAN,\"https://kovan.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.OPTIMISM,\"https://optimism-mainnet.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.OPTIMISTIC_KOVAN,\"https://optimism-kovan.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.ARBITRUM_ONE,\"https://arbitrum-mainnet.infura.io/v3/\".concat(INFURA_KEY)),_defineProperty(_NETWORK_URLS,SupportedChainId.ARBITRUM_RINKEBY,\"https://arbitrum-rinkeby.infura.io/v3/\".concat(INFURA_KEY)),_NETWORK_URLS);export var network=new NetworkConnector({urls:NETWORK_URLS,defaultChainId:1});var networkLibrary;export function getNetworkLibrary(){var _networkLibrary;return networkLibrary=(_networkLibrary=networkLibrary)!==null&&_networkLibrary!==void 0?_networkLibrary:getLibrary(network.provider);}export var injected=new InjectedConnector({supportedChainIds:ALL_SUPPORTED_CHAIN_IDS});export var gnosisSafe=new SafeAppConnector();export var walletconnect=new WalletConnectConnector({supportedChainIds:ALL_SUPPORTED_CHAIN_IDS,rpc:NETWORK_URLS,bridge:WALLETCONNECT_BRIDGE_URL,qrcode:true});// mainnet only\nexport var fortmatic=new FortmaticConnector({apiKey:FORMATIC_KEY!==null&&FORMATIC_KEY!==void 0?FORMATIC_KEY:'',chainId:1});// mainnet only\nexport var portis=new PortisConnector({dAppId:PORTIS_ID!==null&&PORTIS_ID!==void 0?PORTIS_ID:'',networks:[1]});// mainnet only\nexport var walletlink=new WalletLinkConnector({url:NETWORK_URLS[SupportedChainId.MAINNET],appName:'Uniswap',appLogoUrl:UNISWAP_LOGO_URL});","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/connectors/index.ts"],"names":["SafeAppConnector","InjectedConnector","PortisConnector","WalletConnectConnector","WalletLinkConnector","ALL_SUPPORTED_CHAIN_IDS","SupportedChainId","getLibrary","FortmaticConnector","NetworkConnector","INFURA_KEY","process","env","REACT_APP_INFURA_KEY","FORMATIC_KEY","REACT_APP_FORTMATIC_KEY","PORTIS_ID","REACT_APP_PORTIS_ID","WALLETCONNECT_BRIDGE_URL","REACT_APP_WALLETCONNECT_BRIDGE_URL","Error","NETWORK_URLS","MAINNET","RINKEBY","ROPSTEN","GOERLI","KOVAN","OPTIMISM","OPTIMISTIC_KOVAN","ARBITRUM_ONE","ARBITRUM_RINKEBY","network","urls","defaultChainId","networkLibrary","getNetworkLibrary","provider","injected","supportedChainIds","gnosisSafe","walletconnect","rpc","bridge","qrcode","fortmatic","apiKey","chainId","portis","dAppId","networks","walletlink","url","appName","appLogoUrl","UNISWAP_LOGO_URL"],"mappings":"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","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { SafeAppConnector } from '@gnosis.pm/safe-apps-web3-react'\nimport { InjectedConnector } from '@web3-react/injected-connector'\nimport { PortisConnector } from '@web3-react/portis-connector'\nimport { WalletConnectConnector } from '@web3-react/walletconnect-connector'\nimport { WalletLinkConnector } from '@web3-react/walletlink-connector'\nimport UNISWAP_LOGO_URL from '../assets/svg/logo.svg'\nimport { ALL_SUPPORTED_CHAIN_IDS, SupportedChainId } from '../constants/chains'\nimport getLibrary from '../utils/getLibrary'\nimport { FortmaticConnector } from './Fortmatic'\nimport { NetworkConnector } from './NetworkConnector'\n\nconst INFURA_KEY = process.env.REACT_APP_INFURA_KEY\nconst FORMATIC_KEY = process.env.REACT_APP_FORTMATIC_KEY\nconst PORTIS_ID = process.env.REACT_APP_PORTIS_ID\nconst WALLETCONNECT_BRIDGE_URL = process.env.REACT_APP_WALLETCONNECT_BRIDGE_URL\n\nif (typeof INFURA_KEY === 'undefined') {\n  throw new Error(`REACT_APP_INFURA_KEY must be a defined environment variable`)\n}\n\nconst NETWORK_URLS: { [key in SupportedChainId]: string } = {\n  [SupportedChainId.MAINNET]: `https://mainnet.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.RINKEBY]: `https://rinkeby.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.ROPSTEN]: `https://ropsten.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.GOERLI]: `https://goerli.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.KOVAN]: `https://kovan.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.OPTIMISM]: `https://optimism-mainnet.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.OPTIMISTIC_KOVAN]: `https://optimism-kovan.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.ARBITRUM_ONE]: `https://arbitrum-mainnet.infura.io/v3/${INFURA_KEY}`,\n  [SupportedChainId.ARBITRUM_RINKEBY]: `https://arbitrum-rinkeby.infura.io/v3/${INFURA_KEY}`,\n}\n\nexport const network = new NetworkConnector({\n  urls: NETWORK_URLS,\n  defaultChainId: 1,\n})\n\nlet networkLibrary: Web3Provider | undefined\nexport function getNetworkLibrary(): Web3Provider {\n  return (networkLibrary = networkLibrary ?? getLibrary(network.provider))\n}\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n})\n\nexport const gnosisSafe = new SafeAppConnector()\n\nexport const walletconnect = new WalletConnectConnector({\n  supportedChainIds: ALL_SUPPORTED_CHAIN_IDS,\n  rpc: NETWORK_URLS,\n  bridge: WALLETCONNECT_BRIDGE_URL,\n  qrcode: true,\n})\n\n// mainnet only\nexport const fortmatic = new FortmaticConnector({\n  apiKey: FORMATIC_KEY ?? '',\n  chainId: 1,\n})\n\n// mainnet only\nexport const portis = new PortisConnector({\n  dAppId: PORTIS_ID ?? '',\n  networks: [1],\n})\n\n// mainnet only\nexport const walletlink = new WalletLinkConnector({\n  url: NETWORK_URLS[SupportedChainId.MAINNET],\n  appName: 'Uniswap',\n  appLogoUrl: UNISWAP_LOGO_URL,\n})\n"]},"metadata":{},"sourceType":"module"}