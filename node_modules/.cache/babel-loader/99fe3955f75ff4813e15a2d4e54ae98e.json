{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{useMemo}from'react';import{WETH9_EXTENDED}from'../constants/tokens';import{tryParseAmount}from'../state/swap/hooks';import{useTransactionAdder}from'../state/transactions/hooks';import{useCurrencyBalance}from'../state/wallet/hooks';import{useActiveWeb3React}from'./web3';import{useWETHContract}from'./useContract';export var WrapType;(function(WrapType){WrapType[WrapType[\"NOT_APPLICABLE\"]=0]=\"NOT_APPLICABLE\";WrapType[WrapType[\"WRAP\"]=1]=\"WRAP\";WrapType[WrapType[\"UNWRAP\"]=2]=\"UNWRAP\";})(WrapType||(WrapType={}));var NOT_APPLICABLE={wrapType:WrapType.NOT_APPLICABLE};/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */export default function useWrapCallback(inputCurrency,outputCurrency,typedValue){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var wethContract=useWETHContract();var balance=useCurrencyBalance(account!==null&&account!==void 0?account:undefined,inputCurrency);// we can always parse the amount typed as the input currency, since wrapping is 1:1\nvar inputAmount=useMemo(function(){return tryParseAmount(typedValue,inputCurrency);},[inputCurrency,typedValue]);var addTransaction=useTransactionAdder();return useMemo(function(){if(!wethContract||!chainId||!inputCurrency||!outputCurrency)return NOT_APPLICABLE;var weth=WETH9_EXTENDED[chainId];if(!weth)return NOT_APPLICABLE;var hasInputAmount=Boolean(inputAmount===null||inputAmount===void 0?void 0:inputAmount.greaterThan('0'));var sufficientBalance=inputAmount&&balance&&!balance.lessThan(inputAmount);if(inputCurrency.isNative&&weth.equals(outputCurrency)){return{wrapType:WrapType.WRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var txReceipt;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return wethContract.deposit({value:\"0x\".concat(inputAmount.quotient.toString(16))});case 3:txReceipt=_context.sent;addTransaction(txReceipt,{summary:\"Wrap \".concat(inputAmount.toSignificant(6),\" ETH to WETH\")});_context.next=10;break;case 7:_context.prev=7;_context.t0=_context[\"catch\"](0);console.error('Could not deposit',_context.t0);case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:hasInputAmount?'Insufficient ETH balance':'Enter ETH amount'};}else if(weth.equals(inputCurrency)&&outputCurrency.isNative){return{wrapType:WrapType.UNWRAP,execute:sufficientBalance&&inputAmount?/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var txReceipt;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return wethContract.withdraw(\"0x\".concat(inputAmount.quotient.toString(16)));case 3:txReceipt=_context2.sent;addTransaction(txReceipt,{summary:\"Unwrap \".concat(inputAmount.toSignificant(6),\" WETH to ETH\")});_context2.next=10;break;case 7:_context2.prev=7;_context2.t0=_context2[\"catch\"](0);console.error('Could not withdraw',_context2.t0);case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,7]]);})):undefined,inputError:sufficientBalance?undefined:hasInputAmount?'Insufficient WETH balance':'Enter WETH amount'};}else{return NOT_APPLICABLE;}},[wethContract,chainId,inputCurrency,outputCurrency,inputAmount,balance,addTransaction]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useWrapCallback.ts"],"names":["useMemo","WETH9_EXTENDED","tryParseAmount","useTransactionAdder","useCurrencyBalance","useActiveWeb3React","useWETHContract","WrapType","NOT_APPLICABLE","wrapType","useWrapCallback","inputCurrency","outputCurrency","typedValue","chainId","account","wethContract","balance","undefined","inputAmount","addTransaction","weth","hasInputAmount","Boolean","greaterThan","sufficientBalance","lessThan","isNative","equals","WRAP","execute","deposit","value","quotient","toString","txReceipt","summary","toSignificant","console","error","inputError","UNWRAP","withdraw"],"mappings":"6WACA,OAASA,OAAT,KAAwB,OAAxB,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,cAAT,KAA+B,qBAA/B,CACA,OAASC,mBAAT,KAAoC,6BAApC,CACA,OAASC,kBAAT,KAAmC,uBAAnC,CACA,OAASC,kBAAT,KAAmC,QAAnC,CACA,OAASC,eAAT,KAAgC,eAAhC,CAEA,UAAYC,CAAAA,QAAZ,C,UAAYA,Q,EAAAA,Q,CAAAA,Q,uCAAAA,Q,CAAAA,Q,mBAAAA,Q,CAAAA,Q,0BAAAA,Q,GAAAA,Q,MAMZ,GAAMC,CAAAA,cAAc,CAAG,CAAEC,QAAQ,CAAEF,QAAQ,CAACC,cAArB,CAAvB,CACA;AACA;AACA;AACA;AACA;AACA,GACA,cAAe,SAASE,CAAAA,eAAT,CACbC,aADa,CAEbC,cAFa,CAGbC,UAHa,CAI6E,CAC1F,wBAA6BR,kBAAkB,EAA/C,CAAQS,OAAR,qBAAQA,OAAR,CAAiBC,OAAjB,qBAAiBA,OAAjB,CACA,GAAMC,CAAAA,YAAY,CAAGV,eAAe,EAApC,CACA,GAAMW,CAAAA,OAAO,CAAGb,kBAAkB,CAACW,OAAD,SAACA,OAAD,UAACA,OAAD,CAAYG,SAAZ,CAAuBP,aAAvB,CAAlC,CACA;AACA,GAAMQ,CAAAA,WAAW,CAAGnB,OAAO,CAAC,iBAAME,CAAAA,cAAc,CAACW,UAAD,CAAaF,aAAb,CAApB,EAAD,CAAkD,CAACA,aAAD,CAAgBE,UAAhB,CAAlD,CAA3B,CACA,GAAMO,CAAAA,cAAc,CAAGjB,mBAAmB,EAA1C,CAEA,MAAOH,CAAAA,OAAO,CAAC,UAAM,CACnB,GAAI,CAACgB,YAAD,EAAiB,CAACF,OAAlB,EAA6B,CAACH,aAA9B,EAA+C,CAACC,cAApD,CAAoE,MAAOJ,CAAAA,cAAP,CACpE,GAAMa,CAAAA,IAAI,CAAGpB,cAAc,CAACa,OAAD,CAA3B,CACA,GAAI,CAACO,IAAL,CAAW,MAAOb,CAAAA,cAAP,CAEX,GAAMc,CAAAA,cAAc,CAAGC,OAAO,CAACJ,WAAD,SAACA,WAAD,iBAACA,WAAW,CAAEK,WAAb,CAAyB,GAAzB,CAAD,CAA9B,CACA,GAAMC,CAAAA,iBAAiB,CAAGN,WAAW,EAAIF,OAAf,EAA0B,CAACA,OAAO,CAACS,QAAR,CAAiBP,WAAjB,CAArD,CAEA,GAAIR,aAAa,CAACgB,QAAd,EAA0BN,IAAI,CAACO,MAAL,CAAYhB,cAAZ,CAA9B,CAA2D,CACzD,MAAO,CACLH,QAAQ,CAAEF,QAAQ,CAACsB,IADd,CAELC,OAAO,CACLL,iBAAiB,EAAIN,WAArB,sEACI,uLAE4BH,CAAAA,YAAY,CAACe,OAAb,CAAqB,CAAEC,KAAK,aAAOb,WAAW,CAACc,QAAZ,CAAqBC,QAArB,CAA8B,EAA9B,CAAP,CAAP,CAArB,CAF5B,QAEUC,SAFV,eAGIf,cAAc,CAACe,SAAD,CAAY,CAAEC,OAAO,gBAAUjB,WAAW,CAACkB,aAAZ,CAA0B,CAA1B,CAAV,gBAAT,CAAZ,CAAd,CAHJ,+EAKIC,OAAO,CAACC,KAAR,CAAc,mBAAd,cALJ,oEADJ,GASIrB,SAZD,CAaLsB,UAAU,CAAEf,iBAAiB,CAAGP,SAAH,CAAeI,cAAc,CAAG,0BAAH,CAAgC,kBAbrF,CAAP,CAeD,CAhBD,IAgBO,IAAID,IAAI,CAACO,MAAL,CAAYjB,aAAZ,GAA8BC,cAAc,CAACe,QAAjD,CAA2D,CAChE,MAAO,CACLlB,QAAQ,CAAEF,QAAQ,CAACkC,MADd,CAELX,OAAO,CACLL,iBAAiB,EAAIN,WAArB,sEACI,8LAE4BH,CAAAA,YAAY,CAAC0B,QAAb,aAA2BvB,WAAW,CAACc,QAAZ,CAAqBC,QAArB,CAA8B,EAA9B,CAA3B,EAF5B,QAEUC,SAFV,gBAGIf,cAAc,CAACe,SAAD,CAAY,CAAEC,OAAO,kBAAYjB,WAAW,CAACkB,aAAZ,CAA0B,CAA1B,CAAZ,gBAAT,CAAZ,CAAd,CAHJ,mFAKIC,OAAO,CAACC,KAAR,CAAc,oBAAd,eALJ,sEADJ,GASIrB,SAZD,CAaLsB,UAAU,CAAEf,iBAAiB,CAAGP,SAAH,CAAeI,cAAc,CAAG,2BAAH,CAAiC,mBAbtF,CAAP,CAeD,CAhBM,IAgBA,CACL,MAAOd,CAAAA,cAAP,CACD,CACF,CA3Ca,CA2CX,CAACQ,YAAD,CAAeF,OAAf,CAAwBH,aAAxB,CAAuCC,cAAvC,CAAuDO,WAAvD,CAAoEF,OAApE,CAA6EG,cAA7E,CA3CW,CAAd,CA4CD","sourcesContent":["import { Currency } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { WETH9_EXTENDED } from '../constants/tokens'\nimport { tryParseAmount } from '../state/swap/hooks'\nimport { useTransactionAdder } from '../state/transactions/hooks'\nimport { useCurrencyBalance } from '../state/wallet/hooks'\nimport { useActiveWeb3React } from './web3'\nimport { useWETHContract } from './useContract'\n\nexport enum WrapType {\n  NOT_APPLICABLE,\n  WRAP,\n  UNWRAP,\n}\n\nconst NOT_APPLICABLE = { wrapType: WrapType.NOT_APPLICABLE }\n/**\n * Given the selected input and output currency, return a wrap callback\n * @param inputCurrency the selected input currency\n * @param outputCurrency the selected output currency\n * @param typedValue the user input value\n */\nexport default function useWrapCallback(\n  inputCurrency: Currency | undefined,\n  outputCurrency: Currency | undefined,\n  typedValue: string | undefined\n): { wrapType: WrapType; execute?: undefined | (() => Promise<void>); inputError?: string } {\n  const { chainId, account } = useActiveWeb3React()\n  const wethContract = useWETHContract()\n  const balance = useCurrencyBalance(account ?? undefined, inputCurrency)\n  // we can always parse the amount typed as the input currency, since wrapping is 1:1\n  const inputAmount = useMemo(() => tryParseAmount(typedValue, inputCurrency), [inputCurrency, typedValue])\n  const addTransaction = useTransactionAdder()\n\n  return useMemo(() => {\n    if (!wethContract || !chainId || !inputCurrency || !outputCurrency) return NOT_APPLICABLE\n    const weth = WETH9_EXTENDED[chainId]\n    if (!weth) return NOT_APPLICABLE\n\n    const hasInputAmount = Boolean(inputAmount?.greaterThan('0'))\n    const sufficientBalance = inputAmount && balance && !balance.lessThan(inputAmount)\n\n    if (inputCurrency.isNative && weth.equals(outputCurrency)) {\n      return {\n        wrapType: WrapType.WRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.deposit({ value: `0x${inputAmount.quotient.toString(16)}` })\n                  addTransaction(txReceipt, { summary: `Wrap ${inputAmount.toSignificant(6)} ETH to WETH` })\n                } catch (error) {\n                  console.error('Could not deposit', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : hasInputAmount ? 'Insufficient ETH balance' : 'Enter ETH amount',\n      }\n    } else if (weth.equals(inputCurrency) && outputCurrency.isNative) {\n      return {\n        wrapType: WrapType.UNWRAP,\n        execute:\n          sufficientBalance && inputAmount\n            ? async () => {\n                try {\n                  const txReceipt = await wethContract.withdraw(`0x${inputAmount.quotient.toString(16)}`)\n                  addTransaction(txReceipt, { summary: `Unwrap ${inputAmount.toSignificant(6)} WETH to ETH` })\n                } catch (error) {\n                  console.error('Could not withdraw', error)\n                }\n              }\n            : undefined,\n        inputError: sufficientBalance ? undefined : hasInputAmount ? 'Insufficient WETH balance' : 'Enter WETH amount',\n      }\n    } else {\n      return NOT_APPLICABLE\n    }\n  }, [wethContract, chainId, inputCurrency, outputCurrency, inputAmount, balance, addTransaction])\n}\n"]},"metadata":{},"sourceType":"module"}