{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{i18n}from\"@lingui/core\";import JSBI from'jsbi';import{Percent,CurrencyAmount}from'@uniswap/sdk-core';import{useCallback}from'react';import{useV2Pair}from'../../hooks/useV2Pairs';import{useTotalSupply}from'../../hooks/useTotalSupply';import{useActiveWeb3React}from'../../hooks/web3';import{tryParseAmount}from'../swap/hooks';import{useTokenBalances}from'../wallet/hooks';import{Field,typeInput}from'./actions';import{useAppDispatch,useAppSelector}from'state/hooks';export function useBurnState(){return useAppSelector(function(state){return state.burn;});}export function useDerivedBurnInfo(currencyA,currencyB){var _pair$liquidityToken$,_pair$liquidityToken,_tokens,_liquidityValues,_parsedAmounts;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var _useBurnState=useBurnState(),independentField=_useBurnState.independentField,typedValue=_useBurnState.typedValue;// pair + totalsupply\nvar _useV2Pair=useV2Pair(currencyA,currencyB),_useV2Pair2=_slicedToArray(_useV2Pair,2),pair=_useV2Pair2[1];// balances\nvar relevantTokenBalances=useTokenBalances(account!==null&&account!==void 0?account:undefined,[pair===null||pair===void 0?void 0:pair.liquidityToken]);var userLiquidity=relevantTokenBalances===null||relevantTokenBalances===void 0?void 0:relevantTokenBalances[(_pair$liquidityToken$=pair===null||pair===void 0?void 0:(_pair$liquidityToken=pair.liquidityToken)===null||_pair$liquidityToken===void 0?void 0:_pair$liquidityToken.address)!==null&&_pair$liquidityToken$!==void 0?_pair$liquidityToken$:''];var tokenA=currencyA===null||currencyA===void 0?void 0:currencyA.wrapped,tokenB=currencyB===null||currencyB===void 0?void 0:currencyB.wrapped;var tokens=(_tokens={},_defineProperty(_tokens,Field.CURRENCY_A,tokenA),_defineProperty(_tokens,Field.CURRENCY_B,tokenB),_defineProperty(_tokens,Field.LIQUIDITY,pair===null||pair===void 0?void 0:pair.liquidityToken),_tokens);// liquidity values\nvar totalSupply=useTotalSupply(pair===null||pair===void 0?void 0:pair.liquidityToken);var liquidityValueA=pair&&totalSupply&&userLiquidity&&tokenA&&// this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\nJSBI.greaterThanOrEqual(totalSupply.quotient,userLiquidity.quotient)?CurrencyAmount.fromRawAmount(tokenA,pair.getLiquidityValue(tokenA,totalSupply,userLiquidity,false).quotient):undefined;var liquidityValueB=pair&&totalSupply&&userLiquidity&&tokenB&&// this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\nJSBI.greaterThanOrEqual(totalSupply.quotient,userLiquidity.quotient)?CurrencyAmount.fromRawAmount(tokenB,pair.getLiquidityValue(tokenB,totalSupply,userLiquidity,false).quotient):undefined;var liquidityValues=(_liquidityValues={},_defineProperty(_liquidityValues,Field.CURRENCY_A,liquidityValueA),_defineProperty(_liquidityValues,Field.CURRENCY_B,liquidityValueB),_liquidityValues);var percentToRemove=new Percent('0','100');// user specified a %\nif(independentField===Field.LIQUIDITY_PERCENT){percentToRemove=new Percent(typedValue,'100');}// user specified a specific amount of liquidity tokens\nelse if(independentField===Field.LIQUIDITY){if(pair===null||pair===void 0?void 0:pair.liquidityToken){var independentAmount=tryParseAmount(typedValue,pair.liquidityToken);if(independentAmount&&userLiquidity&&!independentAmount.greaterThan(userLiquidity)){percentToRemove=new Percent(independentAmount.quotient,userLiquidity.quotient);}}}// user specified a specific amount of token a or b\nelse{if(tokens[independentField]){var _independentAmount=tryParseAmount(typedValue,tokens[independentField]);var liquidityValue=liquidityValues[independentField];if(_independentAmount&&liquidityValue&&!_independentAmount.greaterThan(liquidityValue)){percentToRemove=new Percent(_independentAmount.quotient,liquidityValue.quotient);}}}var parsedAmounts=(_parsedAmounts={},_defineProperty(_parsedAmounts,Field.LIQUIDITY_PERCENT,percentToRemove),_defineProperty(_parsedAmounts,Field.LIQUIDITY,userLiquidity&&percentToRemove&&percentToRemove.greaterThan('0')?CurrencyAmount.fromRawAmount(userLiquidity.currency,percentToRemove.multiply(userLiquidity.quotient).quotient):undefined),_defineProperty(_parsedAmounts,Field.CURRENCY_A,tokenA&&percentToRemove&&percentToRemove.greaterThan('0')&&liquidityValueA?CurrencyAmount.fromRawAmount(tokenA,percentToRemove.multiply(liquidityValueA.quotient).quotient):undefined),_defineProperty(_parsedAmounts,Field.CURRENCY_B,tokenB&&percentToRemove&&percentToRemove.greaterThan('0')&&liquidityValueB?CurrencyAmount.fromRawAmount(tokenB,percentToRemove.multiply(liquidityValueB.quotient).quotient):undefined),_parsedAmounts);var error;if(!account){error=/*i18n*/i18n._(\"Connect Wallet\");}if(!parsedAmounts[Field.LIQUIDITY]||!parsedAmounts[Field.CURRENCY_A]||!parsedAmounts[Field.CURRENCY_B]){var _error;error=(_error=error)!==null&&_error!==void 0?_error:/*i18n*/i18n._(\"Enter an amount\");}return{pair:pair,parsedAmounts:parsedAmounts,error:error};}export function useBurnActionHandlers(){var dispatch=useAppDispatch();var onUserInput=useCallback(function(field,typedValue){dispatch(typeInput({field:field,typedValue:typedValue}));},[dispatch]);return{onUserInput:onUserInput};}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/burn/hooks.ts"],"names":["JSBI","Percent","CurrencyAmount","useCallback","useV2Pair","useTotalSupply","useActiveWeb3React","tryParseAmount","useTokenBalances","Field","typeInput","useAppDispatch","useAppSelector","useBurnState","state","burn","useDerivedBurnInfo","currencyA","currencyB","account","independentField","typedValue","pair","relevantTokenBalances","undefined","liquidityToken","userLiquidity","address","tokenA","wrapped","tokenB","tokens","CURRENCY_A","CURRENCY_B","LIQUIDITY","totalSupply","liquidityValueA","greaterThanOrEqual","quotient","fromRawAmount","getLiquidityValue","liquidityValueB","liquidityValues","percentToRemove","LIQUIDITY_PERCENT","independentAmount","greaterThan","liquidityValue","parsedAmounts","currency","multiply","error","useBurnActionHandlers","dispatch","onUserInput","field"],"mappings":"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","sourcesContent":["import { t } from '@lingui/macro'\nimport JSBI from 'jsbi'\nimport { Token, Currency, Percent, CurrencyAmount } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { useCallback } from 'react'\nimport { useV2Pair } from '../../hooks/useV2Pairs'\nimport { useTotalSupply } from '../../hooks/useTotalSupply'\n\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { AppState } from '../index'\nimport { tryParseAmount } from '../swap/hooks'\nimport { useTokenBalances } from '../wallet/hooks'\nimport { Field, typeInput } from './actions'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nexport function useBurnState(): AppState['burn'] {\n  return useAppSelector((state) => state.burn)\n}\n\nexport function useDerivedBurnInfo(\n  currencyA: Currency | undefined,\n  currencyB: Currency | undefined\n): {\n  pair?: Pair | null\n  parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  }\n  error?: string\n} {\n  const { account } = useActiveWeb3React()\n\n  const { independentField, typedValue } = useBurnState()\n\n  // pair + totalsupply\n  const [, pair] = useV2Pair(currencyA, currencyB)\n\n  // balances\n  const relevantTokenBalances = useTokenBalances(account ?? undefined, [pair?.liquidityToken])\n  const userLiquidity: undefined | CurrencyAmount<Token> = relevantTokenBalances?.[pair?.liquidityToken?.address ?? '']\n\n  const [tokenA, tokenB] = [currencyA?.wrapped, currencyB?.wrapped]\n  const tokens = {\n    [Field.CURRENCY_A]: tokenA,\n    [Field.CURRENCY_B]: tokenB,\n    [Field.LIQUIDITY]: pair?.liquidityToken,\n  }\n\n  // liquidity values\n  const totalSupply = useTotalSupply(pair?.liquidityToken)\n  const liquidityValueA =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenA &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenA, pair.getLiquidityValue(tokenA, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValueB =\n    pair &&\n    totalSupply &&\n    userLiquidity &&\n    tokenB &&\n    // this condition is a short-circuit in the case where useTokenBalance updates sooner than useTotalSupply\n    JSBI.greaterThanOrEqual(totalSupply.quotient, userLiquidity.quotient)\n      ? CurrencyAmount.fromRawAmount(tokenB, pair.getLiquidityValue(tokenB, totalSupply, userLiquidity, false).quotient)\n      : undefined\n  const liquidityValues: { [Field.CURRENCY_A]?: CurrencyAmount<Token>; [Field.CURRENCY_B]?: CurrencyAmount<Token> } = {\n    [Field.CURRENCY_A]: liquidityValueA,\n    [Field.CURRENCY_B]: liquidityValueB,\n  }\n\n  let percentToRemove: Percent = new Percent('0', '100')\n  // user specified a %\n  if (independentField === Field.LIQUIDITY_PERCENT) {\n    percentToRemove = new Percent(typedValue, '100')\n  }\n  // user specified a specific amount of liquidity tokens\n  else if (independentField === Field.LIQUIDITY) {\n    if (pair?.liquidityToken) {\n      const independentAmount = tryParseAmount(typedValue, pair.liquidityToken)\n      if (independentAmount && userLiquidity && !independentAmount.greaterThan(userLiquidity)) {\n        percentToRemove = new Percent(independentAmount.quotient, userLiquidity.quotient)\n      }\n    }\n  }\n  // user specified a specific amount of token a or b\n  else {\n    if (tokens[independentField]) {\n      const independentAmount = tryParseAmount(typedValue, tokens[independentField])\n      const liquidityValue = liquidityValues[independentField]\n      if (independentAmount && liquidityValue && !independentAmount.greaterThan(liquidityValue)) {\n        percentToRemove = new Percent(independentAmount.quotient, liquidityValue.quotient)\n      }\n    }\n  }\n\n  const parsedAmounts: {\n    [Field.LIQUIDITY_PERCENT]: Percent\n    [Field.LIQUIDITY]?: CurrencyAmount<Token>\n    [Field.CURRENCY_A]?: CurrencyAmount<Currency>\n    [Field.CURRENCY_B]?: CurrencyAmount<Currency>\n  } = {\n    [Field.LIQUIDITY_PERCENT]: percentToRemove,\n    [Field.LIQUIDITY]:\n      userLiquidity && percentToRemove && percentToRemove.greaterThan('0')\n        ? CurrencyAmount.fromRawAmount(\n            userLiquidity.currency,\n            percentToRemove.multiply(userLiquidity.quotient).quotient\n          )\n        : undefined,\n    [Field.CURRENCY_A]:\n      tokenA && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueA\n        ? CurrencyAmount.fromRawAmount(tokenA, percentToRemove.multiply(liquidityValueA.quotient).quotient)\n        : undefined,\n    [Field.CURRENCY_B]:\n      tokenB && percentToRemove && percentToRemove.greaterThan('0') && liquidityValueB\n        ? CurrencyAmount.fromRawAmount(tokenB, percentToRemove.multiply(liquidityValueB.quotient).quotient)\n        : undefined,\n  }\n\n  let error: string | undefined\n  if (!account) {\n    error = t`Connect Wallet`\n  }\n\n  if (!parsedAmounts[Field.LIQUIDITY] || !parsedAmounts[Field.CURRENCY_A] || !parsedAmounts[Field.CURRENCY_B]) {\n    error = error ?? t`Enter an amount`\n  }\n\n  return { pair, parsedAmounts, error }\n}\n\nexport function useBurnActionHandlers(): {\n  onUserInput: (field: Field, typedValue: string) => void\n} {\n  const dispatch = useAppDispatch()\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onUserInput,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}