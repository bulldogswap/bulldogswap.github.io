{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _STABLECOIN_AMOUNT_OU;import{CurrencyAmount,Price}from'@uniswap/sdk-core';import{useMemo}from'react';import{SupportedChainId}from'../constants/chains';import{DAI_OPTIMISM,USDC,USDC_ARBITRUM}from'../constants/tokens';import{useV2TradeExactOut}from'./useV2Trade';import{useBestV3TradeExactOut}from'./useBestV3Trade';import{useActiveWeb3React}from'./web3';// Stablecoin amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nvar STABLECOIN_AMOUNT_OUT=(_STABLECOIN_AMOUNT_OU={},_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.MAINNET,CurrencyAmount.fromRawAmount(USDC,100000e6)),_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.ARBITRUM_ONE,CurrencyAmount.fromRawAmount(USDC_ARBITRUM,10000e6)),_defineProperty(_STABLECOIN_AMOUNT_OU,SupportedChainId.OPTIMISM,CurrencyAmount.fromRawAmount(DAI_OPTIMISM,10000e18)),_STABLECOIN_AMOUNT_OU);/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */export default function useUSDCPrice(currency){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var amountOut=chainId?STABLECOIN_AMOUNT_OUT[chainId]:undefined;var stablecoin=amountOut===null||amountOut===void 0?void 0:amountOut.currency;var v2USDCTrade=useV2TradeExactOut(currency,amountOut,{maxHops:2});var v3USDCTrade=useBestV3TradeExactOut(currency,amountOut);return useMemo(function(){if(!currency||!stablecoin){return undefined;}// handle usdc\nif(currency===null||currency===void 0?void 0:currency.wrapped.equals(stablecoin)){return new Price(stablecoin,stablecoin,'1','1');}// use v2 price if available, v3 as fallback\nif(v2USDCTrade){var _v2USDCTrade$route$mi=v2USDCTrade.route.midPrice,numerator=_v2USDCTrade$route$mi.numerator,denominator=_v2USDCTrade$route$mi.denominator;return new Price(currency,stablecoin,denominator,numerator);}else if(v3USDCTrade.trade){var _v3USDCTrade$trade$ro=v3USDCTrade.trade.route.midPrice,_numerator=_v3USDCTrade$trade$ro.numerator,_denominator=_v3USDCTrade$trade$ro.denominator;return new Price(currency,stablecoin,_denominator,_numerator);}return undefined;},[currency,stablecoin,v2USDCTrade,v3USDCTrade.trade]);}export function useUSDCValue(currencyAmount){var price=useUSDCPrice(currencyAmount===null||currencyAmount===void 0?void 0:currencyAmount.currency);return useMemo(function(){if(!price||!currencyAmount)return null;try{return price.quote(currencyAmount);}catch(error){return null;}},[currencyAmount,price]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useUSDCPrice.ts"],"names":["CurrencyAmount","Price","useMemo","SupportedChainId","DAI_OPTIMISM","USDC","USDC_ARBITRUM","useV2TradeExactOut","useBestV3TradeExactOut","useActiveWeb3React","STABLECOIN_AMOUNT_OUT","MAINNET","fromRawAmount","ARBITRUM_ONE","OPTIMISM","useUSDCPrice","currency","chainId","amountOut","undefined","stablecoin","v2USDCTrade","maxHops","v3USDCTrade","wrapped","equals","route","midPrice","numerator","denominator","trade","useUSDCValue","currencyAmount","price","quote","error"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, Price, Token } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { SupportedChainId } from '../constants/chains'\nimport { DAI_OPTIMISM, USDC, USDC_ARBITRUM } from '../constants/tokens'\nimport { useV2TradeExactOut } from './useV2Trade'\nimport { useBestV3TradeExactOut } from './useBestV3Trade'\nimport { useActiveWeb3React } from './web3'\n\n// Stablecoin amounts used when calculating spot price for a given currency.\n// The amount is large enough to filter low liquidity pairs.\nconst STABLECOIN_AMOUNT_OUT: { [chainId: number]: CurrencyAmount<Token> } = {\n  [SupportedChainId.MAINNET]: CurrencyAmount.fromRawAmount(USDC, 100_000e6),\n  [SupportedChainId.ARBITRUM_ONE]: CurrencyAmount.fromRawAmount(USDC_ARBITRUM, 10_000e6),\n  [SupportedChainId.OPTIMISM]: CurrencyAmount.fromRawAmount(DAI_OPTIMISM, 10_000e18),\n}\n\n/**\n * Returns the price in USDC of the input currency\n * @param currency currency to compute the USDC price of\n */\nexport default function useUSDCPrice(currency?: Currency): Price<Currency, Token> | undefined {\n  const { chainId } = useActiveWeb3React()\n\n  const amountOut = chainId ? STABLECOIN_AMOUNT_OUT[chainId] : undefined\n  const stablecoin = amountOut?.currency\n\n  const v2USDCTrade = useV2TradeExactOut(currency, amountOut, {\n    maxHops: 2,\n  })\n  const v3USDCTrade = useBestV3TradeExactOut(currency, amountOut)\n\n  return useMemo(() => {\n    if (!currency || !stablecoin) {\n      return undefined\n    }\n\n    // handle usdc\n    if (currency?.wrapped.equals(stablecoin)) {\n      return new Price(stablecoin, stablecoin, '1', '1')\n    }\n\n    // use v2 price if available, v3 as fallback\n    if (v2USDCTrade) {\n      const { numerator, denominator } = v2USDCTrade.route.midPrice\n      return new Price(currency, stablecoin, denominator, numerator)\n    } else if (v3USDCTrade.trade) {\n      const { numerator, denominator } = v3USDCTrade.trade.route.midPrice\n      return new Price(currency, stablecoin, denominator, numerator)\n    }\n\n    return undefined\n  }, [currency, stablecoin, v2USDCTrade, v3USDCTrade.trade])\n}\n\nexport function useUSDCValue(currencyAmount: CurrencyAmount<Currency> | undefined | null) {\n  const price = useUSDCPrice(currencyAmount?.currency)\n\n  return useMemo(() => {\n    if (!price || !currencyAmount) return null\n    try {\n      return price.quote(currencyAmount)\n    } catch (error) {\n      return null\n    }\n  }, [currencyAmount, price])\n}\n"]},"metadata":{},"sourceType":"module"}