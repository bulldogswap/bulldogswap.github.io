{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _asyncToGenerator from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _classCallCheck from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _CHAIN_ID_NETWORK_ARG;import{FortmaticConnector as FortmaticConnectorCore}from'@web3-react/fortmatic-connector';export var OVERLAY_READY='OVERLAY_READY';var CHAIN_ID_NETWORK_ARGUMENT=(_CHAIN_ID_NETWORK_ARG={},_defineProperty(_CHAIN_ID_NETWORK_ARG,1,undefined),_defineProperty(_CHAIN_ID_NETWORK_ARG,3,'ropsten'),_defineProperty(_CHAIN_ID_NETWORK_ARG,4,'rinkeby'),_defineProperty(_CHAIN_ID_NETWORK_ARG,42,'kovan'),_CHAIN_ID_NETWORK_ARG);export var FortmaticConnector=/*#__PURE__*/function(_FortmaticConnectorCo){_inherits(FortmaticConnector,_FortmaticConnectorCo);var _super=_createSuper(FortmaticConnector);function FortmaticConnector(){_classCallCheck(this,FortmaticConnector);return _super.apply(this,arguments);}_createClass(FortmaticConnector,[{key:\"activate\",value:function(){var _activate=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _this=this;var _yield$import,Fortmatic,_ref,apiKey,chainId,provider,pollForOverlayReady,_yield$Promise$all,_yield$Promise$all2,account;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(this.fortmatic){_context.next=11;break;}_context.next=3;return import('fortmatic');case 3:_yield$import=_context.sent;Fortmatic=_yield$import.default;_ref=this,apiKey=_ref.apiKey,chainId=_ref.chainId;if(!(chainId in CHAIN_ID_NETWORK_ARGUMENT)){_context.next=10;break;}this.fortmatic=new Fortmatic(apiKey,CHAIN_ID_NETWORK_ARGUMENT[chainId]);_context.next=11;break;case 10:throw new Error(\"Unsupported network ID: \".concat(chainId));case 11:provider=this.fortmatic.getProvider();pollForOverlayReady=new Promise(function(resolve){var interval=setInterval(function(){if(provider.overlayReady){clearInterval(interval);_this.emit(OVERLAY_READY);resolve();}},200);});_context.next=15;return Promise.all([provider.enable().then(function(accounts){return accounts[0];}),pollForOverlayReady]);case 15:_yield$Promise$all=_context.sent;_yield$Promise$all2=_slicedToArray(_yield$Promise$all,1);account=_yield$Promise$all2[0];return _context.abrupt(\"return\",{provider:this.fortmatic.getProvider(),chainId:this.chainId,account:account});case 19:case\"end\":return _context.stop();}}},_callee,this);}));function activate(){return _activate.apply(this,arguments);}return activate;}()}]);return FortmaticConnector;}(FortmaticConnectorCore);","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/connectors/Fortmatic.ts"],"names":["FortmaticConnector","FortmaticConnectorCore","OVERLAY_READY","CHAIN_ID_NETWORK_ARGUMENT","undefined","fortmatic","Fortmatic","default","apiKey","chainId","Error","provider","getProvider","pollForOverlayReady","Promise","resolve","interval","setInterval","overlayReady","clearInterval","emit","all","enable","then","accounts","account"],"mappings":"y8CAAA,OAASA,kBAAkB,GAAIC,CAAAA,sBAA/B,KAA6D,iCAA7D,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,eAAtB,CAIP,GAAMC,CAAAA,yBAAgG,iEACnG,CADmG,CAC/FC,SAD+F,wCAEnG,CAFmG,CAE/F,SAF+F,wCAGnG,CAHmG,CAG/F,SAH+F,wCAInG,EAJmG,CAI9F,OAJ8F,wBAAtG,CAOA,UAAaJ,CAAAA,kBAAb,kYACE,iRACO,KAAKK,SADZ,gDAEyC,QAAO,WAAP,CAFzC,oCAEqBC,SAFrB,eAEYC,OAFZ,MAIgC,IAJhC,CAIYC,MAJZ,MAIYA,MAJZ,CAIoBC,OAJpB,MAIoBA,OAJpB,MAKQA,OAAO,GAAIN,CAAAA,yBALnB,2BAMM,KAAKE,SAAL,CAAiB,GAAIC,CAAAA,SAAJ,CAAcE,MAAd,CAAsBL,yBAAyB,CAACM,OAAD,CAA/C,CAAjB,CANN,oCAQY,IAAIC,CAAAA,KAAJ,mCAAqCD,OAArC,EARZ,SAYQE,QAZR,CAYmB,KAAKN,SAAL,CAAeO,WAAf,EAZnB,CAcQC,mBAdR,CAc8B,GAAIC,CAAAA,OAAJ,CAAkB,SAACC,OAAD,CAAa,CACzD,GAAMC,CAAAA,QAAQ,CAAGC,WAAW,CAAC,UAAM,CACjC,GAAIN,QAAQ,CAACO,YAAb,CAA2B,CACzBC,aAAa,CAACH,QAAD,CAAb,CACA,KAAI,CAACI,IAAL,CAAUlB,aAAV,EACAa,OAAO,GACR,CACF,CAN2B,CAMzB,GANyB,CAA5B,CAOD,CAR2B,CAd9B,wBAwB0BD,CAAAA,OAAO,CAACO,GAAR,CAAY,CAClCV,QAAQ,CAACW,MAAT,GAAkBC,IAAlB,CAAuB,SAACC,QAAD,QAAwBA,CAAAA,QAAQ,CAAC,CAAD,CAAhC,EAAvB,CADkC,CAElCX,mBAFkC,CAAZ,CAxB1B,mGAwBSY,OAxBT,wDA6BS,CAAEd,QAAQ,CAAE,KAAKN,SAAL,CAAeO,WAAf,EAAZ,CAA0CH,OAAO,CAAG,IAAD,CAAcA,OAAjE,CAA0EgB,OAAO,CAAPA,OAA1E,CA7BT,8DADF,kHAAwCxB,sBAAxC","sourcesContent":["import { FortmaticConnector as FortmaticConnectorCore } from '@web3-react/fortmatic-connector'\n\nexport const OVERLAY_READY = 'OVERLAY_READY'\n\ntype FormaticSupportedChains = 1 | 3 | 4 | 42\n\nconst CHAIN_ID_NETWORK_ARGUMENT: { readonly [chainId in FormaticSupportedChains]: string | undefined } = {\n  [1]: undefined,\n  [3]: 'ropsten',\n  [4]: 'rinkeby',\n  [42]: 'kovan',\n}\n\nexport class FortmaticConnector extends FortmaticConnectorCore {\n  async activate() {\n    if (!this.fortmatic) {\n      const { default: Fortmatic } = await import('fortmatic')\n\n      const { apiKey, chainId } = this as any\n      if (chainId in CHAIN_ID_NETWORK_ARGUMENT) {\n        this.fortmatic = new Fortmatic(apiKey, CHAIN_ID_NETWORK_ARGUMENT[chainId as FormaticSupportedChains])\n      } else {\n        throw new Error(`Unsupported network ID: ${chainId}`)\n      }\n    }\n\n    const provider = this.fortmatic.getProvider()\n\n    const pollForOverlayReady = new Promise<void>((resolve) => {\n      const interval = setInterval(() => {\n        if (provider.overlayReady) {\n          clearInterval(interval)\n          this.emit(OVERLAY_READY)\n          resolve()\n        }\n      }, 200)\n    })\n\n    const [account] = await Promise.all([\n      provider.enable().then((accounts: string[]) => accounts[0]),\n      pollForOverlayReady,\n    ])\n\n    return { provider: this.fortmatic.getProvider(), chainId: (this as any).chainId, account }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}