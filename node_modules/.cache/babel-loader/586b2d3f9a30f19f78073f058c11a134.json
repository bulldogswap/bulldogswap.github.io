{"ast":null,"code":"import JSBI from 'jsbi';\nimport { CurrencyAmount, sqrt, Token, Price, TradeType, Fraction, computePriceImpact, sortedInsert, validateAndParseAddress } from '@uniswap/sdk-core';\nimport invariant from 'tiny-invariant';\nimport { keccak256, pack } from '@ethersproject/solidity';\nimport { getCreate2Address } from '@ethersproject/address';\nvar FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f';\nvar INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f';\nvar MINIMUM_LIQUIDITY = /*#__PURE__*/JSBI.BigInt(1000); // exports for internal consumption\n\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar FIVE = /*#__PURE__*/JSBI.BigInt(5);\n\nvar _997 = /*#__PURE__*/JSBI.BigInt(997);\n\nvar _1000 = /*#__PURE__*/JSBI.BigInt(1000);\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _construct(Parent, args, Class) {\n  if (_isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) _setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}\n\nfunction _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nfunction _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !_isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return _construct(Class, arguments, _getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return _setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      return function () {\n        if (i >= o.length) return {\n          done: true\n        };\n        return {\n          done: false,\n          value: o[i++]\n        };\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  it = o[Symbol.iterator]();\n  return it.next.bind(it);\n} // see https://stackoverflow.com/a/41102306\n\n\nvar CAN_SET_PROTOTYPE = ('setPrototypeOf' in Object);\n/**\r\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\r\n * obtained by sending any amount of input.\r\n */\n\nvar InsufficientReservesError = /*#__PURE__*/function (_Error) {\n  _inheritsLoose(InsufficientReservesError, _Error);\n\n  function InsufficientReservesError() {\n    var _this;\n\n    _this = _Error.call(this) || this;\n    _this.isInsufficientReservesError = true;\n    _this.name = _this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this), (this instanceof InsufficientReservesError ? this.constructor : void 0).prototype);\n    return _this;\n  }\n\n  return InsufficientReservesError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\r\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\r\n * than the price of a single unit of output after fees.\r\n */\n\n\nvar InsufficientInputAmountError = /*#__PURE__*/function (_Error2) {\n  _inheritsLoose(InsufficientInputAmountError, _Error2);\n\n  function InsufficientInputAmountError() {\n    var _this2;\n\n    _this2 = _Error2.call(this) || this;\n    _this2.isInsufficientInputAmountError = true;\n    _this2.name = _this2.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(_assertThisInitialized(_this2), (this instanceof InsufficientInputAmountError ? this.constructor : void 0).prototype);\n    return _this2;\n  }\n\n  return InsufficientInputAmountError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nvar computePairAddress = function computePairAddress(_ref) {\n  var factoryAddress = _ref.factoryAddress,\n      tokenA = _ref.tokenA,\n      tokenB = _ref.tokenB;\n\n  var _ref2 = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA],\n      token0 = _ref2[0],\n      token1 = _ref2[1]; // does safety checks\n\n\n  return getCreate2Address(factoryAddress, keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]), INIT_CODE_HASH);\n};\n\nvar Pair = /*#__PURE__*/function () {\n  function Pair(currencyAmountA, tokenAmountB) {\n    var tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [currencyAmountA, tokenAmountB] : [tokenAmountB, currencyAmountA];\n    this.liquidityToken = new Token(tokenAmounts[0].currency.chainId, Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency), 18, 'UNI-V2', 'Uniswap V2');\n    this.tokenAmounts = tokenAmounts;\n  }\n\n  Pair.getAddress = function getAddress(tokenA, tokenB) {\n    return computePairAddress({\n      factoryAddress: FACTORY_ADDRESS,\n      tokenA: tokenA,\n      tokenB: tokenB\n    });\n  }\n  /**\r\n   * Returns true if the token is either token0 or token1\r\n   * @param token to check\r\n   */\n  ;\n\n  var _proto = Pair.prototype;\n\n  _proto.involvesToken = function involvesToken(token) {\n    return token.equals(this.token0) || token.equals(this.token1);\n  }\n  /**\r\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\r\n   */\n  ;\n  /**\r\n   * Return the price of the given token in terms of the other token in the pair.\r\n   * @param token token to return price of\r\n   */\n\n\n  _proto.priceOf = function priceOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.token0Price : this.token1Price;\n  }\n  /**\r\n   * Returns the chain ID of the tokens in the pair.\r\n   */\n  ;\n\n  _proto.reserveOf = function reserveOf(token) {\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1;\n  };\n\n  _proto.getOutputAmount = function getOutputAmount(inputAmount) {\n    !this.involvesToken(inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError();\n    }\n\n    var inputReserve = this.reserveOf(inputAmount.currency);\n    var outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997);\n    var numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient);\n    var denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee);\n    var outputAmount = CurrencyAmount.fromRawAmount(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.divide(numerator, denominator));\n\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getInputAmount = function getInputAmount(outputAmount) {\n    !this.involvesToken(outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO) || JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)) {\n      throw new InsufficientReservesError();\n    }\n\n    var outputReserve = this.reserveOf(outputAmount.currency);\n    var inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0);\n    var numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000);\n    var denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997);\n    var inputAmount = CurrencyAmount.fromRawAmount(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0, JSBI.add(JSBI.divide(numerator, denominator), ONE));\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))];\n  };\n\n  _proto.getLiquidityMinted = function getLiquidityMinted(totalSupply, tokenAmountA, tokenAmountB) {\n    !totalSupply.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n    ? [tokenAmountA, tokenAmountB] : [tokenAmountB, tokenAmountA];\n    !(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    var liquidity;\n\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)), MINIMUM_LIQUIDITY);\n    } else {\n      var amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient);\n      var amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient);\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1;\n    }\n\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError();\n    }\n\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity);\n  };\n\n  _proto.getLiquidityValue = function getLiquidityValue(token, totalSupply, liquidity, feeOn, kLast) {\n    if (feeOn === void 0) {\n      feeOn = false;\n    }\n\n    !this.involvesToken(token) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n    !totalSupply.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOTAL_SUPPLY') : invariant(false) : void 0;\n    !liquidity.currency.equals(this.liquidityToken) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    !JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'LIQUIDITY') : invariant(false) : void 0;\n    var totalSupplyAdjusted;\n\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply;\n    } else {\n      !!!kLast ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'K_LAST') : invariant(false) : void 0;\n      var kLastParsed = JSBI.BigInt(kLast);\n\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        var rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient));\n        var rootKLast = sqrt(kLastParsed);\n\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          var numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast));\n          var denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast);\n          var feeLiquidity = JSBI.divide(numerator, denominator);\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity));\n        } else {\n          totalSupplyAdjusted = totalSupply;\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply;\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(token, JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient));\n  };\n\n  _createClass(Pair, [{\n    key: \"token0Price\",\n    get: function get() {\n      var result = this.tokenAmounts[1].divide(this.tokenAmounts[0]);\n      return new Price(this.token0, this.token1, result.denominator, result.numerator);\n    }\n    /**\r\n     * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\r\n     */\n\n  }, {\n    key: \"token1Price\",\n    get: function get() {\n      var result = this.tokenAmounts[0].divide(this.tokenAmounts[1]);\n      return new Price(this.token1, this.token0, result.denominator, result.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.token0.chainId;\n    }\n  }, {\n    key: \"token0\",\n    get: function get() {\n      return this.tokenAmounts[0].currency;\n    }\n  }, {\n    key: \"token1\",\n    get: function get() {\n      return this.tokenAmounts[1].currency;\n    }\n  }, {\n    key: \"reserve0\",\n    get: function get() {\n      return this.tokenAmounts[0];\n    }\n  }, {\n    key: \"reserve1\",\n    get: function get() {\n      return this.tokenAmounts[1];\n    }\n  }]);\n\n  return Pair;\n}();\n\nvar Route = /*#__PURE__*/function () {\n  function Route(pairs, input, output) {\n    this._midPrice = null;\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    var chainId = pairs[0].chainId;\n    !pairs.every(function (pair) {\n      return pair.chainId === chainId;\n    }) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    var wrappedInput = input.wrapped;\n    !pairs[0].involvesToken(wrappedInput) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n    !(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n    var path = [wrappedInput];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(pairs.entries()), _step; !(_step = _iterator()).done;) {\n      var _step$value = _step.value,\n          i = _step$value[0],\n          pair = _step$value[1];\n      var currentInput = path[i];\n      !(currentInput.equals(pair.token0) || currentInput.equals(pair.token1)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PATH') : invariant(false) : void 0;\n\n      var _output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0;\n\n      path.push(_output);\n    }\n\n    this.pairs = pairs;\n    this.path = path;\n    this.input = input;\n    this.output = output;\n  }\n\n  _createClass(Route, [{\n    key: \"midPrice\",\n    get: function get() {\n      if (this._midPrice !== null) return this._midPrice;\n      var prices = [];\n\n      for (var _iterator2 = _createForOfIteratorHelperLoose(this.pairs.entries()), _step2; !(_step2 = _iterator2()).done;) {\n        var _step2$value = _step2.value,\n            i = _step2$value[0],\n            pair = _step2$value[1];\n        prices.push(this.path[i].equals(pair.token0) ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient) : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient));\n      }\n\n      var reduced = prices.slice(1).reduce(function (accumulator, currentValue) {\n        return accumulator.multiply(currentValue);\n      }, prices[0]);\n      return this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator);\n    }\n  }, {\n    key: \"chainId\",\n    get: function get() {\n      return this.pairs[0].chainId;\n    }\n  }]);\n\n  return Route;\n}(); // in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\n\n\nfunction inputOutputComparator(a, b) {\n  // must have same input and output token for comparison\n  !a.inputAmount.currency.equals(b.inputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT_CURRENCY') : invariant(false) : void 0;\n  !a.outputAmount.currency.equals(b.outputAmount.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT_CURRENCY') : invariant(false) : void 0;\n\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0;\n    } // trade A requires less input than trade B, so A should come first\n\n\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1;\n    } else {\n      return 1;\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n} // extension of the input output comparator that also considers other dimensions of the trade in ranking them\n\n\nfunction tradeComparator(a, b) {\n  var ioComp = inputOutputComparator(a, b);\n\n  if (ioComp !== 0) {\n    return ioComp;\n  } // consider lowest slippage next, since these are less likely to fail\n\n\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1;\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1;\n  } // finally consider the number of hops since each hop costs gas\n\n\n  return a.route.path.length - b.route.path.length;\n}\n/**\r\n * Represents a trade executed against a list of pairs.\r\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\r\n */\n\n\nvar Trade = /*#__PURE__*/function () {\n  function Trade(route, amount, tradeType) {\n    this.route = route;\n    this.tradeType = tradeType;\n    var tokenAmounts = new Array(route.path.length);\n\n    if (tradeType === TradeType.EXACT_INPUT) {\n      !amount.currency.equals(route.input) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INPUT') : invariant(false) : void 0;\n      tokenAmounts[0] = amount.wrapped;\n\n      for (var i = 0; i < route.path.length - 1; i++) {\n        var pair = route.pairs[i];\n\n        var _pair$getOutputAmount = pair.getOutputAmount(tokenAmounts[i]),\n            outputAmount = _pair$getOutputAmount[0];\n\n        tokenAmounts[i + 1] = outputAmount;\n      }\n\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, tokenAmounts[tokenAmounts.length - 1].numerator, tokenAmounts[tokenAmounts.length - 1].denominator);\n    } else {\n      !amount.currency.equals(route.output) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'OUTPUT') : invariant(false) : void 0;\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped;\n\n      for (var _i = route.path.length - 1; _i > 0; _i--) {\n        var _pair = route.pairs[_i - 1];\n\n        var _pair$getInputAmount = _pair.getInputAmount(tokenAmounts[_i]),\n            inputAmount = _pair$getInputAmount[0];\n\n        tokenAmounts[_i - 1] = inputAmount;\n      }\n\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, tokenAmounts[0].numerator, tokenAmounts[0].denominator);\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator);\n    }\n\n    this.executionPrice = new Price(this.inputAmount.currency, this.outputAmount.currency, this.inputAmount.quotient, this.outputAmount.quotient);\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount);\n  }\n  /**\r\n   * Constructs an exact in trade with the given amount in and route\r\n   * @param route route of the exact in trade\r\n   * @param amountIn the amount being passed in\r\n   */\n\n\n  Trade.exactIn = function exactIn(route, amountIn) {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT);\n  }\n  /**\r\n   * Constructs an exact out trade with the given amount out and route\r\n   * @param route route of the exact out trade\r\n   * @param amountOut the amount returned by the trade\r\n   */\n  ;\n\n  Trade.exactOut = function exactOut(route, amountOut) {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT);\n  }\n  /**\r\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  var _proto = Trade.prototype;\n\n  _proto.minimumAmountOut = function minimumAmountOut(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount;\n    } else {\n      var slippageAdjustedAmountOut = new Fraction(ONE).add(slippageTolerance).invert().multiply(this.outputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut);\n    }\n  }\n  /**\r\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\r\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\r\n   */\n  ;\n\n  _proto.maximumAmountIn = function maximumAmountIn(slippageTolerance) {\n    !!slippageTolerance.lessThan(ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'SLIPPAGE_TOLERANCE') : invariant(false) : void 0;\n\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount;\n    } else {\n      var slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient).quotient;\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn);\n    }\n  }\n  /**\r\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\r\n   * amount to an output token, making at most `maxHops` hops.\r\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param nextAmountIn exact amount of input currency to spend\r\n   * @param currencyOut the desired currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactIn = function bestTradeExactIn(pairs, currencyAmountIn, currencyOut, _temp, // used in recursion.\n  currentPairs, nextAmountIn, bestTrades) {\n    var _ref = _temp === void 0 ? {} : _temp,\n        _ref$maxNumResults = _ref.maxNumResults,\n        maxNumResults = _ref$maxNumResults === void 0 ? 3 : _ref$maxNumResults,\n        _ref$maxHops = _ref.maxHops,\n        maxHops = _ref$maxHops === void 0 ? 3 : _ref$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (nextAmountIn === void 0) {\n      nextAmountIn = currencyAmountIn;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(currencyAmountIn === nextAmountIn || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var amountIn = nextAmountIn.wrapped;\n    var tokenOut = currencyOut.wrapped;\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountOut = void 0;\n\n      try {\n        ;\n\n        var _pair$getOutputAmount2 = pair.getOutputAmount(amountIn);\n\n        amountOut = _pair$getOutputAmount2[0];\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the output token, so this is the final trade of one of the paths\n\n\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(bestTrades, new Trade(new Route([].concat(currentPairs, [pair]), currencyAmountIn.currency, currencyOut), currencyAmountIn, TradeType.EXACT_INPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactIn(pairsExcludingThisPair, currencyAmountIn, currencyOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [].concat(currentPairs, [pair]), amountOut, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  }\n  /**\r\n   * Return the execution price after accounting for slippage tolerance\r\n   * @param slippageTolerance the allowed tolerated slippage\r\n   */\n  ;\n\n  _proto.worstExecutionPrice = function worstExecutionPrice(slippageTolerance) {\n    return new Price(this.inputAmount.currency, this.outputAmount.currency, this.maximumAmountIn(slippageTolerance).quotient, this.minimumAmountOut(slippageTolerance).quotient);\n  }\n  /**\r\n   * similar to the above method but instead targets a fixed output amount\r\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\r\n   * to an output token amount, making at most `maxHops` hops\r\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\r\n   * the amount in among multiple routes.\r\n   * @param pairs the pairs to consider in finding the best trade\r\n   * @param currencyIn the currency to spend\r\n   * @param nextAmountOut the exact amount of currency out\r\n   * @param maxNumResults maximum number of results to return\r\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\r\n   * @param currentPairs used in recursion; the current list of pairs\r\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\r\n   * @param bestTrades used in recursion; the current list of best trades\r\n   */\n  ;\n\n  Trade.bestTradeExactOut = function bestTradeExactOut(pairs, currencyIn, currencyAmountOut, _temp2, // used in recursion.\n  currentPairs, nextAmountOut, bestTrades) {\n    var _ref2 = _temp2 === void 0 ? {} : _temp2,\n        _ref2$maxNumResults = _ref2.maxNumResults,\n        maxNumResults = _ref2$maxNumResults === void 0 ? 3 : _ref2$maxNumResults,\n        _ref2$maxHops = _ref2.maxHops,\n        maxHops = _ref2$maxHops === void 0 ? 3 : _ref2$maxHops;\n\n    if (currentPairs === void 0) {\n      currentPairs = [];\n    }\n\n    if (nextAmountOut === void 0) {\n      nextAmountOut = currencyAmountOut;\n    }\n\n    if (bestTrades === void 0) {\n      bestTrades = [];\n    }\n\n    !(pairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'PAIRS') : invariant(false) : void 0;\n    !(maxHops > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_HOPS') : invariant(false) : void 0;\n    !(currencyAmountOut === nextAmountOut || currentPairs.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'INVALID_RECURSION') : invariant(false) : void 0;\n    var amountOut = nextAmountOut.wrapped;\n    var tokenIn = currencyIn.wrapped;\n\n    for (var i = 0; i < pairs.length; i++) {\n      var pair = pairs[i]; // pair irrelevant\n\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue;\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue;\n      var amountIn = void 0;\n\n      try {\n        ;\n\n        var _pair$getInputAmount2 = pair.getInputAmount(amountOut);\n\n        amountIn = _pair$getInputAmount2[0];\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue;\n        }\n\n        throw error;\n      } // we have arrived at the input token, so this is the first trade of one of the paths\n\n\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(bestTrades, new Trade(new Route([pair].concat(currentPairs), currencyIn, currencyAmountOut.currency), currencyAmountOut, TradeType.EXACT_OUTPUT), maxNumResults, tradeComparator);\n      } else if (maxHops > 1 && pairs.length > 1) {\n        var pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length)); // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n\n        Trade.bestTradeExactOut(pairsExcludingThisPair, currencyIn, currencyAmountOut, {\n          maxNumResults: maxNumResults,\n          maxHops: maxHops - 1\n        }, [pair].concat(currentPairs), amountIn, bestTrades);\n      }\n    }\n\n    return bestTrades;\n  };\n\n  return Trade;\n}();\n\nfunction toHex(currencyAmount) {\n  return \"0x\" + currencyAmount.quotient.toString(16);\n}\n\nvar ZERO_HEX = '0x0';\n/**\r\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\r\n */\n\nvar Router = /*#__PURE__*/function () {\n  /**\r\n   * Cannot be constructed.\r\n   */\n  function Router() {}\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trade to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\n\n\n  Router.swapCallParameters = function swapCallParameters(trade, options) {\n    var etherIn = trade.inputAmount.currency.isNative;\n    var etherOut = trade.outputAmount.currency.isNative; // the router does not support both ether in and out\n\n    !!(etherIn && etherOut) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ETHER_IN_OUT') : invariant(false) : void 0;\n    !(!('ttl' in options) || options.ttl > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TTL') : invariant(false) : void 0;\n    var to = validateAndParseAddress(options.recipient);\n    var amountIn = toHex(trade.maximumAmountIn(options.allowedSlippage));\n    var amountOut = toHex(trade.minimumAmountOut(options.allowedSlippage));\n    var path = trade.route.path.map(function (token) {\n      return token.address;\n    });\n    var deadline = 'ttl' in options ? \"0x\" + (Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16) : \"0x\" + options.deadline.toString(16);\n    var useFeeOnTransfer = Boolean(options.feeOnTransfer);\n    var methodName;\n    var args;\n    var value;\n\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'; // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens' : 'swapExactTokensForTokens'; // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n\n          args = [amountIn, amountOut, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n\n      case TradeType.EXACT_OUTPUT:\n        !!useFeeOnTransfer ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'EXACT_OUT_FOT') : invariant(false) : void 0;\n\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'; // (uint amountOut, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, path, to, deadline];\n          value = amountIn;\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        } else {\n          methodName = 'swapTokensForExactTokens'; // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n\n          args = [amountOut, amountIn, path, to, deadline];\n          value = ZERO_HEX;\n        }\n\n        break;\n    }\n\n    return {\n      methodName: methodName,\n      args: args,\n      value: value\n    };\n  };\n\n  return Router;\n}();\n\nexport { FACTORY_ADDRESS, INIT_CODE_HASH, InsufficientInputAmountError, InsufficientReservesError, MINIMUM_LIQUIDITY, Pair, Route, Router, Trade, computePairAddress, inputOutputComparator, tradeComparator };","map":{"version":3,"sources":["../src/constants.ts","../src/errors.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/router.ts"],"names":["FACTORY_ADDRESS","INIT_CODE_HASH","MINIMUM_LIQUIDITY","JSBI","ZERO","ONE","FIVE","_997","_1000","CAN_SET_PROTOTYPE","InsufficientReservesError","Object","InsufficientInputAmountError","computePairAddress","factoryAddress","tokenA","tokenB","token0","token1","getCreate2Address","keccak256","pack","Pair","tokenAmounts","tokenAmountB","involvesToken","token","result","priceOf","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","numerator","denominator","outputAmount","CurrencyAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","sqrt","amount0","amount1","getLiquidityValue","feeOn","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","pairs","chainId","pair","wrappedInput","input","output","path","i","currentInput","prices","reduced","accumulator","inputOutputComparator","a","b","tradeComparator","ioComp","Trade","TradeType","route","tradeType","amount","computePriceImpact","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","maxNumResults","maxHops","currentPairs","nextAmountIn","currencyAmountIn","bestTrades","amountIn","tokenOut","currencyOut","amountOut","error","sortedInsert","pairsExcludingThisPair","worstExecutionPrice","nextAmountOut","currencyAmountOut","tokenIn","currencyIn","currencyAmount","ZERO_HEX","Router","etherIn","trade","etherOut","options","to","validateAndParseAddress","toHex","deadline","Math","useFeeOnTransfer","Boolean","methodName","args","value"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\nexport const FACTORY_ADDRESS = '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f'\n\nexport const INIT_CODE_HASH = '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const FIVE = JSBI.BigInt(5)\nexport const _997 = JSBI.BigInt(997)\nexport const _1000 = JSBI.BigInt(1000)\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import { BigintIsh, Price, sqrt, Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport { FACTORY_ADDRESS, INIT_CODE_HASH, MINIMUM_LIQUIDITY, FIVE, _997, _1000, ONE, ZERO } from '../constants'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\n\nexport const computePairAddress = ({\n  factoryAddress,\n  tokenA,\n  tokenB\n}: {\n  factoryAddress: string\n  tokenA: Token\n  tokenB: Token\n}): string => {\n  const [token0, token1] = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n  return getCreate2Address(\n    factoryAddress,\n    keccak256(['bytes'], [pack(['address', 'address'], [token0.address, token1.address])]),\n    INIT_CODE_HASH\n  )\n}\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [CurrencyAmount<Token>, CurrencyAmount<Token>]\n\n  public static getAddress(tokenA: Token, tokenB: Token): string {\n    return computePairAddress({ factoryAddress: FACTORY_ADDRESS, tokenA, tokenB })\n  }\n\n  public constructor(currencyAmountA: CurrencyAmount<Token>, tokenAmountB: CurrencyAmount<Token>) {\n    const tokenAmounts = currencyAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [currencyAmountA, tokenAmountB]\n      : [tokenAmountB, currencyAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].currency.chainId,\n      Pair.getAddress(tokenAmounts[0].currency, tokenAmounts[1].currency),\n      18,\n      'UNI-V2',\n      'Uniswap V2'\n    )\n    this.tokenAmounts = tokenAmounts as [CurrencyAmount<Token>, CurrencyAmount<Token>]\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[1].divide(this.tokenAmounts[0])\n    return new Price(this.token0, this.token1, result.denominator, result.numerator)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price<Token, Token> {\n    const result = this.tokenAmounts[0].divide(this.tokenAmounts[1])\n    return new Price(this.token1, this.token0, result.denominator, result.numerator)\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price<Token, Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): number {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].currency\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].currency\n  }\n\n  public get reserve0(): CurrencyAmount<Token> {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): CurrencyAmount<Token> {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(inputAmount.currency), 'TOKEN')\n    if (JSBI.equal(this.reserve0.quotient, ZERO) || JSBI.equal(this.reserve1.quotient, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.currency)\n    const outputReserve = this.reserveOf(inputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.quotient, _997)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.quotient)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.quotient, _1000), inputAmountWithFee)\n    const outputAmount = CurrencyAmount.fromRawAmount(\n      inputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.quotient, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [outputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getInputAmount(outputAmount: CurrencyAmount<Token>): [CurrencyAmount<Token>, Pair] {\n    invariant(this.involvesToken(outputAmount.currency), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.quotient, ZERO) ||\n      JSBI.equal(this.reserve1.quotient, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.quotient, this.reserveOf(outputAmount.currency).quotient)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.currency)\n    const inputReserve = this.reserveOf(outputAmount.currency.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.quotient, outputAmount.quotient), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.quotient, outputAmount.quotient), _997)\n    const inputAmount = CurrencyAmount.fromRawAmount(\n      outputAmount.currency.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [inputAmount, new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount))]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: CurrencyAmount<Token>,\n    tokenAmountA: CurrencyAmount<Token>,\n    tokenAmountB: CurrencyAmount<Token>\n  ): CurrencyAmount<Token> {\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.currency.sortsBefore(tokenAmountB.currency) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].currency.equals(this.token0) && tokenAmounts[1].currency.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.quotient, ZERO)) {\n      liquidity = JSBI.subtract(\n        sqrt(JSBI.multiply(tokenAmounts[0].quotient, tokenAmounts[1].quotient)),\n        MINIMUM_LIQUIDITY\n      )\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].quotient, totalSupply.quotient), this.reserve0.quotient)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].quotient, totalSupply.quotient), this.reserve1.quotient)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return CurrencyAmount.fromRawAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: CurrencyAmount<Token>,\n    liquidity: CurrencyAmount<Token>,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): CurrencyAmount<Token> {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.currency.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.currency.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.quotient, totalSupply.quotient), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: CurrencyAmount<Token>\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = JSBI.BigInt(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.quotient, this.reserve1.quotient))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.quotient, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(CurrencyAmount.fromRawAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return CurrencyAmount.fromRawAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.quotient, this.reserveOf(token).quotient), totalSupplyAdjusted.quotient)\n    )\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nimport { Pair } from './pair'\n\nexport class Route<TInput extends Currency, TOutput extends Currency> {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: TInput\n  public readonly output: TOutput\n\n  public constructor(pairs: Pair[], input: TInput, output: TOutput) {\n    invariant(pairs.length > 0, 'PAIRS')\n    const chainId: number = pairs[0].chainId\n    invariant(\n      pairs.every(pair => pair.chainId === chainId),\n      'CHAIN_IDS'\n    )\n\n    const wrappedInput = input.wrapped\n    invariant(pairs[0].involvesToken(wrappedInput), 'INPUT')\n    invariant(typeof output === 'undefined' || pairs[pairs.length - 1].involvesToken(output.wrapped), 'OUTPUT')\n\n    const path: Token[] = [wrappedInput]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.input = input\n    this.output = output\n  }\n\n  private _midPrice: Price<TInput, TOutput> | null = null\n\n  public get midPrice(): Price<TInput, TOutput> {\n    if (this._midPrice !== null) return this._midPrice\n    const prices: Price<Currency, Currency>[] = []\n    for (const [i, pair] of this.pairs.entries()) {\n      prices.push(\n        this.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.quotient, pair.reserve1.quotient)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.quotient, pair.reserve0.quotient)\n      )\n    }\n    const reduced = prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n    return (this._midPrice = new Price(this.input, this.output, reduced.denominator, reduced.numerator))\n  }\n\n  public get chainId(): number {\n    return this.pairs[0].chainId\n  }\n}\n","import {\n  computePriceImpact,\n  Token,\n  Currency,\n  CurrencyAmount,\n  Fraction,\n  Percent,\n  Price,\n  sortedInsert,\n  TradeType\n} from '@uniswap/sdk-core'\nimport { ONE, ZERO } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Pair } from './pair'\nimport { Route } from './route'\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput<TInput extends Currency, TOutput extends Currency> {\n  readonly inputAmount: CurrencyAmount<TInput>\n  readonly outputAmount: CurrencyAmount<TOutput>\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator<TInput extends Currency, TOutput extends Currency>(\n  a: InputOutput<TInput, TOutput>,\n  b: InputOutput<TInput, TOutput>\n): number {\n  // must have same input and output token for comparison\n  invariant(a.inputAmount.currency.equals(b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(a.outputAmount.currency.equals(b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n  a: Trade<TInput, TOutput, TTradeType>,\n  b: Trade<TInput, TOutput, TTradeType>\n) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through and the input/output currencies.\n   */\n  public readonly route: Route<TInput, TOutput>\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TTradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount<TInput>\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount<TOutput>\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price<TInput, TOutput>\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountIn: CurrencyAmount<TInput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT> {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut<TInput extends Currency, TOutput extends Currency>(\n    route: Route<TInput, TOutput>,\n    amountOut: CurrencyAmount<TOutput>\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT> {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(\n    route: Route<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ) {\n    this.route = route\n    this.tradeType = tradeType\n\n    const tokenAmounts: CurrencyAmount<Token>[] = new Array(route.path.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(amount.currency.equals(route.input), 'INPUT')\n      tokenAmounts[0] = amount.wrapped\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount] = pair.getOutputAmount(tokenAmounts[i])\n        tokenAmounts[i + 1] = outputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(route.input, amount.numerator, amount.denominator)\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(\n        route.output,\n        tokenAmounts[tokenAmounts.length - 1].numerator,\n        tokenAmounts[tokenAmounts.length - 1].denominator\n      )\n    } else {\n      invariant(amount.currency.equals(route.output), 'OUTPUT')\n      tokenAmounts[tokenAmounts.length - 1] = amount.wrapped\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount] = pair.getInputAmount(tokenAmounts[i])\n        tokenAmounts[i - 1] = inputAmount\n      }\n      this.inputAmount = CurrencyAmount.fromFractionalAmount(\n        route.input,\n        tokenAmounts[0].numerator,\n        tokenAmounts[0].denominator\n      )\n      this.outputAmount = CurrencyAmount.fromFractionalAmount(route.output, amount.numerator, amount.denominator)\n    }\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.quotient,\n      this.outputAmount.quotient\n    )\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.quotient).quotient\n      return CurrencyAmount.fromRawAmount(this.outputAmount.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.quotient)\n        .quotient\n      return CurrencyAmount.fromRawAmount(this.inputAmount.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param nextAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount<TInput>,\n    currencyOut: TOutput,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountIn: CurrencyAmount<Currency> = currencyAmountIn,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_INPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountIn === nextAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountIn = nextAmountIn.wrapped\n    const tokenOut = currencyOut.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.currency) && !pair.token1.equals(amountIn.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: CurrencyAmount<Token>\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.currency.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], currencyAmountIn.currency, currencyOut),\n            currencyAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          currencyAmountIn,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          amountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param nextAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param currencyAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut<TInput extends Currency, TOutput extends Currency>(\n    pairs: Pair[],\n    currencyIn: TInput,\n    currencyAmountOut: CurrencyAmount<TOutput>,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    nextAmountOut: CurrencyAmount<Currency> = currencyAmountOut,\n    bestTrades: Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] = []\n  ): Trade<TInput, TOutput, TradeType.EXACT_OUTPUT>[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(currencyAmountOut === nextAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n\n    const amountOut = nextAmountOut.wrapped\n    const tokenIn = currencyIn.wrapped\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.currency) && !pair.token1.equals(amountOut.currency)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: CurrencyAmount<Token>\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.currency.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, currencyAmountOut.currency),\n            currencyAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          currencyAmountOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          amountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import { Token, Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { Trade } from 'entities'\nimport invariant from 'tiny-invariant'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount<Currency>) {\n  return `0x${currencyAmount.quotient.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(\n    trade: Trade<Currency, Currency, TradeType>,\n    options: TradeOptions | TradeOptionsDeadline\n  ): SwapParameters {\n    const etherIn = trade.inputAmount.currency.isNative\n    const etherOut = trade.outputAmount.currency.isNative\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map((token: Token) => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}