{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Eth = void 0;\n\nvar constants_1 = require(\"../eth/constants\");\n\nvar methods_1 = require(\"../communication/methods\");\n\nvar inputFormatters = {\n  defaultBlockParam: function defaultBlockParam() {\n    var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'latest';\n    return arg;\n  },\n  returnFullTxObjectParam: function returnFullTxObjectParam() {\n    var arg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    return arg;\n  },\n  blockNumberToHex: function blockNumberToHex(arg) {\n    return Number.isInteger(arg) ? \"0x\".concat(arg.toString(16)) : arg;\n  }\n};\n\nvar Eth = /*#__PURE__*/function () {\n  function Eth(communicator) {\n    _classCallCheck(this, Eth);\n\n    this.communicator = communicator;\n    this.call = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_call,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getBalance = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBalance,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getCode = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getCode,\n      formatters: [null, inputFormatters.defaultBlockParam]\n    });\n    this.getStorageAt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getStorageAt,\n      formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam]\n    });\n    this.getPastLogs = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getLogs\n    });\n    this.getBlockByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByHash,\n      formatters: [null, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getBlockByNumber = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n      formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam]\n    });\n    this.getTransactionByHash = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionByHash\n    });\n    this.getTransactionReceipt = this.buildRequest({\n      call: constants_1.RPC_CALLS.eth_getTransactionReceipt\n    });\n  }\n\n  _createClass(Eth, [{\n    key: \"buildRequest\",\n    value: function buildRequest(_ref) {\n      var _this = this;\n\n      var call = _ref.call,\n          formatters = _ref.formatters;\n      return /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n          var payload, response;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (formatters && Array.isArray(params)) {\n                    formatters.forEach(function (formatter, i) {\n                      if (formatter) {\n                        params[i] = formatter(params[i]);\n                      }\n                    });\n                  }\n\n                  payload = {\n                    call: call,\n                    params: params\n                  };\n                  _context.next = 4;\n                  return _this.communicator.send(methods_1.Methods.rpcCall, payload);\n\n                case 4:\n                  response = _context.sent;\n                  return _context.abrupt(\"return\", response.data);\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n\n        return function (_x) {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n    }\n  }]);\n\n  return Eth;\n}();\n\nexports.Eth = Eth;","map":{"version":3,"sources":["../../../src/eth/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Eth = void 0;\nconst constants_1 = require(\"../eth/constants\");\nconst methods_1 = require(\"../communication/methods\");\nconst inputFormatters = {\n    defaultBlockParam: (arg = 'latest') => arg,\n    returnFullTxObjectParam: (arg = false) => arg,\n    blockNumberToHex: (arg) => Number.isInteger(arg) ? `0x${arg.toString(16)}` : arg,\n};\nclass Eth {\n    constructor(communicator) {\n        this.communicator = communicator;\n        this.call = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_call,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getBalance = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBalance,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getCode = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getCode,\n            formatters: [null, inputFormatters.defaultBlockParam],\n        });\n        this.getStorageAt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getStorageAt,\n            formatters: [null, inputFormatters.blockNumberToHex, inputFormatters.defaultBlockParam],\n        });\n        this.getPastLogs = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getLogs,\n        });\n        this.getBlockByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByHash,\n            formatters: [null, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getBlockByNumber = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getBlockByNumber,\n            formatters: [inputFormatters.blockNumberToHex, inputFormatters.returnFullTxObjectParam],\n        });\n        this.getTransactionByHash = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionByHash,\n        });\n        this.getTransactionReceipt = this.buildRequest({\n            call: constants_1.RPC_CALLS.eth_getTransactionReceipt,\n        });\n    }\n    buildRequest({ call, formatters }) {\n        return async (params) => {\n            if (formatters && Array.isArray(params)) {\n                formatters.forEach((formatter, i) => {\n                    if (formatter) {\n                        params[i] = formatter(params[i]);\n                    }\n                });\n            }\n            const payload = {\n                call,\n                params,\n            };\n            const response = await this.communicator.send(methods_1.Methods.rpcCall, payload);\n            return response.data;\n        };\n    }\n}\nexports.Eth = Eth;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}