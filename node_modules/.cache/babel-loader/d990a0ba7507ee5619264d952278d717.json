{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";var _objectSpread2,_SupportedChainId$MAI,_COMMON_BASES;// a list of tokens by chain\nimport{Token}from'@uniswap/sdk-core';import{SupportedChainId}from'./chains';import{AMPL,DAI,ExtendedEther,FEI,FRAX,FXS,renBTC,TRIBE,USDC,USDT,WBTC,ETH2X_FLI,WETH9_EXTENDED,DAI_OPTIMISM,USDT_OPTIMISM,WBTC_OPTIMISM}from'./tokens';var WETH_ONLY=Object.fromEntries(Object.entries(WETH9_EXTENDED).map(function(_ref){var _ref2=_slicedToArray(_ref,2),key=_ref2[0],value=_ref2[1];return[key,[value]];}));// used to construct intermediary pairs for trading\nexport var BASES_TO_CHECK_TRADES_AGAINST=_objectSpread(_objectSpread({},WETH_ONLY),{},(_objectSpread2={},_defineProperty(_objectSpread2,SupportedChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[SupportedChainId.MAINNET]),[DAI,USDC,USDT,WBTC])),_defineProperty(_objectSpread2,SupportedChainId.OPTIMISM,[].concat(_toConsumableArray(WETH_ONLY[SupportedChainId.OPTIMISM]),[DAI_OPTIMISM,USDT_OPTIMISM,WBTC_OPTIMISM])),_objectSpread2));export var ADDITIONAL_BASES=_defineProperty({},SupportedChainId.MAINNET,(_SupportedChainId$MAI={'0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0':[ETH2X_FLI]},_defineProperty(_SupportedChainId$MAI,FEI.address,[TRIBE]),_defineProperty(_SupportedChainId$MAI,TRIBE.address,[FEI]),_defineProperty(_SupportedChainId$MAI,FRAX.address,[FXS]),_defineProperty(_SupportedChainId$MAI,FXS.address,[FRAX]),_defineProperty(_SupportedChainId$MAI,WBTC.address,[renBTC]),_defineProperty(_SupportedChainId$MAI,renBTC.address,[WBTC]),_SupportedChainId$MAI));/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */export var CUSTOM_BASES=_defineProperty({},SupportedChainId.MAINNET,_defineProperty({},AMPL.address,[DAI,WETH9_EXTENDED[SupportedChainId.MAINNET]]));/**\n * Shows up in the currency select for swap and add liquidity\n */export var COMMON_BASES=(_COMMON_BASES={},_defineProperty(_COMMON_BASES,SupportedChainId.MAINNET,[ExtendedEther.onChain(SupportedChainId.MAINNET),DAI,USDC,USDT,WBTC,WETH9_EXTENDED[SupportedChainId.MAINNET]]),_defineProperty(_COMMON_BASES,SupportedChainId.ROPSTEN,[ExtendedEther.onChain(SupportedChainId.ROPSTEN),WETH9_EXTENDED[SupportedChainId.ROPSTEN]]),_defineProperty(_COMMON_BASES,SupportedChainId.RINKEBY,[ExtendedEther.onChain(SupportedChainId.RINKEBY),WETH9_EXTENDED[SupportedChainId.RINKEBY]]),_defineProperty(_COMMON_BASES,SupportedChainId.GOERLI,[ExtendedEther.onChain(SupportedChainId.GOERLI),WETH9_EXTENDED[SupportedChainId.GOERLI]]),_defineProperty(_COMMON_BASES,SupportedChainId.KOVAN,[ExtendedEther.onChain(SupportedChainId.KOVAN),WETH9_EXTENDED[SupportedChainId.KOVAN]]),_defineProperty(_COMMON_BASES,SupportedChainId.ARBITRUM_ONE,[ExtendedEther.onChain(SupportedChainId.ARBITRUM_ONE),WETH9_EXTENDED[SupportedChainId.ARBITRUM_ONE]]),_defineProperty(_COMMON_BASES,SupportedChainId.ARBITRUM_RINKEBY,[ExtendedEther.onChain(SupportedChainId.ARBITRUM_RINKEBY),WETH9_EXTENDED[SupportedChainId.ARBITRUM_RINKEBY]]),_defineProperty(_COMMON_BASES,SupportedChainId.OPTIMISM,[ExtendedEther.onChain(SupportedChainId.OPTIMISM)]),_defineProperty(_COMMON_BASES,SupportedChainId.OPTIMISTIC_KOVAN,[ExtendedEther.onChain(SupportedChainId.OPTIMISTIC_KOVAN)]),_COMMON_BASES);// used to construct the list of all pairs we consider by default in the frontend\nexport var BASES_TO_TRACK_LIQUIDITY_FOR=_objectSpread(_objectSpread({},WETH_ONLY),{},_defineProperty({},SupportedChainId.MAINNET,[].concat(_toConsumableArray(WETH_ONLY[SupportedChainId.MAINNET]),[DAI,USDC,USDT,WBTC])));export var PINNED_PAIRS=_defineProperty({},SupportedChainId.MAINNET,[[new Token(SupportedChainId.MAINNET,'0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643',8,'cDAI','Compound Dai'),new Token(SupportedChainId.MAINNET,'0x39AA39c021dfbaE8faC545936693aC917d5E7563',8,'cUSDC','Compound USD Coin')],[USDC,USDT],[DAI,USDT]]);","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/constants/routing.ts"],"names":["Token","SupportedChainId","AMPL","DAI","ExtendedEther","FEI","FRAX","FXS","renBTC","TRIBE","USDC","USDT","WBTC","ETH2X_FLI","WETH9_EXTENDED","DAI_OPTIMISM","USDT_OPTIMISM","WBTC_OPTIMISM","WETH_ONLY","Object","fromEntries","entries","map","key","value","BASES_TO_CHECK_TRADES_AGAINST","MAINNET","OPTIMISM","ADDITIONAL_BASES","address","CUSTOM_BASES","COMMON_BASES","onChain","ROPSTEN","RINKEBY","GOERLI","KOVAN","ARBITRUM_ONE","ARBITRUM_RINKEBY","OPTIMISTIC_KOVAN","BASES_TO_TRACK_LIQUIDITY_FOR","PINNED_PAIRS"],"mappings":"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","sourcesContent":["// a list of tokens by chain\nimport { Currency, Token } from '@uniswap/sdk-core'\nimport { SupportedChainId } from './chains'\nimport {\n  AMPL,\n  DAI,\n  ExtendedEther,\n  FEI,\n  FRAX,\n  FXS,\n  renBTC,\n  TRIBE,\n  USDC,\n  USDT,\n  WBTC,\n  ETH2X_FLI,\n  WETH9_EXTENDED,\n  DAI_OPTIMISM,\n  USDT_OPTIMISM,\n  WBTC_OPTIMISM,\n} from './tokens'\n\ntype ChainTokenList = {\n  readonly [chainId: number]: Token[]\n}\n\ntype ChainCurrencyList = {\n  readonly [chainId: number]: Currency[]\n}\n\nconst WETH_ONLY: ChainTokenList = Object.fromEntries(\n  Object.entries(WETH9_EXTENDED).map(([key, value]) => [key, [value]])\n)\n\n// used to construct intermediary pairs for trading\nexport const BASES_TO_CHECK_TRADES_AGAINST: ChainTokenList = {\n  ...WETH_ONLY,\n  [SupportedChainId.MAINNET]: [...WETH_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n  [SupportedChainId.OPTIMISM]: [...WETH_ONLY[SupportedChainId.OPTIMISM], DAI_OPTIMISM, USDT_OPTIMISM, WBTC_OPTIMISM],\n}\nexport const ADDITIONAL_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    '0xF16E4d813f4DcfDe4c5b44f305c908742De84eF0': [ETH2X_FLI],\n    [FEI.address]: [TRIBE],\n    [TRIBE.address]: [FEI],\n    [FRAX.address]: [FXS],\n    [FXS.address]: [FRAX],\n    [WBTC.address]: [renBTC],\n    [renBTC.address]: [WBTC],\n  },\n}\n/**\n * Some tokens can only be swapped via certain pairs, so we override the list of bases that are considered for these\n * tokens.\n */\nexport const CUSTOM_BASES: { [chainId: number]: { [tokenAddress: string]: Token[] } } = {\n  [SupportedChainId.MAINNET]: {\n    [AMPL.address]: [DAI, WETH9_EXTENDED[SupportedChainId.MAINNET]],\n  },\n}\n\n/**\n * Shows up in the currency select for swap and add liquidity\n */\nexport const COMMON_BASES: ChainCurrencyList = {\n  [SupportedChainId.MAINNET]: [\n    ExtendedEther.onChain(SupportedChainId.MAINNET),\n    DAI,\n    USDC,\n    USDT,\n    WBTC,\n    WETH9_EXTENDED[SupportedChainId.MAINNET],\n  ],\n  [SupportedChainId.ROPSTEN]: [\n    ExtendedEther.onChain(SupportedChainId.ROPSTEN),\n    WETH9_EXTENDED[SupportedChainId.ROPSTEN],\n  ],\n  [SupportedChainId.RINKEBY]: [\n    ExtendedEther.onChain(SupportedChainId.RINKEBY),\n    WETH9_EXTENDED[SupportedChainId.RINKEBY],\n  ],\n  [SupportedChainId.GOERLI]: [ExtendedEther.onChain(SupportedChainId.GOERLI), WETH9_EXTENDED[SupportedChainId.GOERLI]],\n  [SupportedChainId.KOVAN]: [ExtendedEther.onChain(SupportedChainId.KOVAN), WETH9_EXTENDED[SupportedChainId.KOVAN]],\n  [SupportedChainId.ARBITRUM_ONE]: [\n    ExtendedEther.onChain(SupportedChainId.ARBITRUM_ONE),\n    WETH9_EXTENDED[SupportedChainId.ARBITRUM_ONE],\n  ],\n  [SupportedChainId.ARBITRUM_RINKEBY]: [\n    ExtendedEther.onChain(SupportedChainId.ARBITRUM_RINKEBY),\n    WETH9_EXTENDED[SupportedChainId.ARBITRUM_RINKEBY],\n  ],\n  [SupportedChainId.OPTIMISM]: [ExtendedEther.onChain(SupportedChainId.OPTIMISM)],\n  [SupportedChainId.OPTIMISTIC_KOVAN]: [ExtendedEther.onChain(SupportedChainId.OPTIMISTIC_KOVAN)],\n}\n\n// used to construct the list of all pairs we consider by default in the frontend\nexport const BASES_TO_TRACK_LIQUIDITY_FOR: ChainTokenList = {\n  ...WETH_ONLY,\n  [SupportedChainId.MAINNET]: [...WETH_ONLY[SupportedChainId.MAINNET], DAI, USDC, USDT, WBTC],\n}\nexport const PINNED_PAIRS: { readonly [chainId: number]: [Token, Token][] } = {\n  [SupportedChainId.MAINNET]: [\n    [\n      new Token(SupportedChainId.MAINNET, '0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643', 8, 'cDAI', 'Compound Dai'),\n      new Token(\n        SupportedChainId.MAINNET,\n        '0x39AA39c021dfbaE8faC545936693aC917d5E7563',\n        8,\n        'cUSDC',\n        'Compound USD Coin'\n      ),\n    ],\n    [USDC, USDT],\n    [DAI, USDT],\n  ],\n}\n"]},"metadata":{},"sourceType":"module"}