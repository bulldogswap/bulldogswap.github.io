{"ast":null,"code":"import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useSafeAppConnection}from'@gnosis.pm/safe-apps-web3-react';import{useWeb3React as useWeb3ReactCore}from'@web3-react/core';import{useEffect,useState}from'react';import{isMobile}from'react-device-detect';import{gnosisSafe,injected}from'../connectors';import{NetworkContextName}from'../constants/misc';export function useActiveWeb3React(){var context=useWeb3ReactCore();var contextNetwork=useWeb3ReactCore(NetworkContextName);return context.active?context:contextNetwork;}export function useEagerConnect(){var _useWeb3ReactCore=useWeb3ReactCore(),activate=_useWeb3ReactCore.activate,active=_useWeb3ReactCore.active;// specifically using useWeb3ReactCore because of what this hook does\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),tried=_useState2[0],setTried=_useState2[1];var triedToConnectToSafe=useSafeAppConnection(gnosisSafe);useEffect(function(){if(triedToConnectToSafe&&!active){injected.isAuthorized().then(function(isAuthorized){if(isAuthorized){activate(injected,undefined,true).catch(function(){setTried(true);});}else{if(isMobile&&window.ethereum){activate(injected,undefined,true).catch(function(){setTried(true);});}else{setTried(true);}}});}},[activate,active,triedToConnectToSafe]);// intentionally only running on mount (make sure it's only mounted once :))\n// if the connection worked, wait until we get confirmation of that to flip the flag\nuseEffect(function(){if(active&&triedToConnectToSafe){setTried(true);}},[active,triedToConnectToSafe]);return tried;}/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */export function useInactiveListener(){var suppress=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var _useWeb3ReactCore2=useWeb3ReactCore(),active=_useWeb3ReactCore2.active,error=_useWeb3ReactCore2.error,activate=_useWeb3ReactCore2.activate;// specifically using useWeb3React because of what this hook does\nuseEffect(function(){var _window=window,ethereum=_window.ethereum;if(ethereum&&ethereum.on&&!active&&!error&&!suppress){var handleChainChanged=function handleChainChanged(){// eat errors\nactivate(injected,undefined,true).catch(function(error){console.error('Failed to activate after chain changed',error);});};var handleAccountsChanged=function handleAccountsChanged(accounts){if(accounts.length>0){// eat errors\nactivate(injected,undefined,true).catch(function(error){console.error('Failed to activate after accounts changed',error);});}};ethereum.on('chainChanged',handleChainChanged);ethereum.on('accountsChanged',handleAccountsChanged);return function(){if(ethereum.removeListener){ethereum.removeListener('chainChanged',handleChainChanged);ethereum.removeListener('accountsChanged',handleAccountsChanged);}};}return undefined;},[active,error,suppress,activate]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/web3.ts"],"names":["useSafeAppConnection","useWeb3React","useWeb3ReactCore","useEffect","useState","isMobile","gnosisSafe","injected","NetworkContextName","useActiveWeb3React","context","contextNetwork","active","useEagerConnect","activate","tried","setTried","triedToConnectToSafe","isAuthorized","then","undefined","catch","window","ethereum","useInactiveListener","suppress","error","on","handleChainChanged","console","handleAccountsChanged","accounts","length","removeListener"],"mappings":"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","sourcesContent":["import { Web3Provider } from '@ethersproject/providers'\nimport { useSafeAppConnection } from '@gnosis.pm/safe-apps-web3-react'\nimport { useWeb3React as useWeb3ReactCore } from '@web3-react/core'\nimport { Web3ReactContextInterface } from '@web3-react/core/dist/types'\nimport { useEffect, useState } from 'react'\nimport { isMobile } from 'react-device-detect'\nimport { gnosisSafe, injected } from '../connectors'\nimport { NetworkContextName } from '../constants/misc'\n\nexport function useActiveWeb3React(): Web3ReactContextInterface<Web3Provider> {\n  const context = useWeb3ReactCore<Web3Provider>()\n  const contextNetwork = useWeb3ReactCore<Web3Provider>(NetworkContextName)\n  return context.active ? context : contextNetwork\n}\n\nexport function useEagerConnect() {\n  const { activate, active } = useWeb3ReactCore() // specifically using useWeb3ReactCore because of what this hook does\n  const [tried, setTried] = useState(false)\n\n  const triedToConnectToSafe = useSafeAppConnection(gnosisSafe)\n\n  useEffect(() => {\n    if (triedToConnectToSafe && !active) {\n      injected.isAuthorized().then((isAuthorized) => {\n        if (isAuthorized) {\n          activate(injected, undefined, true).catch(() => {\n            setTried(true)\n          })\n        } else {\n          if (isMobile && window.ethereum) {\n            activate(injected, undefined, true).catch(() => {\n              setTried(true)\n            })\n          } else {\n            setTried(true)\n          }\n        }\n      })\n    }\n  }, [activate, active, triedToConnectToSafe]) // intentionally only running on mount (make sure it's only mounted once :))\n\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n  useEffect(() => {\n    if (active && triedToConnectToSafe) {\n      setTried(true)\n    }\n  }, [active, triedToConnectToSafe])\n\n  return tried\n}\n\n/**\n * Use for network and injected - logs user in\n * and out after checking what network theyre on\n */\nexport function useInactiveListener(suppress = false) {\n  const { active, error, activate } = useWeb3ReactCore() // specifically using useWeb3React because of what this hook does\n\n  useEffect(() => {\n    const { ethereum } = window\n\n    if (ethereum && ethereum.on && !active && !error && !suppress) {\n      const handleChainChanged = () => {\n        // eat errors\n        activate(injected, undefined, true).catch((error) => {\n          console.error('Failed to activate after chain changed', error)\n        })\n      }\n\n      const handleAccountsChanged = (accounts: string[]) => {\n        if (accounts.length > 0) {\n          // eat errors\n          activate(injected, undefined, true).catch((error) => {\n            console.error('Failed to activate after accounts changed', error)\n          })\n        }\n      }\n\n      ethereum.on('chainChanged', handleChainChanged)\n      ethereum.on('accountsChanged', handleAccountsChanged)\n\n      return () => {\n        if (ethereum.removeListener) {\n          ethereum.removeListener('chainChanged', handleChainChanged)\n          ethereum.removeListener('accountsChanged', handleAccountsChanged)\n        }\n      }\n    }\n    return undefined\n  }, [active, error, suppress, activate])\n}\n"]},"metadata":{},"sourceType":"module"}