{"ast":null,"code":"import{createApi,fetchBaseQuery}from'@reduxjs/toolkit/query/react';import qs from'qs';export var routingApi=createApi({baseQuery:fetchBaseQuery({baseUrl:'https://api.uniswap.org/v1/'}),endpoints:function endpoints(build){return{getQuote:build.query({query:function query(args){return\"quote?\".concat(qs.stringify(args));}})};}});var useGetQuoteQuery=routingApi.useGetQuoteQuery;export{useGetQuoteQuery};","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/routing/slice.ts"],"names":["createApi","fetchBaseQuery","qs","routingApi","baseQuery","baseUrl","endpoints","build","getQuote","query","args","stringify","useGetQuoteQuery"],"mappings":"AAAA,OAASA,SAAT,CAAoBC,cAApB,KAA0C,8BAA1C,CAEA,MAAOC,CAAAA,EAAP,KAAe,IAAf,CA2BA,MAAO,IAAMC,CAAAA,UAAU,CAAGH,SAAS,CAAC,CAClCI,SAAS,CAAEH,cAAc,CAAC,CACxBI,OAAO,CAAE,6BADe,CAAD,CADS,CAIlCC,SAAS,CAAE,mBAACC,KAAD,QAAY,CACrBC,QAAQ,CAAED,KAAK,CAACE,KAAN,CAaR,CACAA,KAAK,CAAE,eAACC,IAAD,wBAAmBR,EAAE,CAACS,SAAH,CAAaD,IAAb,CAAnB,GADP,CAbQ,CADW,CAAZ,EAJuB,CAAD,CAA5B,CAwBA,GAAQE,CAAAA,gBAAR,CAA6BT,UAA7B,CAAQS,gBAAR,C","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'\nimport { SupportedChainId } from 'constants/chains'\nimport qs from 'qs'\n\nexport interface GetQuoteResult {\n  blockNumber: string\n  gasPriceWei: string\n  gasUseEstimate: string\n  gasUseEstimateQuote: string\n  gasUseEstimateQuoteDecimals: string\n  gasUseEstimateUSD: string\n  methodParameters: { calldata: string; value: string }\n  quote: string\n  quoteDecimals: string\n  quoteGasAdjusted: string\n  quoteGasAdjustedDecimals: string\n  quoteId: string\n  routeEdges: {\n    fee: string\n    id: string\n    inId: string\n    outId: string\n    percent: number\n    type: string\n  }[]\n  routeNodes: { chainId: number; id: string; symbol: string; type: string }[]\n  routeString: string\n}\n\nexport const routingApi = createApi({\n  baseQuery: fetchBaseQuery({\n    baseUrl: 'https://api.uniswap.org/v1/',\n  }),\n  endpoints: (build) => ({\n    getQuote: build.query<\n      GetQuoteResult,\n      {\n        tokenInAddress: string\n        tokenInChainId: SupportedChainId\n        tokenOutAddress: string\n        tokenOutChainId: SupportedChainId\n        amount: string\n        type: 'exactIn' | 'exactOut'\n        recipient?: string\n        slippageTolerance?: string\n        deadline?: string\n      }\n    >({\n      query: (args) => `quote?${qs.stringify(args)}`,\n    }),\n  }),\n})\n\nexport const { useGetQuoteQuery } = routingApi\n"]},"metadata":{},"sourceType":"module"}