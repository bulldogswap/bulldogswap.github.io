{"ast":null,"code":"import{CurrencyAmount}from'@uniswap/sdk-core';import{useMemo}from'react';import{useSingleCallResult}from'../state/multicall/hooks';import{useTokenContract}from'./useContract';export function useTokenAllowance(token,owner,spender){var contract=useTokenContract(token===null||token===void 0?void 0:token.address,false);var inputs=useMemo(function(){return[owner,spender];},[owner,spender]);var allowance=useSingleCallResult(contract,'allowance',inputs).result;return useMemo(function(){return token&&allowance?CurrencyAmount.fromRawAmount(token,allowance.toString()):undefined;},[token,allowance]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useTokenAllowance.ts"],"names":["CurrencyAmount","useMemo","useSingleCallResult","useTokenContract","useTokenAllowance","token","owner","spender","contract","address","inputs","allowance","result","fromRawAmount","toString","undefined"],"mappings":"AAAA,OAAgBA,cAAhB,KAAsC,mBAAtC,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA,OAASC,mBAAT,KAAoC,0BAApC,CACA,OAASC,gBAAT,KAAiC,eAAjC,CAEA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,KAA3B,CAA0CC,KAA1C,CAA0DC,OAA1D,CAA+G,CACpH,GAAMC,CAAAA,QAAQ,CAAGL,gBAAgB,CAACE,KAAD,SAACA,KAAD,iBAACA,KAAK,CAAEI,OAAR,CAAiB,KAAjB,CAAjC,CAEA,GAAMC,CAAAA,MAAM,CAAGT,OAAO,CAAC,iBAAM,CAACK,KAAD,CAAQC,OAAR,CAAN,EAAD,CAAyB,CAACD,KAAD,CAAQC,OAAR,CAAzB,CAAtB,CACA,GAAMI,CAAAA,SAAS,CAAGT,mBAAmB,CAACM,QAAD,CAAW,WAAX,CAAwBE,MAAxB,CAAnB,CAAmDE,MAArE,CAEA,MAAOX,CAAAA,OAAO,CACZ,iBAAOI,CAAAA,KAAK,EAAIM,SAAT,CAAqBX,cAAc,CAACa,aAAf,CAA6BR,KAA7B,CAAoCM,SAAS,CAACG,QAAV,EAApC,CAArB,CAAiFC,SAAxF,EADY,CAEZ,CAACV,KAAD,CAAQM,SAAR,CAFY,CAAd,CAID","sourcesContent":["import { Token, CurrencyAmount } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { useSingleCallResult } from '../state/multicall/hooks'\nimport { useTokenContract } from './useContract'\n\nexport function useTokenAllowance(token?: Token, owner?: string, spender?: string): CurrencyAmount<Token> | undefined {\n  const contract = useTokenContract(token?.address, false)\n\n  const inputs = useMemo(() => [owner, spender], [owner, spender])\n  const allowance = useSingleCallResult(contract, 'allowance', inputs).result\n\n  return useMemo(\n    () => (token && allowance ? CurrencyAmount.fromRawAmount(token, allowance.toString()) : undefined),\n    [token, allowance]\n  )\n}\n"]},"metadata":{},"sourceType":"module"}