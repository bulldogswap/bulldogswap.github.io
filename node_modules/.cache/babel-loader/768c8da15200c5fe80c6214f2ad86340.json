{"ast":null,"code":"/**\n * Converts a filter to the corresponding string key\n * @param filter the filter to convert\n */export function filterToKey(filter){var _filter$address,_filter$topics$map$jo,_filter$topics,_filter$topics$map;return\"\".concat((_filter$address=filter.address)!==null&&_filter$address!==void 0?_filter$address:'',\":\").concat((_filter$topics$map$jo=(_filter$topics=filter.topics)===null||_filter$topics===void 0?void 0:(_filter$topics$map=_filter$topics.map(function(topic){return topic?Array.isArray(topic)?topic.join(';'):topic:'\\0';}))===null||_filter$topics$map===void 0?void 0:_filter$topics$map.join('-'))!==null&&_filter$topics$map$jo!==void 0?_filter$topics$map$jo:'');}/**\n * Convert a filter key to the corresponding filter\n * @param key key to convert\n */export function keyToFilter(key){var pcs=key.split(':');var address=pcs[0];var topics=pcs[1].split('-').map(function(topic){var parts=topic.split(';');if(parts.length===1)return parts[0];return parts;});return{address:address.length===0?undefined:address,topics:topics};}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/logs/utils.ts"],"names":["filterToKey","filter","address","topics","map","topic","Array","isArray","join","keyToFilter","key","pcs","split","parts","length","undefined"],"mappings":"AAUA;AACA;AACA;AACA,GACA,MAAO,SAASA,CAAAA,WAAT,CAAqBC,MAArB,CAAkD,6EACvD,iCAAUA,MAAM,CAACC,OAAjB,mDAA4B,EAA5B,oDACED,MAAM,CAACE,MADT,6DACE,eAAeC,GAAf,CAAmB,SAACC,KAAD,QAAYA,CAAAA,KAAK,CAAIC,KAAK,CAACC,OAAN,CAAcF,KAAd,EAAuBA,KAAK,CAACG,IAAN,CAAW,GAAX,CAAvB,CAAyCH,KAA7C,CAAsD,IAAvE,EAAnB,CADF,6CACE,mBAAkGG,IAAlG,CAAuG,GAAvG,CADF,+DACiH,EADjH,EAGD,CAED;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,WAAT,CAAqBC,GAArB,CAA+C,CACpD,GAAMC,CAAAA,GAAG,CAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAZ,CACA,GAAMV,CAAAA,OAAO,CAAGS,GAAG,CAAC,CAAD,CAAnB,CACA,GAAMR,CAAAA,MAAM,CAAGQ,GAAG,CAAC,CAAD,CAAH,CAAOC,KAAP,CAAa,GAAb,EAAkBR,GAAlB,CAAsB,SAACC,KAAD,CAAW,CAC9C,GAAMQ,CAAAA,KAAK,CAAGR,KAAK,CAACO,KAAN,CAAY,GAAZ,CAAd,CACA,GAAIC,KAAK,CAACC,MAAN,GAAiB,CAArB,CAAwB,MAAOD,CAAAA,KAAK,CAAC,CAAD,CAAZ,CACxB,MAAOA,CAAAA,KAAP,CACD,CAJc,CAAf,CAMA,MAAO,CACLX,OAAO,CAAEA,OAAO,CAACY,MAAR,GAAmB,CAAnB,CAAuBC,SAAvB,CAAmCb,OADvC,CAELC,MAAM,CAANA,MAFK,CAAP,CAID","sourcesContent":["export interface EventFilter {\n  address?: string\n  topics?: Array<string | Array<string> | null>\n}\n\nexport interface Log {\n  topics: Array<string>\n  data: string\n}\n\n/**\n * Converts a filter to the corresponding string key\n * @param filter the filter to convert\n */\nexport function filterToKey(filter: EventFilter): string {\n  return `${filter.address ?? ''}:${\n    filter.topics?.map((topic) => (topic ? (Array.isArray(topic) ? topic.join(';') : topic) : '\\0'))?.join('-') ?? ''\n  }`\n}\n\n/**\n * Convert a filter key to the corresponding filter\n * @param key key to convert\n */\nexport function keyToFilter(key: string): EventFilter {\n  const pcs = key.split(':')\n  const address = pcs[0]\n  const topics = pcs[1].split('-').map((topic) => {\n    const parts = topic.split(';')\n    if (parts.length === 1) return parts[0]\n    return parts\n  })\n\n  return {\n    address: address.length === 0 ? undefined : address,\n    topics,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}