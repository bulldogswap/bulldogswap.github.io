{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _createForOfIteratorHelper from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import JSBI from'jsbi';import{CurrencyAmount}from'@uniswap/sdk-core';import{useEffect,useState}from'react';import{UNI}from'../../constants/tokens';import{useActiveWeb3React}from'../../hooks/web3';import{useMerkleDistributorContract}from'../../hooks/useContract';import{calculateGasMargin}from'../../utils/calculateGasMargin';import{useSingleCallResult}from'../multicall/hooks';import{isAddress}from'../../utils';import{useTransactionAdder}from'../transactions/hooks';var FETCH_CLAIM_MAPPING_PROMISE=null;function fetchClaimMapping(){var _FETCH_CLAIM_MAPPING_;return(_FETCH_CLAIM_MAPPING_=FETCH_CLAIM_MAPPING_PROMISE)!==null&&_FETCH_CLAIM_MAPPING_!==void 0?_FETCH_CLAIM_MAPPING_:FETCH_CLAIM_MAPPING_PROMISE=fetch(\"https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json\").then(function(res){return res.json();}).catch(function(error){console.error('Failed to get claims mapping',error);FETCH_CLAIM_MAPPING_PROMISE=null;});}var FETCH_CLAIM_FILE_PROMISES={};function fetchClaimFile(key){var _FETCH_CLAIM_FILE_PRO;return(_FETCH_CLAIM_FILE_PRO=FETCH_CLAIM_FILE_PROMISES[key])!==null&&_FETCH_CLAIM_FILE_PRO!==void 0?_FETCH_CLAIM_FILE_PRO:FETCH_CLAIM_FILE_PROMISES[key]=fetch(\"https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/\".concat(key,\".json\")).then(function(res){return res.json();}).catch(function(error){console.error(\"Failed to get claim file mapping for starting address \".concat(key),error);delete FETCH_CLAIM_FILE_PROMISES[key];});}var FETCH_CLAIM_PROMISES={};// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account){var _FETCH_CLAIM_PROMISES;var formatted=isAddress(account);if(!formatted)return Promise.reject(new Error('Invalid address'));return(_FETCH_CLAIM_PROMISES=FETCH_CLAIM_PROMISES[account])!==null&&_FETCH_CLAIM_PROMISES!==void 0?_FETCH_CLAIM_PROMISES:FETCH_CLAIM_PROMISES[account]=fetchClaimMapping().then(function(mapping){var sorted=Object.keys(mapping).sort(function(a,b){return a.toLowerCase()<b.toLowerCase()?-1:1;});var _iterator=_createForOfIteratorHelper(sorted),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var _startingAddress=_step.value;var lastAddress=mapping[_startingAddress];if(_startingAddress.toLowerCase()<=formatted.toLowerCase()){if(formatted.toLowerCase()<=lastAddress.toLowerCase()){return _startingAddress;}}else{throw new Error(\"Claim for \".concat(formatted,\" was not found in partial search\"));}}}catch(err){_iterator.e(err);}finally{_iterator.f();}throw new Error(\"Claim for \".concat(formatted,\" was not found after searching all mappings\"));}).then(fetchClaimFile).then(function(result){if(result[formatted])return result[formatted];throw new Error(\"Claim for \".concat(formatted,\" was not found in claim file!\"));}).catch(function(error){console.debug('Claim fetch failed',error);throw error;});}// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nexport function useUserClaimData(account){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var _useState=useState({}),_useState2=_slicedToArray(_useState,2),claimInfo=_useState2[0],setClaimInfo=_useState2[1];useEffect(function(){if(!account||chainId!==1)return;fetchClaim(account).then(function(accountClaimInfo){return setClaimInfo(function(claimInfo){return _objectSpread(_objectSpread({},claimInfo),{},_defineProperty({},account,accountClaimInfo));});}).catch(function(){setClaimInfo(function(claimInfo){return _objectSpread(_objectSpread({},claimInfo),{},_defineProperty({},account,null));});});},[account,chainId]);return account&&chainId===1?claimInfo[account]:null;}// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account){var _isClaimedResult$resu;var userClaimData=useUserClaimData(account);var distributorContract=useMerkleDistributorContract();var isClaimedResult=useSingleCallResult(distributorContract,'isClaimed',[userClaimData===null||userClaimData===void 0?void 0:userClaimData.index]);// user is in blob and contract marks as unclaimed\nreturn Boolean(userClaimData&&!isClaimedResult.loading&&((_isClaimedResult$resu=isClaimedResult.result)===null||_isClaimedResult$resu===void 0?void 0:_isClaimedResult$resu[0])===false);}export function useUserUnclaimedAmount(account){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var userClaimData=useUserClaimData(account);var canClaim=useUserHasAvailableClaim(account);var uni=chainId?UNI[chainId]:undefined;if(!uni)return undefined;if(!canClaim||!userClaimData){return CurrencyAmount.fromRawAmount(uni,JSBI.BigInt(0));}return CurrencyAmount.fromRawAmount(uni,JSBI.BigInt(userClaimData.amount));}export function useClaimCallback(account){// get claim data for this account\nvar _useActiveWeb3React3=useActiveWeb3React(),library=_useActiveWeb3React3.library,chainId=_useActiveWeb3React3.chainId;var claimData=useUserClaimData(account);// used for popup summary\nvar unclaimedAmount=useUserUnclaimedAmount(account);var addTransaction=useTransactionAdder();var distributorContract=useMerkleDistributorContract();var claimCallback=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _distributorContract$;var args;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(!claimData||!account||!library||!chainId||!distributorContract)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:args=[claimData.index,account,claimData.amount,claimData.proof];return _context.abrupt(\"return\",(_distributorContract$=distributorContract.estimateGas)['claim'].apply(_distributorContract$,args.concat([{}])).then(function(estimatedGasLimit){return distributorContract.claim.apply(distributorContract,args.concat([{value:null,gasLimit:calculateGasMargin(chainId,estimatedGasLimit)}])).then(function(response){addTransaction(response,{summary:\"Claimed \".concat(unclaimedAmount===null||unclaimedAmount===void 0?void 0:unclaimedAmount.toSignificant(4),\" UNI\"),claim:{recipient:account}});return response.hash;});}));case 4:case\"end\":return _context.stop();}}},_callee);}));return function claimCallback(){return _ref.apply(this,arguments);};}();return{claimCallback:claimCallback};}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/claim/hooks.ts"],"names":["JSBI","CurrencyAmount","useEffect","useState","UNI","useActiveWeb3React","useMerkleDistributorContract","calculateGasMargin","useSingleCallResult","isAddress","useTransactionAdder","FETCH_CLAIM_MAPPING_PROMISE","fetchClaimMapping","fetch","then","res","json","catch","error","console","FETCH_CLAIM_FILE_PROMISES","fetchClaimFile","key","FETCH_CLAIM_PROMISES","fetchClaim","account","formatted","Promise","reject","Error","mapping","sorted","Object","keys","sort","a","b","toLowerCase","startingAddress","lastAddress","result","debug","useUserClaimData","chainId","claimInfo","setClaimInfo","accountClaimInfo","useUserHasAvailableClaim","userClaimData","distributorContract","isClaimedResult","index","Boolean","loading","useUserUnclaimedAmount","canClaim","uni","undefined","fromRawAmount","BigInt","amount","useClaimCallback","library","claimData","unclaimedAmount","addTransaction","claimCallback","args","proof","estimateGas","estimatedGasLimit","claim","value","gasLimit","response","summary","toSignificant","recipient","hash"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { TransactionResponse } from '@ethersproject/providers'\nimport { useEffect, useState } from 'react'\nimport { UNI } from '../../constants/tokens'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useMerkleDistributorContract } from '../../hooks/useContract'\nimport { calculateGasMargin } from '../../utils/calculateGasMargin'\nimport { useSingleCallResult } from '../multicall/hooks'\nimport { isAddress } from '../../utils'\nimport { useTransactionAdder } from '../transactions/hooks'\n\ninterface UserClaimData {\n  index: number\n  amount: string\n  proof: string[]\n  flags?: {\n    isSOCKS: boolean\n    isLP: boolean\n    isUser: boolean\n  }\n}\n\ntype LastAddress = string\ntype ClaimAddressMapping = { [firstAddress: string]: LastAddress }\nlet FETCH_CLAIM_MAPPING_PROMISE: Promise<ClaimAddressMapping> | null = null\nfunction fetchClaimMapping(): Promise<ClaimAddressMapping> {\n  return (\n    FETCH_CLAIM_MAPPING_PROMISE ??\n    (FETCH_CLAIM_MAPPING_PROMISE = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/mapping.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error('Failed to get claims mapping', error)\n        FETCH_CLAIM_MAPPING_PROMISE = null\n      }))\n  )\n}\n\nconst FETCH_CLAIM_FILE_PROMISES: { [startingAddress: string]: Promise<{ [address: string]: UserClaimData }> } = {}\nfunction fetchClaimFile(key: string): Promise<{ [address: string]: UserClaimData }> {\n  return (\n    FETCH_CLAIM_FILE_PROMISES[key] ??\n    (FETCH_CLAIM_FILE_PROMISES[key] = fetch(\n      `https://raw.githubusercontent.com/Uniswap/mrkl-drop-data-chunks/final/chunks/${key}.json`\n    )\n      .then((res) => res.json())\n      .catch((error) => {\n        console.error(`Failed to get claim file mapping for starting address ${key}`, error)\n        delete FETCH_CLAIM_FILE_PROMISES[key]\n      }))\n  )\n}\n\nconst FETCH_CLAIM_PROMISES: { [key: string]: Promise<UserClaimData> } = {}\n// returns the claim for the given address, or null if not valid\nfunction fetchClaim(account: string): Promise<UserClaimData> {\n  const formatted = isAddress(account)\n  if (!formatted) return Promise.reject(new Error('Invalid address'))\n\n  return (\n    FETCH_CLAIM_PROMISES[account] ??\n    (FETCH_CLAIM_PROMISES[account] = fetchClaimMapping()\n      .then((mapping) => {\n        const sorted = Object.keys(mapping).sort((a, b) => (a.toLowerCase() < b.toLowerCase() ? -1 : 1))\n\n        for (const startingAddress of sorted) {\n          const lastAddress = mapping[startingAddress]\n          if (startingAddress.toLowerCase() <= formatted.toLowerCase()) {\n            if (formatted.toLowerCase() <= lastAddress.toLowerCase()) {\n              return startingAddress\n            }\n          } else {\n            throw new Error(`Claim for ${formatted} was not found in partial search`)\n          }\n        }\n        throw new Error(`Claim for ${formatted} was not found after searching all mappings`)\n      })\n      .then(fetchClaimFile)\n      .then((result) => {\n        if (result[formatted]) return result[formatted]\n        throw new Error(`Claim for ${formatted} was not found in claim file!`)\n      })\n      .catch((error) => {\n        console.debug('Claim fetch failed', error)\n        throw error\n      }))\n  )\n}\n\n// parse distributorContract blob and detect if user has claim data\n// null means we know it does not\nexport function useUserClaimData(account: string | null | undefined): UserClaimData | null {\n  const { chainId } = useActiveWeb3React()\n\n  const [claimInfo, setClaimInfo] = useState<{ [account: string]: UserClaimData | null }>({})\n\n  useEffect(() => {\n    if (!account || chainId !== 1) return\n\n    fetchClaim(account)\n      .then((accountClaimInfo) =>\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: accountClaimInfo,\n          }\n        })\n      )\n      .catch(() => {\n        setClaimInfo((claimInfo) => {\n          return {\n            ...claimInfo,\n            [account]: null,\n          }\n        })\n      })\n  }, [account, chainId])\n\n  return account && chainId === 1 ? claimInfo[account] : null\n}\n\n// check if user is in blob and has not yet claimed UNI\nexport function useUserHasAvailableClaim(account: string | null | undefined): boolean {\n  const userClaimData = useUserClaimData(account)\n  const distributorContract = useMerkleDistributorContract()\n  const isClaimedResult = useSingleCallResult(distributorContract, 'isClaimed', [userClaimData?.index])\n  // user is in blob and contract marks as unclaimed\n  return Boolean(userClaimData && !isClaimedResult.loading && isClaimedResult.result?.[0] === false)\n}\n\nexport function useUserUnclaimedAmount(account: string | null | undefined): CurrencyAmount<Token> | undefined {\n  const { chainId } = useActiveWeb3React()\n  const userClaimData = useUserClaimData(account)\n  const canClaim = useUserHasAvailableClaim(account)\n\n  const uni = chainId ? UNI[chainId] : undefined\n  if (!uni) return undefined\n  if (!canClaim || !userClaimData) {\n    return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(0))\n  }\n  return CurrencyAmount.fromRawAmount(uni, JSBI.BigInt(userClaimData.amount))\n}\n\nexport function useClaimCallback(account: string | null | undefined): {\n  claimCallback: () => Promise<string>\n} {\n  // get claim data for this account\n  const { library, chainId } = useActiveWeb3React()\n  const claimData = useUserClaimData(account)\n\n  // used for popup summary\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const addTransaction = useTransactionAdder()\n  const distributorContract = useMerkleDistributorContract()\n\n  const claimCallback = async function () {\n    if (!claimData || !account || !library || !chainId || !distributorContract) return\n\n    const args = [claimData.index, account, claimData.amount, claimData.proof]\n\n    return distributorContract.estimateGas['claim'](...args, {}).then((estimatedGasLimit) => {\n      return distributorContract\n        .claim(...args, { value: null, gasLimit: calculateGasMargin(chainId, estimatedGasLimit) })\n        .then((response: TransactionResponse) => {\n          addTransaction(response, {\n            summary: `Claimed ${unclaimedAmount?.toSignificant(4)} UNI`,\n            claim: { recipient: account },\n          })\n          return response.hash\n        })\n    })\n  }\n\n  return { claimCallback }\n}\n"]},"metadata":{},"sourceType":"module"}