{"ast":null,"code":"import{useMemo}from'react';import{useUnsupportedTokens}from'./Tokens';/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */export function useIsSwapUnsupported(currencyIn,currencyOut){var unsupportedTokens=useUnsupportedTokens();return useMemo(function(){// if unsupported list loaded & either token on list, mark as unsupported\nreturn Boolean(unsupportedTokens&&((currencyIn===null||currencyIn===void 0?void 0:currencyIn.isToken)&&unsupportedTokens[currencyIn.address]||(currencyOut===null||currencyOut===void 0?void 0:currencyOut.isToken)&&unsupportedTokens[currencyOut.address]));},[currencyIn,currencyOut,unsupportedTokens]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useIsSwapUnsupported.ts"],"names":["useMemo","useUnsupportedTokens","useIsSwapUnsupported","currencyIn","currencyOut","unsupportedTokens","Boolean","isToken","address"],"mappings":"AACA,OAASA,OAAT,KAAwB,OAAxB,CACA,OAASC,oBAAT,KAAqC,UAArC,CAEA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,UAA9B,CAAqDC,WAArD,CAAsF,CAC3F,GAAMC,CAAAA,iBAA+C,CAAGJ,oBAAoB,EAA5E,CAEA,MAAOD,CAAAA,OAAO,CAAC,UAAM,CACnB;AACA,MAAOM,CAAAA,OAAO,CACZD,iBAAiB,GACb,CAAAF,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAEI,OAAZ,GAAuBF,iBAAiB,CAACF,UAAU,CAACK,OAAZ,CAAzC,EACE,CAAAJ,WAAW,OAAX,EAAAA,WAAW,SAAX,QAAAA,WAAW,CAAEG,OAAb,GAAwBF,iBAAiB,CAACD,WAAW,CAACI,OAAb,CAF7B,CADL,CAAd,CAKD,CAPa,CAOX,CAACL,UAAD,CAAaC,WAAb,CAA0BC,iBAA1B,CAPW,CAAd,CAQD","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { useUnsupportedTokens } from './Tokens'\n\n/**\n * Returns true if the input currency or output currency cannot be traded in the interface\n * @param currencyIn the input currency to check\n * @param currencyOut the output currency to check\n */\nexport function useIsSwapUnsupported(currencyIn?: Currency, currencyOut?: Currency): boolean {\n  const unsupportedTokens: { [address: string]: Token } = useUnsupportedTokens()\n\n  return useMemo(() => {\n    // if unsupported list loaded & either token on list, mark as unsupported\n    return Boolean(\n      unsupportedTokens &&\n        ((currencyIn?.isToken && unsupportedTokens[currencyIn.address]) ||\n          (currencyOut?.isToken && unsupportedTokens[currencyOut.address]))\n    )\n  }, [currencyIn, currencyOut, unsupportedTokens])\n}\n"]},"metadata":{},"sourceType":"module"}