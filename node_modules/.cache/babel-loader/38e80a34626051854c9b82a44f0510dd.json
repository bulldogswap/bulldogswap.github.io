{"ast":null,"code":"import{Trans}from\"@lingui/react\";import{Trade as V2Trade}from'@uniswap/v2-sdk';import{Trade as V3Trade}from'@uniswap/v3-sdk';import{useCallback,useMemo}from'react';import TransactionConfirmationModal,{ConfirmationModalContent,TransactionErrorContent}from'../TransactionConfirmationModal';import SwapModalFooter from'./SwapModalFooter';import SwapModalHeader from'./SwapModalHeader';/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param args either a pair of V2 trades or a pair of V3 trades\n */import{jsx as _jsx}from\"react/jsx-runtime\";function tradeMeaningfullyDiffers(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var tradeA=args[0],tradeB=args[1];return tradeA.tradeType!==tradeB.tradeType||!tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency)||!tradeA.inputAmount.equalTo(tradeB.inputAmount)||!tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency)||!tradeA.outputAmount.equalTo(tradeB.outputAmount);}export default function ConfirmSwapModal(_ref){var _trade$inputAmount,_trade$inputAmount2,_trade$inputAmount2$c,_trade$outputAmount,_trade$outputAmount2,_trade$outputAmount2$;var trade=_ref.trade,originalTrade=_ref.originalTrade,onAcceptChanges=_ref.onAcceptChanges,allowedSlippage=_ref.allowedSlippage,onConfirm=_ref.onConfirm,onDismiss=_ref.onDismiss,recipient=_ref.recipient,swapErrorMessage=_ref.swapErrorMessage,isOpen=_ref.isOpen,attemptingTxn=_ref.attemptingTxn,txHash=_ref.txHash;var showAcceptChanges=useMemo(function(){return Boolean(trade instanceof V2Trade&&originalTrade instanceof V2Trade&&tradeMeaningfullyDiffers(trade,originalTrade)||trade instanceof V3Trade&&originalTrade instanceof V3Trade&&tradeMeaningfullyDiffers(trade,originalTrade));},[originalTrade,trade]);var modalHeader=useCallback(function(){return trade?/*#__PURE__*/_jsx(SwapModalHeader,{trade:trade,allowedSlippage:allowedSlippage,recipient:recipient,showAcceptChanges:showAcceptChanges,onAcceptChanges:onAcceptChanges}):null;},[allowedSlippage,onAcceptChanges,recipient,showAcceptChanges,trade]);var modalBottom=useCallback(function(){return trade?/*#__PURE__*/_jsx(SwapModalFooter,{onConfirm:onConfirm,trade:trade,disabledConfirm:showAcceptChanges,swapErrorMessage:swapErrorMessage}):null;},[onConfirm,showAcceptChanges,swapErrorMessage,trade]);// text to show while loading\nvar pendingText=/*#__PURE__*/_jsx(Trans,{id:\"Swapping {0} {1} for {2} {3}\",values:{0:trade===null||trade===void 0?void 0:(_trade$inputAmount=trade.inputAmount)===null||_trade$inputAmount===void 0?void 0:_trade$inputAmount.toSignificant(6),1:trade===null||trade===void 0?void 0:(_trade$inputAmount2=trade.inputAmount)===null||_trade$inputAmount2===void 0?void 0:(_trade$inputAmount2$c=_trade$inputAmount2.currency)===null||_trade$inputAmount2$c===void 0?void 0:_trade$inputAmount2$c.symbol,2:trade===null||trade===void 0?void 0:(_trade$outputAmount=trade.outputAmount)===null||_trade$outputAmount===void 0?void 0:_trade$outputAmount.toSignificant(6),3:trade===null||trade===void 0?void 0:(_trade$outputAmount2=trade.outputAmount)===null||_trade$outputAmount2===void 0?void 0:(_trade$outputAmount2$=_trade$outputAmount2.currency)===null||_trade$outputAmount2$===void 0?void 0:_trade$outputAmount2$.symbol}});var confirmationContent=useCallback(function(){return swapErrorMessage?/*#__PURE__*/_jsx(TransactionErrorContent,{onDismiss:onDismiss,message:swapErrorMessage}):/*#__PURE__*/_jsx(ConfirmationModalContent,{title:/*#__PURE__*/_jsx(Trans,{id:\"Confirm Swap\"}),onDismiss:onDismiss,topContent:modalHeader,bottomContent:modalBottom});},[onDismiss,modalBottom,modalHeader,swapErrorMessage]);return/*#__PURE__*/_jsx(TransactionConfirmationModal,{isOpen:isOpen,onDismiss:onDismiss,attemptingTxn:attemptingTxn,hash:txHash,content:confirmationContent,pendingText:pendingText,currencyToAdd:trade===null||trade===void 0?void 0:trade.outputAmount.currency});}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/components/swap/ConfirmSwapModal.tsx"],"names":["Trade","V2Trade","V3Trade","useCallback","useMemo","TransactionConfirmationModal","ConfirmationModalContent","TransactionErrorContent","SwapModalFooter","SwapModalHeader","tradeMeaningfullyDiffers","args","tradeA","tradeB","tradeType","inputAmount","currency","equals","equalTo","outputAmount","ConfirmSwapModal","trade","originalTrade","onAcceptChanges","allowedSlippage","onConfirm","onDismiss","recipient","swapErrorMessage","isOpen","attemptingTxn","txHash","showAcceptChanges","Boolean","modalHeader","modalBottom","pendingText","toSignificant","symbol","confirmationContent"],"mappings":"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","sourcesContent":["import { Trans } from '@lingui/macro'\nimport { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade } from '@uniswap/v3-sdk'\nimport { ReactNode, useCallback, useMemo } from 'react'\nimport TransactionConfirmationModal, {\n  ConfirmationModalContent,\n  TransactionErrorContent,\n} from '../TransactionConfirmationModal'\nimport SwapModalFooter from './SwapModalFooter'\nimport SwapModalHeader from './SwapModalHeader'\n\n/**\n * Returns true if the trade requires a confirmation of details before we can submit it\n * @param args either a pair of V2 trades or a pair of V3 trades\n */\nfunction tradeMeaningfullyDiffers(\n  ...args:\n    | [V2Trade<Currency, Currency, TradeType>, V2Trade<Currency, Currency, TradeType>]\n    | [V3Trade<Currency, Currency, TradeType>, V3Trade<Currency, Currency, TradeType>]\n): boolean {\n  const [tradeA, tradeB] = args\n  return (\n    tradeA.tradeType !== tradeB.tradeType ||\n    !tradeA.inputAmount.currency.equals(tradeB.inputAmount.currency) ||\n    !tradeA.inputAmount.equalTo(tradeB.inputAmount) ||\n    !tradeA.outputAmount.currency.equals(tradeB.outputAmount.currency) ||\n    !tradeA.outputAmount.equalTo(tradeB.outputAmount)\n  )\n}\n\nexport default function ConfirmSwapModal({\n  trade,\n  originalTrade,\n  onAcceptChanges,\n  allowedSlippage,\n  onConfirm,\n  onDismiss,\n  recipient,\n  swapErrorMessage,\n  isOpen,\n  attemptingTxn,\n  txHash,\n}: {\n  isOpen: boolean\n  trade: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | undefined\n  originalTrade: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | undefined\n  attemptingTxn: boolean\n  txHash: string | undefined\n  recipient: string | null\n  allowedSlippage: Percent\n  onAcceptChanges: () => void\n  onConfirm: () => void\n  swapErrorMessage: ReactNode | undefined\n  onDismiss: () => void\n}) {\n  const showAcceptChanges = useMemo(\n    () =>\n      Boolean(\n        (trade instanceof V2Trade &&\n          originalTrade instanceof V2Trade &&\n          tradeMeaningfullyDiffers(trade, originalTrade)) ||\n          (trade instanceof V3Trade &&\n            originalTrade instanceof V3Trade &&\n            tradeMeaningfullyDiffers(trade, originalTrade))\n      ),\n    [originalTrade, trade]\n  )\n\n  const modalHeader = useCallback(() => {\n    return trade ? (\n      <SwapModalHeader\n        trade={trade}\n        allowedSlippage={allowedSlippage}\n        recipient={recipient}\n        showAcceptChanges={showAcceptChanges}\n        onAcceptChanges={onAcceptChanges}\n      />\n    ) : null\n  }, [allowedSlippage, onAcceptChanges, recipient, showAcceptChanges, trade])\n\n  const modalBottom = useCallback(() => {\n    return trade ? (\n      <SwapModalFooter\n        onConfirm={onConfirm}\n        trade={trade}\n        disabledConfirm={showAcceptChanges}\n        swapErrorMessage={swapErrorMessage}\n      />\n    ) : null\n  }, [onConfirm, showAcceptChanges, swapErrorMessage, trade])\n\n  // text to show while loading\n  const pendingText = (\n    <Trans>\n      Swapping {trade?.inputAmount?.toSignificant(6)} {trade?.inputAmount?.currency?.symbol} for{' '}\n      {trade?.outputAmount?.toSignificant(6)} {trade?.outputAmount?.currency?.symbol}\n    </Trans>\n  )\n\n  const confirmationContent = useCallback(\n    () =>\n      swapErrorMessage ? (\n        <TransactionErrorContent onDismiss={onDismiss} message={swapErrorMessage} />\n      ) : (\n        <ConfirmationModalContent\n          title={<Trans>Confirm Swap</Trans>}\n          onDismiss={onDismiss}\n          topContent={modalHeader}\n          bottomContent={modalBottom}\n        />\n      ),\n    [onDismiss, modalBottom, modalHeader, swapErrorMessage]\n  )\n\n  return (\n    <TransactionConfirmationModal\n      isOpen={isOpen}\n      onDismiss={onDismiss}\n      attemptingTxn={attemptingTxn}\n      hash={txHash}\n      content={confirmationContent}\n      pendingText={pendingText}\n      currencyToAdd={trade?.outputAmount.currency}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}