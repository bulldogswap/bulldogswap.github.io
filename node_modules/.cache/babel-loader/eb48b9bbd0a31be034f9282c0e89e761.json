{"ast":null,"code":"import{useCallback,useMemo}from'react';import{useAppDispatch,useAppSelector}from'state/hooks';import{useActiveWeb3React}from'../../hooks/web3';import{addTransaction}from'./actions';// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,account=_useActiveWeb3React.account;var dispatch=useAppDispatch();return useCallback(function(response){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},summary=_ref.summary,approval=_ref.approval,claim=_ref.claim;if(!account)return;if(!chainId)return;var hash=response.hash;if(!hash){throw Error('No transaction hash found.');}dispatch(addTransaction({hash:hash,from:account,chainId:chainId,approval:approval,summary:summary,claim:claim}));},[dispatch,chainId,account]);}// returns all the transactions for the current chain\nexport function useAllTransactions(){var _state$chainId;var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var state=useAppSelector(function(state){return state.transactions;});return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};}export function useTransaction(transactionHash){var allTransactions=useAllTransactions();if(!transactionHash){return undefined;}return allTransactions[transactionHash];}export function useIsTransactionPending(transactionHash){var transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return!transactions[transactionHash].receipt;}export function useIsTransactionConfirmed(transactionHash){var transactions=useAllTransactions();if(!transactionHash||!transactions[transactionHash])return false;return Boolean(transactions[transactionHash].receipt);}/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */export function isTransactionRecent(tx){return new Date().getTime()-tx.addedTime<86400000;}// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress,spender){var allTransactions=useAllTransactions();return useMemo(function(){return typeof tokenAddress==='string'&&typeof spender==='string'&&Object.keys(allTransactions).some(function(hash){var tx=allTransactions[hash];if(!tx)return false;if(tx.receipt){return false;}else{var approval=tx.approval;if(!approval)return false;return approval.spender===spender&&approval.tokenAddress===tokenAddress&&isTransactionRecent(tx);}});},[allTransactions,spender,tokenAddress]);}// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account){var allTransactions=useAllTransactions();// get the txn if it has been submitted\nvar claimTxn=useMemo(function(){var txnIndex=Object.keys(allTransactions).find(function(hash){var tx=allTransactions[hash];return tx.claim&&tx.claim.recipient===account;});return txnIndex&&allTransactions[txnIndex]?allTransactions[txnIndex]:undefined;},[account,allTransactions]);return{claimSubmitted:Boolean(claimTxn),claimTxn:claimTxn};}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/transactions/hooks.tsx"],"names":["useCallback","useMemo","useAppDispatch","useAppSelector","useActiveWeb3React","addTransaction","useTransactionAdder","chainId","account","dispatch","response","summary","approval","claim","hash","Error","from","useAllTransactions","state","transactions","useTransaction","transactionHash","allTransactions","undefined","useIsTransactionPending","receipt","useIsTransactionConfirmed","Boolean","isTransactionRecent","tx","Date","getTime","addedTime","useHasPendingApproval","tokenAddress","spender","Object","keys","some","useUserHasSubmittedClaim","claimTxn","txnIndex","find","recipient","claimSubmitted"],"mappings":"AACA,OAASA,WAAT,CAAsBC,OAAtB,KAAqC,OAArC,CACA,OAASC,cAAT,CAAyBC,cAAzB,KAA+C,aAA/C,CAEA,OAASC,kBAAT,KAAmC,kBAAnC,CACA,OAASC,cAAT,KAA+B,WAA/B,CAGA;AACA,MAAO,SAASC,CAAAA,mBAAT,EAGG,CACR,wBAA6BF,kBAAkB,EAA/C,CAAQG,OAAR,qBAAQA,OAAR,CAAiBC,OAAjB,qBAAiBA,OAAjB,CACA,GAAMC,CAAAA,QAAQ,CAAGP,cAAc,EAA/B,CAEA,MAAOF,CAAAA,WAAW,CAChB,SACEU,QADF,CAOK,oEAD4G,EAC5G,CAJDC,OAIC,MAJDA,OAIC,CAHDC,QAGC,MAHDA,QAGC,CAFDC,KAEC,MAFDA,KAEC,CACH,GAAI,CAACL,OAAL,CAAc,OACd,GAAI,CAACD,OAAL,CAAc,OAEd,GAAQO,CAAAA,IAAR,CAAiBJ,QAAjB,CAAQI,IAAR,CACA,GAAI,CAACA,IAAL,CAAW,CACT,KAAMC,CAAAA,KAAK,CAAC,4BAAD,CAAX,CACD,CACDN,QAAQ,CAACJ,cAAc,CAAC,CAAES,IAAI,CAAJA,IAAF,CAAQE,IAAI,CAAER,OAAd,CAAuBD,OAAO,CAAPA,OAAvB,CAAgCK,QAAQ,CAARA,QAAhC,CAA0CD,OAAO,CAAPA,OAA1C,CAAmDE,KAAK,CAALA,KAAnD,CAAD,CAAf,CAAR,CACD,CAjBe,CAkBhB,CAACJ,QAAD,CAAWF,OAAX,CAAoBC,OAApB,CAlBgB,CAAlB,CAoBD,CAED;AACA,MAAO,SAASS,CAAAA,kBAAT,EAAwE,oBAC7E,yBAAoBb,kBAAkB,EAAtC,CAAQG,OAAR,sBAAQA,OAAR,CAEA,GAAMW,CAAAA,KAAK,CAAGf,cAAc,CAAC,SAACe,KAAD,QAAWA,CAAAA,KAAK,CAACC,YAAjB,EAAD,CAA5B,CAEA,MAAOZ,CAAAA,OAAO,iBAAGW,KAAK,CAACX,OAAD,CAAR,iDAAqB,EAArB,CAA0B,EAAxC,CACD,CAED,MAAO,SAASa,CAAAA,cAAT,CAAwBC,eAAxB,CAAkF,CACvF,GAAMC,CAAAA,eAAe,CAAGL,kBAAkB,EAA1C,CAEA,GAAI,CAACI,eAAL,CAAsB,CACpB,MAAOE,CAAAA,SAAP,CACD,CAED,MAAOD,CAAAA,eAAe,CAACD,eAAD,CAAtB,CACD,CAED,MAAO,SAASG,CAAAA,uBAAT,CAAiCH,eAAjC,CAAoE,CACzE,GAAMF,CAAAA,YAAY,CAAGF,kBAAkB,EAAvC,CAEA,GAAI,CAACI,eAAD,EAAoB,CAACF,YAAY,CAACE,eAAD,CAArC,CAAwD,MAAO,MAAP,CAExD,MAAO,CAACF,YAAY,CAACE,eAAD,CAAZ,CAA8BI,OAAtC,CACD,CAED,MAAO,SAASC,CAAAA,yBAAT,CAAmCL,eAAnC,CAAsE,CAC3E,GAAMF,CAAAA,YAAY,CAAGF,kBAAkB,EAAvC,CAEA,GAAI,CAACI,eAAD,EAAoB,CAACF,YAAY,CAACE,eAAD,CAArC,CAAwD,MAAO,MAAP,CAExD,MAAOM,CAAAA,OAAO,CAACR,YAAY,CAACE,eAAD,CAAZ,CAA8BI,OAA/B,CAAd,CACD,CAED;AACA;AACA;AACA,GACA,MAAO,SAASG,CAAAA,mBAAT,CAA6BC,EAA7B,CAA8D,CACnE,MAAO,IAAIC,CAAAA,IAAJ,GAAWC,OAAX,GAAuBF,EAAE,CAACG,SAA1B,CAAsC,QAA7C,CACD,CAED;AACA,MAAO,SAASC,CAAAA,qBAAT,CAA+BC,YAA/B,CAAiEC,OAAjE,CAAuG,CAC5G,GAAMb,CAAAA,eAAe,CAAGL,kBAAkB,EAA1C,CACA,MAAOhB,CAAAA,OAAO,CACZ,iBACE,OAAOiC,CAAAA,YAAP,GAAwB,QAAxB,EACA,MAAOC,CAAAA,OAAP,GAAmB,QADnB,EAEAC,MAAM,CAACC,IAAP,CAAYf,eAAZ,EAA6BgB,IAA7B,CAAkC,SAACxB,IAAD,CAAU,CAC1C,GAAMe,CAAAA,EAAE,CAAGP,eAAe,CAACR,IAAD,CAA1B,CACA,GAAI,CAACe,EAAL,CAAS,MAAO,MAAP,CACT,GAAIA,EAAE,CAACJ,OAAP,CAAgB,CACd,MAAO,MAAP,CACD,CAFD,IAEO,CACL,GAAMb,CAAAA,QAAQ,CAAGiB,EAAE,CAACjB,QAApB,CACA,GAAI,CAACA,QAAL,CAAe,MAAO,MAAP,CACf,MAAOA,CAAAA,QAAQ,CAACuB,OAAT,GAAqBA,OAArB,EAAgCvB,QAAQ,CAACsB,YAAT,GAA0BA,YAA1D,EAA0EN,mBAAmB,CAACC,EAAD,CAApG,CACD,CACF,CAVD,CAHF,EADY,CAeZ,CAACP,eAAD,CAAkBa,OAAlB,CAA2BD,YAA3B,CAfY,CAAd,CAiBD,CAED;AACA;AACA,MAAO,SAASK,CAAAA,wBAAT,CAAkC/B,OAAlC,CAGL,CACA,GAAMc,CAAAA,eAAe,CAAGL,kBAAkB,EAA1C,CAEA;AACA,GAAMuB,CAAAA,QAAQ,CAAGvC,OAAO,CAAC,UAAM,CAC7B,GAAMwC,CAAAA,QAAQ,CAAGL,MAAM,CAACC,IAAP,CAAYf,eAAZ,EAA6BoB,IAA7B,CAAkC,SAAC5B,IAAD,CAAU,CAC3D,GAAMe,CAAAA,EAAE,CAAGP,eAAe,CAACR,IAAD,CAA1B,CACA,MAAOe,CAAAA,EAAE,CAAChB,KAAH,EAAYgB,EAAE,CAAChB,KAAH,CAAS8B,SAAT,GAAuBnC,OAA1C,CACD,CAHgB,CAAjB,CAIA,MAAOiC,CAAAA,QAAQ,EAAInB,eAAe,CAACmB,QAAD,CAA3B,CAAwCnB,eAAe,CAACmB,QAAD,CAAvD,CAAoElB,SAA3E,CACD,CANuB,CAMrB,CAACf,OAAD,CAAUc,eAAV,CANqB,CAAxB,CAQA,MAAO,CAAEsB,cAAc,CAAEjB,OAAO,CAACa,QAAD,CAAzB,CAAqCA,QAAQ,CAARA,QAArC,CAAP,CACD","sourcesContent":["import { TransactionResponse } from '@ethersproject/providers'\nimport { useCallback, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { addTransaction } from './actions'\nimport { TransactionDetails } from './reducer'\n\n// helper that can take a ethers library transaction response and add it to the list of transactions\nexport function useTransactionAdder(): (\n  response: TransactionResponse,\n  customData?: { summary?: string; approval?: { tokenAddress: string; spender: string }; claim?: { recipient: string } }\n) => void {\n  const { chainId, account } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n\n  return useCallback(\n    (\n      response: TransactionResponse,\n      {\n        summary,\n        approval,\n        claim,\n      }: { summary?: string; claim?: { recipient: string }; approval?: { tokenAddress: string; spender: string } } = {}\n    ) => {\n      if (!account) return\n      if (!chainId) return\n\n      const { hash } = response\n      if (!hash) {\n        throw Error('No transaction hash found.')\n      }\n      dispatch(addTransaction({ hash, from: account, chainId, approval, summary, claim }))\n    },\n    [dispatch, chainId, account]\n  )\n}\n\n// returns all the transactions for the current chain\nexport function useAllTransactions(): { [txHash: string]: TransactionDetails } {\n  const { chainId } = useActiveWeb3React()\n\n  const state = useAppSelector((state) => state.transactions)\n\n  return chainId ? state[chainId] ?? {} : {}\n}\n\nexport function useTransaction(transactionHash?: string): TransactionDetails | undefined {\n  const allTransactions = useAllTransactions()\n\n  if (!transactionHash) {\n    return undefined\n  }\n\n  return allTransactions[transactionHash]\n}\n\nexport function useIsTransactionPending(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return !transactions[transactionHash].receipt\n}\n\nexport function useIsTransactionConfirmed(transactionHash?: string): boolean {\n  const transactions = useAllTransactions()\n\n  if (!transactionHash || !transactions[transactionHash]) return false\n\n  return Boolean(transactions[transactionHash].receipt)\n}\n\n/**\n * Returns whether a transaction happened in the last day (86400 seconds * 1000 milliseconds / second)\n * @param tx to check for recency\n */\nexport function isTransactionRecent(tx: TransactionDetails): boolean {\n  return new Date().getTime() - tx.addedTime < 86_400_000\n}\n\n// returns whether a token has a pending approval transaction\nexport function useHasPendingApproval(tokenAddress: string | undefined, spender: string | undefined): boolean {\n  const allTransactions = useAllTransactions()\n  return useMemo(\n    () =>\n      typeof tokenAddress === 'string' &&\n      typeof spender === 'string' &&\n      Object.keys(allTransactions).some((hash) => {\n        const tx = allTransactions[hash]\n        if (!tx) return false\n        if (tx.receipt) {\n          return false\n        } else {\n          const approval = tx.approval\n          if (!approval) return false\n          return approval.spender === spender && approval.tokenAddress === tokenAddress && isTransactionRecent(tx)\n        }\n      }),\n    [allTransactions, spender, tokenAddress]\n  )\n}\n\n// watch for submissions to claim\n// return null if not done loading, return undefined if not found\nexport function useUserHasSubmittedClaim(account?: string): {\n  claimSubmitted: boolean\n  claimTxn: TransactionDetails | undefined\n} {\n  const allTransactions = useAllTransactions()\n\n  // get the txn if it has been submitted\n  const claimTxn = useMemo(() => {\n    const txnIndex = Object.keys(allTransactions).find((hash) => {\n      const tx = allTransactions[hash]\n      return tx.claim && tx.claim.recipient === account\n    })\n    return txnIndex && allTransactions[txnIndex] ? allTransactions[txnIndex] : undefined\n  }, [account, allTransactions])\n\n  return { claimSubmitted: Boolean(claimTxn), claimTxn }\n}\n"]},"metadata":{},"sourceType":"module"}