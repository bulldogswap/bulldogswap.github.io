{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSafeAppConnection = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar core_1 = require(\"@web3-react/core\");\n\nfunction useSafeAppConnection(connector) {\n  var _core_1$useWeb3React = core_1.useWeb3React(),\n      activate = _core_1$useWeb3React.activate,\n      active = _core_1$useWeb3React.active;\n\n  var _react_1$default$useS = react_1.default.useState(false),\n      _react_1$default$useS2 = _slicedToArray(_react_1$default$useS, 2),\n      tried = _react_1$default$useS2[0],\n      setTried = _react_1$default$useS2[1];\n\n  react_1.default.useEffect(function () {\n    connector.isSafeApp().then(function (loadedInSafe) {\n      if (loadedInSafe) {\n        // On success active flag will change and in that case we'll set tried to true, check the hook below\n        activate(connector, undefined, true).catch(function () {\n          setTried(true);\n        });\n      } else {\n        setTried(true);\n      }\n    });\n  }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n  // if the connection worked, wait until we get confirmation of that to flip the flag\n\n  react_1.default.useEffect(function () {\n    if (active) {\n      setTried(true);\n    }\n  }, [active]);\n  return tried;\n}\n\nexports.useSafeAppConnection = useSafeAppConnection;","map":{"version":3,"sources":["../src/useSafeAppConnection.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAGA,SAAS,oBAAT,CAA8B,SAA9B,EAAyD;AACvD,6BAA6B,MAAA,CAAA,YAAA,EAA7B;AAAA,MAAQ,QAAR,wBAAQ,QAAR;AAAA,MAAkB,MAAlB,wBAAkB,MAAlB;;AACA,8BAA0B,OAAA,CAAA,OAAA,CAAM,QAAN,CAAe,KAAf,CAA1B;AAAA;AAAA,MAAO,KAAP;AAAA,MAAc,QAAd;;AAEA,EAAA,OAAA,CAAA,OAAA,CAAM,SAAN,CAAgB,YAAK;AACnB,IAAA,SAAS,CAAC,SAAV,GAAsB,IAAtB,CAA2B,UAAC,YAAD,EAAiB;AAC1C,UAAI,YAAJ,EAAkB;AAChB;AACA,QAAA,QAAQ,CAAC,SAAD,EAAY,SAAZ,EAAuB,IAAvB,CAAR,CAAqC,KAArC,CAA2C,YAAK;AAC9C,UAAA,QAAQ,CAAC,IAAD,CAAR;AACD,SAFD;AAGD,OALD,MAKO;AACL,QAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,KATD;AAUD,GAXD,EAWG,CAAC,QAAD,CAXH,EAJuD,CAevC;AAEhB;;AACA,EAAA,OAAA,CAAA,OAAA,CAAM,SAAN,CAAgB,YAAK;AACnB,QAAI,MAAJ,EAAY;AACV,MAAA,QAAQ,CAAC,IAAD,CAAR;AACD;AACF,GAJD,EAIG,CAAC,MAAD,CAJH;AAMA,SAAO,KAAP;AACD;;AAEQ,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useSafeAppConnection = void 0;\nconst react_1 = __importDefault(require(\"react\"));\nconst core_1 = require(\"@web3-react/core\");\nfunction useSafeAppConnection(connector) {\n    const { activate, active } = core_1.useWeb3React();\n    const [tried, setTried] = react_1.default.useState(false);\n    react_1.default.useEffect(() => {\n        connector.isSafeApp().then((loadedInSafe) => {\n            if (loadedInSafe) {\n                // On success active flag will change and in that case we'll set tried to true, check the hook below\n                activate(connector, undefined, true).catch(() => {\n                    setTried(true);\n                });\n            }\n            else {\n                setTried(true);\n            }\n        });\n    }, [activate]); // intentionally only running on mount (make sure it's only mounted once :))\n    // if the connection worked, wait until we get confirmation of that to flip the flag\n    react_1.default.useEffect(() => {\n        if (active) {\n            setTried(true);\n        }\n    }, [active]);\n    return tried;\n}\nexports.useSafeAppConnection = useSafeAppConnection;\n//# sourceMappingURL=useSafeAppConnection.js.map"]},"metadata":{},"sourceType":"script"}