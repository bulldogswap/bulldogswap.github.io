{"ast":null,"code":"import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _styled from\"styled-components\";import{Trans}from\"@lingui/react\";import{useState}from'react';import{ExplorerDataType,getExplorerLink}from'../../utils/getExplorerLink';import Modal from'../Modal';import{AutoColumn,ColumnCenter}from'../Column';import{DataCard,CardSection,Break}from'../earn/styled';import{RowBetween}from'../Row';import{TYPE,ExternalLink,CloseIcon,CustomLightSpinner,UniTokenAnimated}from'../../theme';import{ButtonPrimary}from'../Button';import{useClaimCallback,useUserUnclaimedAmount,useUserHasAvailableClaim}from'../../state/claim/hooks';import tokenLogo from'../../assets/images/token-logo.png';import Circle from\"../../assets/images/blue-loader.svg\";import{Text}from'rebass';import AddressInputPanel from'../AddressInputPanel';import useENS from'../../hooks/useENS';import{useActiveWeb3React}from'../../hooks/web3';import{isAddress}from'ethers/lib/utils';import Confetti from'../Confetti';import{CardNoise,CardBGImage,CardBGImageSmaller}from'../earn/styled';import{useIsTransactionPending}from'../../state/transactions/hooks';import{shortenAddress}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var ContentWrapper=_styled(AutoColumn).withConfig({componentId:\"sc-1qxvqh4-0\"})([\"width:100%;\"]);var ModalUpper=_styled(DataCard).withConfig({componentId:\"sc-1qxvqh4-1\"})([\"box-shadow:0px 4px 10px rgba(0,0,0,0.1);background:radial-gradient(76.02% 75.41% at 1.84% 0%,#ff007a 0%,#021d43 100%);\"]);var ConfirmOrLoadingWrapper=_styled.div.withConfig({componentId:\"sc-1qxvqh4-2\"})([\"width:100%;padding:24px;position:relative;background:\",\";\"],function(_ref){var activeBG=_ref.activeBG;return activeBG&&'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;';});var ConfirmedIcon=_styled(ColumnCenter).withConfig({componentId:\"sc-1qxvqh4-3\"})([\"padding:60px 0;\"]);export default function AddressClaimModal(_ref2){var _groupSeparator,_groupSeparator2;var isOpen=_ref2.isOpen,onDismiss=_ref2.onDismiss;var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;// state for smart contract input\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),typed=_useState2[0],setTyped=_useState2[1];function handleRecipientType(val){setTyped(val);}// monitor for third party recipient of claim\nvar _useENS=useENS(typed),parsedAddress=_useENS.address;// used for UI loading states\nvar _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),attempting=_useState4[0],setAttempting=_useState4[1];// monitor the status of the claim from contracts and txns\nvar _useClaimCallback=useClaimCallback(parsedAddress),claimCallback=_useClaimCallback.claimCallback;var unclaimedAmount=useUserUnclaimedAmount(parsedAddress);// check if the user has something available\nvar hasAvailableClaim=useUserHasAvailableClaim(parsedAddress);var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),hash=_useState6[0],setHash=_useState6[1];// monitor the status of the claim from contracts and txns\nvar claimPending=useIsTransactionPending(hash!==null&&hash!==void 0?hash:'');var claimConfirmed=hash&&!claimPending;// use the hash to monitor this txn\nfunction onClaim(){setAttempting(true);claimCallback().then(function(hash){setHash(hash);})// reset modal and log error\n.catch(function(error){setAttempting(false);console.log(error);});}function wrappedOnDismiss(){setAttempting(false);setHash(undefined);setTyped('');onDismiss();}return/*#__PURE__*/_jsxs(Modal,{isOpen:isOpen,onDismiss:wrappedOnDismiss,maxHeight:90,children:[/*#__PURE__*/_jsx(Confetti,{start:Boolean(isOpen&&claimConfirmed&&attempting)}),!attempting&&/*#__PURE__*/_jsxs(ContentWrapper,{gap:\"lg\",children:[/*#__PURE__*/_jsxs(ModalUpper,{children:[/*#__PURE__*/_jsx(CardBGImage,{}),/*#__PURE__*/_jsx(CardNoise,{}),/*#__PURE__*/_jsxs(CardSection,{gap:\"md\",children:[/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsx(TYPE.white,{fontWeight:500,children:/*#__PURE__*/_jsx(Trans,{id:\"Claim UNI Token\"})}),/*#__PURE__*/_jsx(CloseIcon,{onClick:wrappedOnDismiss,style:{zIndex:99},stroke:\"white\"})]}),/*#__PURE__*/_jsx(TYPE.white,{fontWeight:700,fontSize:36,children:/*#__PURE__*/_jsx(Trans,{id:\"{0} UNI\",values:{0:unclaimedAmount===null||unclaimedAmount===void 0?void 0:unclaimedAmount.toFixed(0,(_groupSeparator={groupSeparator:','})!==null&&_groupSeparator!==void 0?_groupSeparator:'-')}})})]}),/*#__PURE__*/_jsx(Break,{})]}),/*#__PURE__*/_jsxs(AutoColumn,{gap:\"md\",style:{padding:'1rem',paddingTop:'0'},justify:\"center\",children:[/*#__PURE__*/_jsx(TYPE.subHeader,{fontWeight:500,children:/*#__PURE__*/_jsx(Trans,{id:\"Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on submission.\"})}),/*#__PURE__*/_jsx(AddressInputPanel,{value:typed,onChange:handleRecipientType}),parsedAddress&&!hasAvailableClaim&&/*#__PURE__*/_jsx(TYPE.error,{error:true,children:/*#__PURE__*/_jsx(Trans,{id:\"Address has no available claim\"})}),/*#__PURE__*/_jsx(ButtonPrimary,{disabled:!isAddress(parsedAddress!==null&&parsedAddress!==void 0?parsedAddress:'')||!hasAvailableClaim,padding:\"16px 16px\",width:\"100%\",$borderRadius:\"12px\",mt:\"1rem\",onClick:onClaim,children:/*#__PURE__*/_jsx(Trans,{id:\"Claim UNI\"})})]})]}),(attempting||claimConfirmed)&&/*#__PURE__*/_jsxs(ConfirmOrLoadingWrapper,{activeBG:true,children:[/*#__PURE__*/_jsx(CardNoise,{}),/*#__PURE__*/_jsx(CardBGImageSmaller,{desaturate:true}),/*#__PURE__*/_jsxs(RowBetween,{children:[/*#__PURE__*/_jsx(\"div\",{}),/*#__PURE__*/_jsx(CloseIcon,{onClick:wrappedOnDismiss,style:{zIndex:99},stroke:\"black\"})]}),/*#__PURE__*/_jsx(ConfirmedIcon,{children:!claimConfirmed?/*#__PURE__*/_jsx(CustomLightSpinner,{src:Circle,alt:\"loader\",size:'90px'}):/*#__PURE__*/_jsx(UniTokenAnimated,{width:\"72px\",src:tokenLogo,alt:\"UNI logo\"})}),/*#__PURE__*/_jsxs(AutoColumn,{gap:\"100px\",justify:'center',children:[/*#__PURE__*/_jsxs(AutoColumn,{gap:\"12px\",justify:'center',children:[/*#__PURE__*/_jsx(TYPE.largeHeader,{fontWeight:600,color:\"black\",children:claimConfirmed?/*#__PURE__*/_jsx(Trans,{id:\"Claimed\"}):/*#__PURE__*/_jsx(Trans,{id:\"Claiming\"})}),!claimConfirmed&&/*#__PURE__*/_jsx(Text,{fontSize:36,color:'#ff007a',fontWeight:800,children:/*#__PURE__*/_jsx(Trans,{id:\"{0} UNI\",values:{0:unclaimedAmount===null||unclaimedAmount===void 0?void 0:unclaimedAmount.toFixed(0,(_groupSeparator2={groupSeparator:','})!==null&&_groupSeparator2!==void 0?_groupSeparator2:'-')}})}),parsedAddress&&/*#__PURE__*/_jsx(TYPE.largeHeader,{fontWeight:600,color:\"black\",children:/*#__PURE__*/_jsx(Trans,{id:\"for {0}\",values:{0:shortenAddress(parsedAddress)}})})]}),claimConfirmed&&/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(TYPE.subHeader,{fontWeight:500,color:\"black\",children:[/*#__PURE__*/_jsxs(\"span\",{role:\"img\",\"aria-label\":\"party-hat\",children:[\"\\uD83C\\uDF89\",' ']}),/*#__PURE__*/_jsx(Trans,{id:\"Welcome to team Unicorn :)\"}),/*#__PURE__*/_jsx(\"span\",{role:\"img\",\"aria-label\":\"party-hat\",children:\"\\uD83C\\uDF89\"})]})}),attempting&&!hash&&/*#__PURE__*/_jsx(TYPE.subHeader,{color:\"black\",children:/*#__PURE__*/_jsx(Trans,{id:\"Confirm this transaction in your wallet\"})}),attempting&&hash&&!claimConfirmed&&chainId&&hash&&/*#__PURE__*/_jsx(ExternalLink,{href:getExplorerLink(chainId,hash,ExplorerDataType.TRANSACTION),style:{zIndex:99},children:/*#__PURE__*/_jsx(Trans,{id:\"View transaction on Explorer\"})})]})]})]});}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/components/claim/AddressClaimModal.tsx"],"names":["useState","ExplorerDataType","getExplorerLink","Modal","AutoColumn","ColumnCenter","DataCard","CardSection","Break","RowBetween","TYPE","ExternalLink","CloseIcon","CustomLightSpinner","UniTokenAnimated","ButtonPrimary","useClaimCallback","useUserUnclaimedAmount","useUserHasAvailableClaim","tokenLogo","Text","AddressInputPanel","useENS","useActiveWeb3React","isAddress","Confetti","CardNoise","CardBGImage","CardBGImageSmaller","useIsTransactionPending","shortenAddress","ContentWrapper","styled","ModalUpper","ConfirmOrLoadingWrapper","div","activeBG","ConfirmedIcon","AddressClaimModal","isOpen","onDismiss","chainId","typed","setTyped","handleRecipientType","val","parsedAddress","address","attempting","setAttempting","claimCallback","unclaimedAmount","hasAvailableClaim","hash","setHash","claimPending","claimConfirmed","onClaim","then","catch","error","console","log","wrappedOnDismiss","undefined","Boolean","zIndex","toFixed","groupSeparator","padding","paddingTop","Circle","TRANSACTION"],"mappings":"gQAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,OAASC,gBAAT,CAA2BC,eAA3B,KAAkD,6BAAlD,CACA,MAAOC,CAAAA,KAAP,KAAkB,UAAlB,CACA,OAASC,UAAT,CAAqBC,YAArB,KAAyC,WAAzC,CAEA,OAASC,QAAT,CAAmBC,WAAnB,CAAgCC,KAAhC,KAA6C,gBAA7C,CACA,OAASC,UAAT,KAA2B,QAA3B,CACA,OAASC,IAAT,CAAeC,YAAf,CAA6BC,SAA7B,CAAwCC,kBAAxC,CAA4DC,gBAA5D,KAAoF,aAApF,CACA,OAASC,aAAT,KAA8B,WAA9B,CACA,OAASC,gBAAT,CAA2BC,sBAA3B,CAAmDC,wBAAnD,KAAmF,yBAAnF,CACA,MAAOC,CAAAA,SAAP,KAAsB,oCAAtB,C,wDAEA,OAASC,IAAT,KAAqB,QAArB,CACA,MAAOC,CAAAA,iBAAP,KAA8B,sBAA9B,CACA,MAAOC,CAAAA,MAAP,KAAmB,oBAAnB,CACA,OAASC,kBAAT,KAAmC,kBAAnC,CACA,OAASC,SAAT,KAA0B,kBAA1B,CACA,MAAOC,CAAAA,QAAP,KAAqB,aAArB,CACA,OAASC,SAAT,CAAoBC,WAApB,CAAiCC,kBAAjC,KAA2D,gBAA3D,CACA,OAASC,uBAAT,KAAwC,gCAAxC,CAEA,OAASC,cAAT,KAA+B,aAA/B,C,6IAGA,GAAMC,CAAAA,cAAc,CAAGC,OAAM,CAAC5B,UAAD,CAAT,0DAApB,CAIA,GAAM6B,CAAAA,UAAU,CAAGD,OAAM,CAAC1B,QAAD,CAAT,qKAAhB,CAKA,GAAM4B,CAAAA,uBAAuB,CAAGF,OAAM,CAACG,GAAV,wGAIb,kBAAGC,CAAAA,QAAH,MAAGA,QAAH,OACZA,CAAAA,QAAQ,EACR,+GAFY,EAJa,CAA7B,CASA,GAAMC,CAAAA,aAAa,CAAGL,OAAM,CAAC3B,YAAD,CAAT,8DAAnB,CAIA,cAAe,SAASiC,CAAAA,iBAAT,OAA8F,yCAAjEC,CAAAA,MAAiE,OAAjEA,MAAiE,CAAzDC,SAAyD,OAAzDA,SAAyD,CAC3G,wBAAoBjB,kBAAkB,EAAtC,CAAQkB,OAAR,qBAAQA,OAAR,CAEA;AACA,cAA0BzC,QAAQ,CAAC,EAAD,CAAlC,wCAAO0C,KAAP,eAAcC,QAAd,eACA,QAASC,CAAAA,mBAAT,CAA6BC,GAA7B,CAA0C,CACxCF,QAAQ,CAACE,GAAD,CAAR,CACD,CAED;AACA,YAAmCvB,MAAM,CAACoB,KAAD,CAAzC,CAAiBI,aAAjB,SAAQC,OAAR,CAEA;AACA,eAAoC/C,QAAQ,CAAU,KAAV,CAA5C,yCAAOgD,UAAP,eAAmBC,aAAnB,eAEA;AACA,sBAA0BjC,gBAAgB,CAAC8B,aAAD,CAA1C,CAAQI,aAAR,mBAAQA,aAAR,CACA,GAAMC,CAAAA,eAAkD,CAAGlC,sBAAsB,CAAC6B,aAAD,CAAjF,CAEA;AACA,GAAMM,CAAAA,iBAAiB,CAAGlC,wBAAwB,CAAC4B,aAAD,CAAlD,CAEA,eAAwB9C,QAAQ,EAAhC,yCAAOqD,IAAP,eAAaC,OAAb,eAEA;AACA,GAAMC,CAAAA,YAAY,CAAG1B,uBAAuB,CAACwB,IAAD,SAACA,IAAD,UAACA,IAAD,CAAS,EAAT,CAA5C,CACA,GAAMG,CAAAA,cAAc,CAAGH,IAAI,EAAI,CAACE,YAAhC,CAEA;AAEA,QAASE,CAAAA,OAAT,EAAmB,CACjBR,aAAa,CAAC,IAAD,CAAb,CACAC,aAAa,GACVQ,IADH,CACQ,SAACL,IAAD,CAAU,CACdC,OAAO,CAACD,IAAD,CAAP,CACD,CAHH,CAIE;AAJF,CAKGM,KALH,CAKS,SAACC,KAAD,CAAW,CAChBX,aAAa,CAAC,KAAD,CAAb,CACAY,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CARH,EASD,CAED,QAASG,CAAAA,gBAAT,EAA4B,CAC1Bd,aAAa,CAAC,KAAD,CAAb,CACAK,OAAO,CAACU,SAAD,CAAP,CACArB,QAAQ,CAAC,EAAD,CAAR,CACAH,SAAS,GACV,CAED,mBACE,MAAC,KAAD,EAAO,MAAM,CAAED,MAAf,CAAuB,SAAS,CAAEwB,gBAAlC,CAAoD,SAAS,CAAE,EAA/D,wBACE,KAAC,QAAD,EAAU,KAAK,CAAEE,OAAO,CAAC1B,MAAM,EAAIiB,cAAV,EAA4BR,UAA7B,CAAxB,EADF,CAEG,CAACA,UAAD,eACC,MAAC,cAAD,EAAgB,GAAG,CAAC,IAApB,wBACE,MAAC,UAAD,yBACE,KAAC,WAAD,IADF,cAEE,KAAC,SAAD,IAFF,cAGE,MAAC,WAAD,EAAa,GAAG,CAAC,IAAjB,wBACE,MAAC,UAAD,yBACE,KAAC,IAAD,CAAM,KAAN,EAAY,UAAU,CAAE,GAAxB,uBACE,kCADF,EADF,cAIE,KAAC,SAAD,EAAW,OAAO,CAAEe,gBAApB,CAAsC,KAAK,CAAE,CAAEG,MAAM,CAAE,EAAV,CAA7C,CAA6D,MAAM,CAAC,OAApE,EAJF,GADF,cAOE,KAAC,IAAD,CAAM,KAAN,EAAY,UAAU,CAAE,GAAxB,CAA6B,QAAQ,CAAE,EAAvC,uBACE,mCAAQf,eAAR,SAAQA,eAAR,iBAAQA,eAAe,CAAEgB,OAAjB,CAAyB,CAAzB,kBAA4B,CAAEC,cAAc,CAAE,GAAlB,CAA5B,mDAAuD,GAAvD,CAAR,GADF,EAPF,GAHF,cAcE,KAAC,KAAD,IAdF,GADF,cAiBE,MAAC,UAAD,EAAY,GAAG,CAAC,IAAhB,CAAqB,KAAK,CAAE,CAAEC,OAAO,CAAE,MAAX,CAAmBC,UAAU,CAAE,GAA/B,CAA5B,CAAkE,OAAO,CAAC,QAA1E,wBACE,KAAC,IAAD,CAAM,SAAN,EAAgB,UAAU,CAAE,GAA5B,uBACE,uIADF,EADF,cAOE,KAAC,iBAAD,EAAmB,KAAK,CAAE5B,KAA1B,CAAiC,QAAQ,CAAEE,mBAA3C,EAPF,CAQGE,aAAa,EAAI,CAACM,iBAAlB,eACC,KAAC,IAAD,CAAM,KAAN,EAAY,KAAK,CAAE,IAAnB,uBACE,iDADF,EATJ,cAaE,KAAC,aAAD,EACE,QAAQ,CAAE,CAAC5B,SAAS,CAACsB,aAAD,SAACA,aAAD,UAACA,aAAD,CAAkB,EAAlB,CAAV,EAAmC,CAACM,iBADhD,CAEE,OAAO,CAAC,WAFV,CAGE,KAAK,CAAC,MAHR,CAIE,aAAa,CAAC,MAJhB,CAKE,EAAE,CAAC,MALL,CAME,OAAO,CAAEK,OANX,uBAQE,4BARF,EAbF,GAjBF,GAHJ,CA8CG,CAACT,UAAU,EAAIQ,cAAf,gBACC,MAAC,uBAAD,EAAyB,QAAQ,CAAE,IAAnC,wBACE,KAAC,SAAD,IADF,cAEE,KAAC,kBAAD,EAAoB,UAAU,KAA9B,EAFF,cAGE,MAAC,UAAD,yBACE,cADF,cAEE,KAAC,SAAD,EAAW,OAAO,CAAEO,gBAApB,CAAsC,KAAK,CAAE,CAAEG,MAAM,CAAE,EAAV,CAA7C,CAA6D,MAAM,CAAC,OAApE,EAFF,GAHF,cAOE,KAAC,aAAD,WACG,CAACV,cAAD,cACC,KAAC,kBAAD,EAAoB,GAAG,CAAEe,MAAzB,CAAiC,GAAG,CAAC,QAArC,CAA8C,IAAI,CAAE,MAApD,EADD,cAGC,KAAC,gBAAD,EAAkB,KAAK,CAAC,MAAxB,CAA+B,GAAG,CAAEpD,SAApC,CAA+C,GAAG,CAAC,UAAnD,EAJJ,EAPF,cAcE,MAAC,UAAD,EAAY,GAAG,CAAC,OAAhB,CAAwB,OAAO,CAAE,QAAjC,wBACE,MAAC,UAAD,EAAY,GAAG,CAAC,MAAhB,CAAuB,OAAO,CAAE,QAAhC,wBACE,KAAC,IAAD,CAAM,WAAN,EAAkB,UAAU,CAAE,GAA9B,CAAmC,KAAK,CAAC,OAAzC,UACGqC,cAAc,cAAG,0BAAH,cAA4B,2BAD7C,EADF,CAIG,CAACA,cAAD,eACC,KAAC,IAAD,EAAM,QAAQ,CAAE,EAAhB,CAAoB,KAAK,CAAE,SAA3B,CAAsC,UAAU,CAAE,GAAlD,uBACE,mCAAQL,eAAR,SAAQA,eAAR,iBAAQA,eAAe,CAAEgB,OAAjB,CAAyB,CAAzB,mBAA4B,CAAEC,cAAc,CAAE,GAAlB,CAA5B,qDAAuD,GAAvD,CAAR,GADF,EALJ,CASGtB,aAAa,eACZ,KAAC,IAAD,CAAM,WAAN,EAAkB,UAAU,CAAE,GAA9B,CAAmC,KAAK,CAAC,OAAzC,uBACE,mCAAYhB,cAAc,CAACgB,aAAD,CAA1B,GADF,EAVJ,GADF,CAgBGU,cAAc,eACb,sCACE,MAAC,IAAD,CAAM,SAAN,EAAgB,UAAU,CAAE,GAA5B,CAAiC,KAAK,CAAC,OAAvC,wBACE,cAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,WAA5B,0BACK,GADL,GADF,cAIE,6CAJF,cAKE,aAAM,IAAI,CAAC,KAAX,CAAiB,aAAW,WAA5B,0BALF,GADF,EAjBJ,CA6BGR,UAAU,EAAI,CAACK,IAAf,eACC,KAAC,IAAD,CAAM,SAAN,EAAgB,KAAK,CAAC,OAAtB,uBACE,0DADF,EA9BJ,CAkCGL,UAAU,EAAIK,IAAd,EAAsB,CAACG,cAAvB,EAAyCf,OAAzC,EAAoDY,IAApD,eACC,KAAC,YAAD,EAAc,IAAI,CAAEnD,eAAe,CAACuC,OAAD,CAAUY,IAAV,CAAgBpD,gBAAgB,CAACuE,WAAjC,CAAnC,CAAkF,KAAK,CAAE,CAAEN,MAAM,CAAE,EAAV,CAAzF,uBACE,+CADF,EAnCJ,GAdF,GA/CJ,GADF,CA0GD","sourcesContent":["import { useState } from 'react'\nimport { ExplorerDataType, getExplorerLink } from '../../utils/getExplorerLink'\nimport Modal from '../Modal'\nimport { AutoColumn, ColumnCenter } from '../Column'\nimport styled from 'styled-components/macro'\nimport { DataCard, CardSection, Break } from '../earn/styled'\nimport { RowBetween } from '../Row'\nimport { TYPE, ExternalLink, CloseIcon, CustomLightSpinner, UniTokenAnimated } from '../../theme'\nimport { ButtonPrimary } from '../Button'\nimport { useClaimCallback, useUserUnclaimedAmount, useUserHasAvailableClaim } from '../../state/claim/hooks'\nimport tokenLogo from '../../assets/images/token-logo.png'\nimport Circle from '../../assets/images/blue-loader.svg'\nimport { Text } from 'rebass'\nimport AddressInputPanel from '../AddressInputPanel'\nimport useENS from '../../hooks/useENS'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { isAddress } from 'ethers/lib/utils'\nimport Confetti from '../Confetti'\nimport { CardNoise, CardBGImage, CardBGImageSmaller } from '../earn/styled'\nimport { useIsTransactionPending } from '../../state/transactions/hooks'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { shortenAddress } from '../../utils'\nimport { Trans } from '@lingui/macro'\n\nconst ContentWrapper = styled(AutoColumn)`\n  width: 100%;\n`\n\nconst ModalUpper = styled(DataCard)`\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);\n  background: radial-gradient(76.02% 75.41% at 1.84% 0%, #ff007a 0%, #021d43 100%);\n`\n\nconst ConfirmOrLoadingWrapper = styled.div<{ activeBG: boolean }>`\n  width: 100%;\n  padding: 24px;\n  position: relative;\n  background: ${({ activeBG }) =>\n    activeBG &&\n    'radial-gradient(76.02% 75.41% at 1.84% 0%, rgba(255, 0, 122, 0.2) 0%, rgba(33, 114, 229, 0.2) 100%), #FFFFFF;'};\n`\n\nconst ConfirmedIcon = styled(ColumnCenter)`\n  padding: 60px 0;\n`\n\nexport default function AddressClaimModal({ isOpen, onDismiss }: { isOpen: boolean; onDismiss: () => void }) {\n  const { chainId } = useActiveWeb3React()\n\n  // state for smart contract input\n  const [typed, setTyped] = useState('')\n  function handleRecipientType(val: string) {\n    setTyped(val)\n  }\n\n  // monitor for third party recipient of claim\n  const { address: parsedAddress } = useENS(typed)\n\n  // used for UI loading states\n  const [attempting, setAttempting] = useState<boolean>(false)\n\n  // monitor the status of the claim from contracts and txns\n  const { claimCallback } = useClaimCallback(parsedAddress)\n  const unclaimedAmount: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(parsedAddress)\n\n  // check if the user has something available\n  const hasAvailableClaim = useUserHasAvailableClaim(parsedAddress)\n\n  const [hash, setHash] = useState<string | undefined>()\n\n  // monitor the status of the claim from contracts and txns\n  const claimPending = useIsTransactionPending(hash ?? '')\n  const claimConfirmed = hash && !claimPending\n\n  // use the hash to monitor this txn\n\n  function onClaim() {\n    setAttempting(true)\n    claimCallback()\n      .then((hash) => {\n        setHash(hash)\n      })\n      // reset modal and log error\n      .catch((error) => {\n        setAttempting(false)\n        console.log(error)\n      })\n  }\n\n  function wrappedOnDismiss() {\n    setAttempting(false)\n    setHash(undefined)\n    setTyped('')\n    onDismiss()\n  }\n\n  return (\n    <Modal isOpen={isOpen} onDismiss={wrappedOnDismiss} maxHeight={90}>\n      <Confetti start={Boolean(isOpen && claimConfirmed && attempting)} />\n      {!attempting && (\n        <ContentWrapper gap=\"lg\">\n          <ModalUpper>\n            <CardBGImage />\n            <CardNoise />\n            <CardSection gap=\"md\">\n              <RowBetween>\n                <TYPE.white fontWeight={500}>\n                  <Trans>Claim UNI Token</Trans>\n                </TYPE.white>\n                <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"white\" />\n              </RowBetween>\n              <TYPE.white fontWeight={700} fontSize={36}>\n                <Trans>{unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI</Trans>\n              </TYPE.white>\n            </CardSection>\n            <Break />\n          </ModalUpper>\n          <AutoColumn gap=\"md\" style={{ padding: '1rem', paddingTop: '0' }} justify=\"center\">\n            <TYPE.subHeader fontWeight={500}>\n              <Trans>\n                Enter an address to trigger a UNI claim. If the address has any claimable UNI it will be sent to them on\n                submission.\n              </Trans>\n            </TYPE.subHeader>\n            <AddressInputPanel value={typed} onChange={handleRecipientType} />\n            {parsedAddress && !hasAvailableClaim && (\n              <TYPE.error error={true}>\n                <Trans>Address has no available claim</Trans>\n              </TYPE.error>\n            )}\n            <ButtonPrimary\n              disabled={!isAddress(parsedAddress ?? '') || !hasAvailableClaim}\n              padding=\"16px 16px\"\n              width=\"100%\"\n              $borderRadius=\"12px\"\n              mt=\"1rem\"\n              onClick={onClaim}\n            >\n              <Trans>Claim UNI</Trans>\n            </ButtonPrimary>\n          </AutoColumn>\n        </ContentWrapper>\n      )}\n      {(attempting || claimConfirmed) && (\n        <ConfirmOrLoadingWrapper activeBG={true}>\n          <CardNoise />\n          <CardBGImageSmaller desaturate />\n          <RowBetween>\n            <div />\n            <CloseIcon onClick={wrappedOnDismiss} style={{ zIndex: 99 }} stroke=\"black\" />\n          </RowBetween>\n          <ConfirmedIcon>\n            {!claimConfirmed ? (\n              <CustomLightSpinner src={Circle} alt=\"loader\" size={'90px'} />\n            ) : (\n              <UniTokenAnimated width=\"72px\" src={tokenLogo} alt=\"UNI logo\" />\n            )}\n          </ConfirmedIcon>\n          <AutoColumn gap=\"100px\" justify={'center'}>\n            <AutoColumn gap=\"12px\" justify={'center'}>\n              <TYPE.largeHeader fontWeight={600} color=\"black\">\n                {claimConfirmed ? <Trans>Claimed</Trans> : <Trans>Claiming</Trans>}\n              </TYPE.largeHeader>\n              {!claimConfirmed && (\n                <Text fontSize={36} color={'#ff007a'} fontWeight={800}>\n                  <Trans>{unclaimedAmount?.toFixed(0, { groupSeparator: ',' } ?? '-')} UNI</Trans>\n                </Text>\n              )}\n              {parsedAddress && (\n                <TYPE.largeHeader fontWeight={600} color=\"black\">\n                  <Trans>for {shortenAddress(parsedAddress)}</Trans>\n                </TYPE.largeHeader>\n              )}\n            </AutoColumn>\n            {claimConfirmed && (\n              <>\n                <TYPE.subHeader fontWeight={500} color=\"black\">\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉{' '}\n                  </span>\n                  <Trans>Welcome to team Unicorn :) </Trans>\n                  <span role=\"img\" aria-label=\"party-hat\">\n                    🎉\n                  </span>\n                </TYPE.subHeader>\n              </>\n            )}\n            {attempting && !hash && (\n              <TYPE.subHeader color=\"black\">\n                <Trans>Confirm this transaction in your wallet</Trans>\n              </TYPE.subHeader>\n            )}\n            {attempting && hash && !claimConfirmed && chainId && hash && (\n              <ExternalLink href={getExplorerLink(chainId, hash, ExplorerDataType.TRANSACTION)} style={{ zIndex: 99 }}>\n                <Trans>View transaction on Explorer</Trans>\n              </ExternalLink>\n            )}\n          </AutoColumn>\n        </ConfirmOrLoadingWrapper>\n      )}\n    </Modal>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}