{"ast":null,"code":"import{Fraction}from'@uniswap/sdk-core';import JSBI from'jsbi';export function formatCurrencyAmount(amount,sigFigs){if(!amount){return'-';}if(JSBI.equal(amount.quotient,JSBI.BigInt(0))){return'0';}if(amount.divide(amount.decimalScale).lessThan(new Fraction(1,100000))){return'<0.00001';}return amount.toSignificant(sigFigs);}export function formatPrice(price,sigFigs){if(!price){return'-';}if(parseFloat(price.toFixed(sigFigs))<0.0001){return'<0.0001';}return price.toSignificant(sigFigs);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/formatCurrencyAmount.ts"],"names":["Fraction","JSBI","formatCurrencyAmount","amount","sigFigs","equal","quotient","BigInt","divide","decimalScale","lessThan","toSignificant","formatPrice","price","parseFloat","toFixed"],"mappings":"AAAA,OAA0CA,QAA1C,KAA0D,mBAA1D,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,MAAO,SAASC,CAAAA,oBAAT,CAA8BC,MAA9B,CAA4EC,OAA5E,CAA6F,CAClG,GAAI,CAACD,MAAL,CAAa,CACX,MAAO,GAAP,CACD,CAED,GAAIF,IAAI,CAACI,KAAL,CAAWF,MAAM,CAACG,QAAlB,CAA4BL,IAAI,CAACM,MAAL,CAAY,CAAZ,CAA5B,CAAJ,CAAiD,CAC/C,MAAO,GAAP,CACD,CAED,GAAIJ,MAAM,CAACK,MAAP,CAAcL,MAAM,CAACM,YAArB,EAAmCC,QAAnC,CAA4C,GAAIV,CAAAA,QAAJ,CAAa,CAAb,CAAgB,MAAhB,CAA5C,CAAJ,CAA0E,CACxE,MAAO,UAAP,CACD,CAED,MAAOG,CAAAA,MAAM,CAACQ,aAAP,CAAqBP,OAArB,CAAP,CACD,CAED,MAAO,SAASQ,CAAAA,WAAT,CAAqBC,KAArB,CAAmET,OAAnE,CAAoF,CACzF,GAAI,CAACS,KAAL,CAAY,CACV,MAAO,GAAP,CACD,CAED,GAAIC,UAAU,CAACD,KAAK,CAACE,OAAN,CAAcX,OAAd,CAAD,CAAV,CAAqC,MAAzC,CAAiD,CAC/C,MAAO,SAAP,CACD,CAED,MAAOS,CAAAA,KAAK,CAACF,aAAN,CAAoBP,OAApB,CAAP,CACD","sourcesContent":["import { Price, CurrencyAmount, Currency, Fraction } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nexport function formatCurrencyAmount(amount: CurrencyAmount<Currency> | undefined, sigFigs: number) {\n  if (!amount) {\n    return '-'\n  }\n\n  if (JSBI.equal(amount.quotient, JSBI.BigInt(0))) {\n    return '0'\n  }\n\n  if (amount.divide(amount.decimalScale).lessThan(new Fraction(1, 100000))) {\n    return '<0.00001'\n  }\n\n  return amount.toSignificant(sigFigs)\n}\n\nexport function formatPrice(price: Price<Currency, Currency> | undefined, sigFigs: number) {\n  if (!price) {\n    return '-'\n  }\n\n  if (parseFloat(price.toFixed(sigFigs)) < 0.0001) {\n    return '<0.0001'\n  }\n\n  return price.toSignificant(sigFigs)\n}\n"]},"metadata":{},"sourceType":"module"}