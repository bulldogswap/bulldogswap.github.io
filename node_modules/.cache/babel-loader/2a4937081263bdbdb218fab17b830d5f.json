{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import JSBI from'jsbi';import{CurrencyAmount,Fraction,Percent}from'@uniswap/sdk-core';import{Trade as V2Trade}from'@uniswap/v2-sdk';import{ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_LOW,ALLOWED_PRICE_IMPACT_MEDIUM,BLOCKED_PRICE_IMPACT_NON_EXPERT}from'../constants/misc';var THIRTY_BIPS_FEE=new Percent(JSBI.BigInt(30),JSBI.BigInt(10000));var ONE_HUNDRED_PERCENT=new Percent(JSBI.BigInt(10000),JSBI.BigInt(10000));var INPUT_FRACTION_AFTER_FEE=ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE);// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(trade){var percent;if(trade instanceof V2Trade){// for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n// e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\npercent=ONE_HUNDRED_PERCENT.subtract(trade.route.pairs.reduce(function(currentFee){return currentFee.multiply(INPUT_FRACTION_AFTER_FEE);},ONE_HUNDRED_PERCENT));}else{percent=ONE_HUNDRED_PERCENT.subtract(trade.route.pools.reduce(function(currentFee,pool){return currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(pool.fee,1000000)));},ONE_HUNDRED_PERCENT));}return new Percent(percent.numerator,percent.denominator);}// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(trade){if(trade){var realizedLPFee=computeRealizedLPFeePercent(trade);// the amount of the input that accrues to LPs\nreturn CurrencyAmount.fromRawAmount(trade.inputAmount.currency,trade.inputAmount.multiply(realizedLPFee).quotient);}return undefined;}var IMPACT_TIERS=[BLOCKED_PRICE_IMPACT_NON_EXPERT,ALLOWED_PRICE_IMPACT_HIGH,ALLOWED_PRICE_IMPACT_MEDIUM,ALLOWED_PRICE_IMPACT_LOW];export function warningSeverity(priceImpact){if(!priceImpact)return 4;var impact=IMPACT_TIERS.length;var _iterator=_createForOfIteratorHelper(IMPACT_TIERS),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var impactLevel=_step.value;if(impactLevel.lessThan(priceImpact))return impact;impact--;}}catch(err){_iterator.e(err);}finally{_iterator.f();}return 0;}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/prices.ts"],"names":["JSBI","CurrencyAmount","Fraction","Percent","Trade","V2Trade","ALLOWED_PRICE_IMPACT_HIGH","ALLOWED_PRICE_IMPACT_LOW","ALLOWED_PRICE_IMPACT_MEDIUM","BLOCKED_PRICE_IMPACT_NON_EXPERT","THIRTY_BIPS_FEE","BigInt","ONE_HUNDRED_PERCENT","INPUT_FRACTION_AFTER_FEE","subtract","computeRealizedLPFeePercent","trade","percent","route","pairs","reduce","currentFee","multiply","pools","pool","fee","numerator","denominator","computeRealizedLPFeeAmount","realizedLPFee","fromRawAmount","inputAmount","currency","quotient","undefined","IMPACT_TIERS","warningSeverity","priceImpact","impact","length","impactLevel","lessThan"],"mappings":"gNAAA,MAAOA,CAAAA,IAAP,KAAiB,MAAjB,CACA,OAAmBC,cAAnB,CAAmCC,QAAnC,CAA6CC,OAA7C,KAAuE,mBAAvE,CACA,OAASC,KAAK,GAAIC,CAAAA,OAAlB,KAAiC,iBAAjC,CAEA,OACEC,yBADF,CAEEC,wBAFF,CAGEC,2BAHF,CAIEC,+BAJF,KAKO,mBALP,CAOA,GAAMC,CAAAA,eAAe,CAAG,GAAIP,CAAAA,OAAJ,CAAYH,IAAI,CAACW,MAAL,CAAY,EAAZ,CAAZ,CAA6BX,IAAI,CAACW,MAAL,CAAY,KAAZ,CAA7B,CAAxB,CACA,GAAMC,CAAAA,mBAAmB,CAAG,GAAIT,CAAAA,OAAJ,CAAYH,IAAI,CAACW,MAAL,CAAY,KAAZ,CAAZ,CAAgCX,IAAI,CAACW,MAAL,CAAY,KAAZ,CAAhC,CAA5B,CACA,GAAME,CAAAA,wBAAwB,CAAGD,mBAAmB,CAACE,QAApB,CAA6BJ,eAA7B,CAAjC,CAEA;AACA,MAAO,SAASK,CAAAA,2BAAT,CACLC,KADK,CAEI,CACT,GAAIC,CAAAA,OAAJ,CACA,GAAID,KAAK,WAAYX,CAAAA,OAArB,CAA8B,CAC5B;AACA;AACAY,OAAO,CAAGL,mBAAmB,CAACE,QAApB,CACRE,KAAK,CAACE,KAAN,CAAYC,KAAZ,CAAkBC,MAAlB,CACE,SAACC,UAAD,QAAkCA,CAAAA,UAAU,CAACC,QAAX,CAAoBT,wBAApB,CAAlC,EADF,CAEED,mBAFF,CADQ,CAAV,CAMD,CATD,IASO,CACLK,OAAO,CAAGL,mBAAmB,CAACE,QAApB,CACRE,KAAK,CAACE,KAAN,CAAYK,KAAZ,CAAkBH,MAAlB,CACE,SAACC,UAAD,CAAsBG,IAAtB,QACEH,CAAAA,UAAU,CAACC,QAAX,CAAoBV,mBAAmB,CAACE,QAApB,CAA6B,GAAIZ,CAAAA,QAAJ,CAAasB,IAAI,CAACC,GAAlB,CAAuB,OAAvB,CAA7B,CAApB,CADF,EADF,CAGEb,mBAHF,CADQ,CAAV,CAOD,CAED,MAAO,IAAIT,CAAAA,OAAJ,CAAYc,OAAO,CAACS,SAApB,CAA+BT,OAAO,CAACU,WAAvC,CAAP,CACD,CAED;AACA,MAAO,SAASC,CAAAA,0BAAT,CACLZ,KADK,CAEiC,CACtC,GAAIA,KAAJ,CAAW,CACT,GAAMa,CAAAA,aAAa,CAAGd,2BAA2B,CAACC,KAAD,CAAjD,CAEA;AACA,MAAOf,CAAAA,cAAc,CAAC6B,aAAf,CAA6Bd,KAAK,CAACe,WAAN,CAAkBC,QAA/C,CAAyDhB,KAAK,CAACe,WAAN,CAAkBT,QAAlB,CAA2BO,aAA3B,EAA0CI,QAAnG,CAAP,CACD,CAED,MAAOC,CAAAA,SAAP,CACD,CAED,GAAMC,CAAAA,YAAY,CAAG,CACnB1B,+BADmB,CAEnBH,yBAFmB,CAGnBE,2BAHmB,CAInBD,wBAJmB,CAArB,CAQA,MAAO,SAAS6B,CAAAA,eAAT,CAAyBC,WAAzB,CAA4E,CACjF,GAAI,CAACA,WAAL,CAAkB,MAAO,EAAP,CAClB,GAAIC,CAAAA,MAAuB,CAAGH,YAAY,CAACI,MAA3C,CAFiF,yCAGvDJ,YAHuD,YAGjF,+CAAwC,IAA7BK,CAAAA,WAA6B,aACtC,GAAIA,WAAW,CAACC,QAAZ,CAAqBJ,WAArB,CAAJ,CAAuC,MAAOC,CAAAA,MAAP,CACvCA,MAAM,GACP,CANgF,qDAOjF,MAAO,EAAP,CACD","sourcesContent":["import JSBI from 'jsbi'\nimport { Currency, CurrencyAmount, Fraction, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade } from '@uniswap/v3-sdk'\nimport {\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_LOW,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n} from '../constants/misc'\n\nconst THIRTY_BIPS_FEE = new Percent(JSBI.BigInt(30), JSBI.BigInt(10000))\nconst ONE_HUNDRED_PERCENT = new Percent(JSBI.BigInt(10000), JSBI.BigInt(10000))\nconst INPUT_FRACTION_AFTER_FEE = ONE_HUNDRED_PERCENT.subtract(THIRTY_BIPS_FEE)\n\n// computes realized lp fee as a percent\nexport function computeRealizedLPFeePercent(\n  trade: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType>\n): Percent {\n  let percent: Percent\n  if (trade instanceof V2Trade) {\n    // for each hop in our trade, take away the x*y=k price impact from 0.3% fees\n    // e.g. for 3 tokens/2 hops: 1 - ((1 - .03) * (1-.03))\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.route.pairs.reduce<Percent>(\n        (currentFee: Percent): Percent => currentFee.multiply(INPUT_FRACTION_AFTER_FEE),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  } else {\n    percent = ONE_HUNDRED_PERCENT.subtract(\n      trade.route.pools.reduce<Percent>(\n        (currentFee: Percent, pool): Percent =>\n          currentFee.multiply(ONE_HUNDRED_PERCENT.subtract(new Fraction(pool.fee, 1_000_000))),\n        ONE_HUNDRED_PERCENT\n      )\n    )\n  }\n\n  return new Percent(percent.numerator, percent.denominator)\n}\n\n// computes price breakdown for the trade\nexport function computeRealizedLPFeeAmount(\n  trade?: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | null\n): CurrencyAmount<Currency> | undefined {\n  if (trade) {\n    const realizedLPFee = computeRealizedLPFeePercent(trade)\n\n    // the amount of the input that accrues to LPs\n    return CurrencyAmount.fromRawAmount(trade.inputAmount.currency, trade.inputAmount.multiply(realizedLPFee).quotient)\n  }\n\n  return undefined\n}\n\nconst IMPACT_TIERS = [\n  BLOCKED_PRICE_IMPACT_NON_EXPERT,\n  ALLOWED_PRICE_IMPACT_HIGH,\n  ALLOWED_PRICE_IMPACT_MEDIUM,\n  ALLOWED_PRICE_IMPACT_LOW,\n]\n\ntype WarningSeverity = 0 | 1 | 2 | 3 | 4\nexport function warningSeverity(priceImpact: Percent | undefined): WarningSeverity {\n  if (!priceImpact) return 4\n  let impact: WarningSeverity = IMPACT_TIERS.length as WarningSeverity\n  for (const impactLevel of IMPACT_TIERS) {\n    if (impactLevel.lessThan(priceImpact)) return impact\n    impact--\n  }\n  return 0\n}\n"]},"metadata":{},"sourceType":"module"}