{"ast":null,"code":"import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{BigNumber}from'@ethersproject/bignumber';import{useEffect,useMemo}from'react';import{useAppDispatch,useAppSelector}from'state/hooks';import{useActiveWeb3React}from'../../hooks/web3';import{useBlockNumber}from'../application/hooks';import{addMulticallListeners,removeMulticallListeners}from'./actions';import{parseCallKey,toCallKey}from'./utils';function isMethodArg(x){return BigNumber.isBigNumber(x)||['string','number'].indexOf(typeof x)!==-1;}function isValidMethodArgs(x){return x===undefined||Array.isArray(x)&&x.every(function(xi){return isMethodArg(xi)||Array.isArray(xi)&&xi.every(isMethodArg);});}var INVALID_RESULT={valid:false,blockNumber:undefined,data:undefined};// use this options object\nexport var NEVER_RELOAD={blocksPerFetch:Infinity};// the lowest level call for subscribing to contract data\nfunction useCallsData(calls){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{blocksPerFetch:1},blocksPerFetch=_ref.blocksPerFetch;var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var callResults=useAppSelector(function(state){return state.multicall.callResults;});var dispatch=useAppDispatch();var serializedCallKeys=useMemo(function(){var _calls$filter$map$sor,_calls$filter,_calls$filter$map;return JSON.stringify((_calls$filter$map$sor=calls===null||calls===void 0?void 0:(_calls$filter=calls.filter(function(c){return Boolean(c);}))===null||_calls$filter===void 0?void 0:(_calls$filter$map=_calls$filter.map(toCallKey))===null||_calls$filter$map===void 0?void 0:_calls$filter$map.sort())!==null&&_calls$filter$map$sor!==void 0?_calls$filter$map$sor:[]);},[calls]);// update listeners when there is an actual change that persists for at least 100ms\nuseEffect(function(){var callKeys=JSON.parse(serializedCallKeys);if(!chainId||callKeys.length===0)return undefined;var calls=callKeys.map(function(key){return parseCallKey(key);});dispatch(addMulticallListeners({chainId:chainId,calls:calls,options:{blocksPerFetch:blocksPerFetch}}));return function(){dispatch(removeMulticallListeners({chainId:chainId,calls:calls,options:{blocksPerFetch:blocksPerFetch}}));};},[chainId,dispatch,blocksPerFetch,serializedCallKeys]);return useMemo(function(){return calls.map(function(call){var _callResults$chainId;if(!chainId||!call)return INVALID_RESULT;var result=(_callResults$chainId=callResults[chainId])===null||_callResults$chainId===void 0?void 0:_callResults$chainId[toCallKey(call)];var data;if((result===null||result===void 0?void 0:result.data)&&(result===null||result===void 0?void 0:result.data)!=='0x'){data=result.data;}return{valid:true,data:data,blockNumber:result===null||result===void 0?void 0:result.blockNumber};});},[callResults,calls,chainId]);}var INVALID_CALL_STATE={valid:false,result:undefined,loading:false,syncing:false,error:false};var LOADING_CALL_STATE={valid:true,result:undefined,loading:true,syncing:true,error:false};function toCallState(callResult,contractInterface,fragment,latestBlockNumber){if(!callResult)return INVALID_CALL_STATE;var valid=callResult.valid,data=callResult.data,blockNumber=callResult.blockNumber;if(!valid)return INVALID_CALL_STATE;if(valid&&!blockNumber)return LOADING_CALL_STATE;if(!contractInterface||!fragment||!latestBlockNumber)return LOADING_CALL_STATE;var success=data&&data.length>2;var syncing=(blockNumber!==null&&blockNumber!==void 0?blockNumber:0)<latestBlockNumber;var result=undefined;if(success&&data){try{result=contractInterface.decodeFunctionResult(fragment,data);}catch(error){console.debug('Result data parsing failed',fragment,data);return{valid:true,loading:false,error:true,syncing:syncing,result:result};}}return{valid:true,loading:false,syncing:syncing,result:result,error:!success};}export function useSingleContractMultipleData(contract,methodName,callInputs){var options=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};var fragment=useMemo(function(){var _contract$interface;return contract===null||contract===void 0?void 0:(_contract$interface=contract.interface)===null||_contract$interface===void 0?void 0:_contract$interface.getFunction(methodName);},[contract,methodName]);var blocksPerFetch=options===null||options===void 0?void 0:options.blocksPerFetch;var gasRequired=options===null||options===void 0?void 0:options.gasRequired;var calls=useMemo(function(){return contract&&fragment&&(callInputs===null||callInputs===void 0?void 0:callInputs.length)>0&&callInputs.every(function(inputs){return isValidMethodArgs(inputs);})?callInputs.map(function(inputs){return _objectSpread({address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)},gasRequired?{gasRequired:gasRequired}:{});}):[];},[contract,fragment,callInputs,gasRequired]);var results=useCallsData(calls,blocksPerFetch?{blocksPerFetch:blocksPerFetch}:undefined);var latestBlockNumber=useBlockNumber();return useMemo(function(){return results.map(function(result){return toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber);});},[fragment,contract,results,latestBlockNumber]);}export function useMultipleContractSingleData(addresses,contractInterface,methodName,callInputs,options){var fragment=useMemo(function(){return contractInterface.getFunction(methodName);},[contractInterface,methodName]);var blocksPerFetch=options===null||options===void 0?void 0:options.blocksPerFetch;var gasRequired=options===null||options===void 0?void 0:options.gasRequired;var callData=useMemo(function(){return fragment&&isValidMethodArgs(callInputs)?contractInterface.encodeFunctionData(fragment,callInputs):undefined;},[callInputs,contractInterface,fragment]);var calls=useMemo(function(){return fragment&&addresses&&addresses.length>0&&callData?addresses.map(function(address){return address&&callData?_objectSpread({address:address,callData:callData},gasRequired?{gasRequired:gasRequired}:{}):undefined;}):[];},[addresses,callData,fragment,gasRequired]);var results=useCallsData(calls,blocksPerFetch?{blocksPerFetch:blocksPerFetch}:undefined);var latestBlockNumber=useBlockNumber();return useMemo(function(){return results.map(function(result){return toCallState(result,contractInterface,fragment,latestBlockNumber);});},[fragment,results,contractInterface,latestBlockNumber]);}export function useSingleCallResult(contract,methodName,inputs,options){var fragment=useMemo(function(){var _contract$interface2;return contract===null||contract===void 0?void 0:(_contract$interface2=contract.interface)===null||_contract$interface2===void 0?void 0:_contract$interface2.getFunction(methodName);},[contract,methodName]);var blocksPerFetch=options===null||options===void 0?void 0:options.blocksPerFetch;var gasRequired=options===null||options===void 0?void 0:options.gasRequired;var calls=useMemo(function(){return contract&&fragment&&isValidMethodArgs(inputs)?[_objectSpread({address:contract.address,callData:contract.interface.encodeFunctionData(fragment,inputs)},gasRequired?{gasRequired:gasRequired}:{})]:[];},[contract,fragment,inputs,gasRequired]);var result=useCallsData(calls,blocksPerFetch?{blocksPerFetch:blocksPerFetch}:undefined)[0];var latestBlockNumber=useBlockNumber();return useMemo(function(){return toCallState(result,contract===null||contract===void 0?void 0:contract.interface,fragment,latestBlockNumber);},[result,contract,fragment,latestBlockNumber]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/multicall/hooks.ts"],"names":["BigNumber","useEffect","useMemo","useAppDispatch","useAppSelector","useActiveWeb3React","useBlockNumber","addMulticallListeners","removeMulticallListeners","parseCallKey","toCallKey","isMethodArg","x","isBigNumber","indexOf","isValidMethodArgs","undefined","Array","isArray","every","xi","INVALID_RESULT","valid","blockNumber","data","NEVER_RELOAD","blocksPerFetch","Infinity","useCallsData","calls","chainId","callResults","state","multicall","dispatch","serializedCallKeys","JSON","stringify","filter","c","Boolean","map","sort","callKeys","parse","length","key","options","call","result","INVALID_CALL_STATE","loading","syncing","error","LOADING_CALL_STATE","toCallState","callResult","contractInterface","fragment","latestBlockNumber","success","decodeFunctionResult","console","debug","useSingleContractMultipleData","contract","methodName","callInputs","interface","getFunction","gasRequired","inputs","address","callData","encodeFunctionData","results","useMultipleContractSingleData","addresses","useSingleCallResult"],"mappings":"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","sourcesContent":["import { FunctionFragment, Interface } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport { useEffect, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useBlockNumber } from '../application/hooks'\nimport { addMulticallListeners, ListenerOptions, removeMulticallListeners } from './actions'\nimport { Call, parseCallKey, toCallKey } from './utils'\n\nexport interface Result extends ReadonlyArray<any> {\n  readonly [key: string]: any\n}\n\ntype MethodArg = string | number | BigNumber\ntype MethodArgs = Array<MethodArg | MethodArg[]>\n\ntype OptionalMethodInputs = Array<MethodArg | MethodArg[] | undefined> | undefined\n\nfunction isMethodArg(x: unknown): x is MethodArg {\n  return BigNumber.isBigNumber(x) || ['string', 'number'].indexOf(typeof x) !== -1\n}\n\nfunction isValidMethodArgs(x: unknown): x is MethodArgs | undefined {\n  return (\n    x === undefined ||\n    (Array.isArray(x) && x.every((xi) => isMethodArg(xi) || (Array.isArray(xi) && xi.every(isMethodArg))))\n  )\n}\n\ninterface CallResult {\n  readonly valid: boolean\n  readonly data: string | undefined\n  readonly blockNumber: number | undefined\n}\n\nconst INVALID_RESULT: CallResult = { valid: false, blockNumber: undefined, data: undefined }\n\n// use this options object\nexport const NEVER_RELOAD: ListenerOptions = {\n  blocksPerFetch: Infinity,\n}\n\n// the lowest level call for subscribing to contract data\nfunction useCallsData(\n  calls: (Call | undefined)[],\n  { blocksPerFetch }: ListenerOptions = { blocksPerFetch: 1 }\n): CallResult[] {\n  const { chainId } = useActiveWeb3React()\n  const callResults = useAppSelector((state) => state.multicall.callResults)\n  const dispatch = useAppDispatch()\n\n  const serializedCallKeys: string = useMemo(\n    () =>\n      JSON.stringify(\n        calls\n          ?.filter((c): c is Call => Boolean(c))\n          ?.map(toCallKey)\n          ?.sort() ?? []\n      ),\n    [calls]\n  )\n\n  // update listeners when there is an actual change that persists for at least 100ms\n  useEffect(() => {\n    const callKeys: string[] = JSON.parse(serializedCallKeys)\n    if (!chainId || callKeys.length === 0) return undefined\n    const calls = callKeys.map((key) => parseCallKey(key))\n    dispatch(\n      addMulticallListeners({\n        chainId,\n        calls,\n        options: { blocksPerFetch },\n      })\n    )\n\n    return () => {\n      dispatch(\n        removeMulticallListeners({\n          chainId,\n          calls,\n          options: { blocksPerFetch },\n        })\n      )\n    }\n  }, [chainId, dispatch, blocksPerFetch, serializedCallKeys])\n\n  return useMemo(\n    () =>\n      calls.map<CallResult>((call) => {\n        if (!chainId || !call) return INVALID_RESULT\n\n        const result = callResults[chainId]?.[toCallKey(call)]\n        let data\n        if (result?.data && result?.data !== '0x') {\n          data = result.data\n        }\n\n        return { valid: true, data, blockNumber: result?.blockNumber }\n      }),\n    [callResults, calls, chainId]\n  )\n}\n\ninterface CallState {\n  readonly valid: boolean\n  // the result, or undefined if loading or errored/no data\n  readonly result: Result | undefined\n  // true if the result has never been fetched\n  readonly loading: boolean\n  // true if the result is not for the latest block\n  readonly syncing: boolean\n  // true if the call was made and is synced, but the return data is invalid\n  readonly error: boolean\n}\n\nconst INVALID_CALL_STATE: CallState = { valid: false, result: undefined, loading: false, syncing: false, error: false }\nconst LOADING_CALL_STATE: CallState = { valid: true, result: undefined, loading: true, syncing: true, error: false }\n\nfunction toCallState(\n  callResult: CallResult | undefined,\n  contractInterface: Interface | undefined,\n  fragment: FunctionFragment | undefined,\n  latestBlockNumber: number | undefined\n): CallState {\n  if (!callResult) return INVALID_CALL_STATE\n  const { valid, data, blockNumber } = callResult\n  if (!valid) return INVALID_CALL_STATE\n  if (valid && !blockNumber) return LOADING_CALL_STATE\n  if (!contractInterface || !fragment || !latestBlockNumber) return LOADING_CALL_STATE\n  const success = data && data.length > 2\n  const syncing = (blockNumber ?? 0) < latestBlockNumber\n  let result: Result | undefined = undefined\n  if (success && data) {\n    try {\n      result = contractInterface.decodeFunctionResult(fragment, data)\n    } catch (error) {\n      console.debug('Result data parsing failed', fragment, data)\n      return {\n        valid: true,\n        loading: false,\n        error: true,\n        syncing,\n        result,\n      }\n    }\n  }\n  return {\n    valid: true,\n    loading: false,\n    syncing,\n    result: result,\n    error: !success,\n  }\n}\n\nexport function useSingleContractMultipleData(\n  contract: Contract | null | undefined,\n  methodName: string,\n  callInputs: OptionalMethodInputs[],\n  options: Partial<ListenerOptions> & { gasRequired?: number } = {}\n): CallState[] {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const blocksPerFetch = options?.blocksPerFetch\n  const gasRequired = options?.gasRequired\n\n  const calls = useMemo(\n    () =>\n      contract && fragment && callInputs?.length > 0 && callInputs.every((inputs) => isValidMethodArgs(inputs))\n        ? callInputs.map<Call>((inputs) => {\n            return {\n              address: contract.address,\n              callData: contract.interface.encodeFunctionData(fragment, inputs),\n              ...(gasRequired ? { gasRequired } : {}),\n            }\n          })\n        : [],\n    [contract, fragment, callInputs, gasRequired]\n  )\n\n  const results = useCallsData(calls, blocksPerFetch ? { blocksPerFetch } : undefined)\n\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contract?.interface, fragment, latestBlockNumber))\n  }, [fragment, contract, results, latestBlockNumber])\n}\n\nexport function useMultipleContractSingleData(\n  addresses: (string | undefined)[],\n  contractInterface: Interface,\n  methodName: string,\n  callInputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptions> & { gasRequired?: number }\n): CallState[] {\n  const fragment = useMemo(() => contractInterface.getFunction(methodName), [contractInterface, methodName])\n\n  const blocksPerFetch = options?.blocksPerFetch\n  const gasRequired = options?.gasRequired\n\n  const callData: string | undefined = useMemo(\n    () =>\n      fragment && isValidMethodArgs(callInputs)\n        ? contractInterface.encodeFunctionData(fragment, callInputs)\n        : undefined,\n    [callInputs, contractInterface, fragment]\n  )\n\n  const calls = useMemo(\n    () =>\n      fragment && addresses && addresses.length > 0 && callData\n        ? addresses.map<Call | undefined>((address) => {\n            return address && callData\n              ? {\n                  address,\n                  callData,\n                  ...(gasRequired ? { gasRequired } : {}),\n                }\n              : undefined\n          })\n        : [],\n    [addresses, callData, fragment, gasRequired]\n  )\n\n  const results = useCallsData(calls, blocksPerFetch ? { blocksPerFetch } : undefined)\n\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return results.map((result) => toCallState(result, contractInterface, fragment, latestBlockNumber))\n  }, [fragment, results, contractInterface, latestBlockNumber])\n}\n\nexport function useSingleCallResult(\n  contract: Contract | null | undefined,\n  methodName: string,\n  inputs?: OptionalMethodInputs,\n  options?: Partial<ListenerOptions> & { gasRequired?: number }\n): CallState {\n  const fragment = useMemo(() => contract?.interface?.getFunction(methodName), [contract, methodName])\n\n  const blocksPerFetch = options?.blocksPerFetch\n  const gasRequired = options?.gasRequired\n\n  const calls = useMemo<Call[]>(() => {\n    return contract && fragment && isValidMethodArgs(inputs)\n      ? [\n          {\n            address: contract.address,\n            callData: contract.interface.encodeFunctionData(fragment, inputs),\n            ...(gasRequired ? { gasRequired } : {}),\n          },\n        ]\n      : []\n  }, [contract, fragment, inputs, gasRequired])\n\n  const result = useCallsData(calls, blocksPerFetch ? { blocksPerFetch } : undefined)[0]\n  const latestBlockNumber = useBlockNumber()\n\n  return useMemo(() => {\n    return toCallState(result, contract?.interface, fragment, latestBlockNumber)\n  }, [result, contract, fragment, latestBlockNumber])\n}\n"]},"metadata":{},"sourceType":"module"}