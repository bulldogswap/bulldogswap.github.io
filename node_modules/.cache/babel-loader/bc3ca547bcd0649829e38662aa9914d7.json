{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _RETRY_OPTIONS_BY_CHA;import{useCallback,useEffect,useMemo}from'react';import{useAppDispatch,useAppSelector}from'state/hooks';import{SupportedChainId}from'../../constants/chains';import{useActiveWeb3React}from'../../hooks/web3';import{retry,RetryableError}from'../../utils/retry';import{updateBlockNumber}from'../application/actions';import{useAddPopup,useBlockNumber}from'../application/hooks';import{checkedTransaction,finalizeTransaction}from'./actions';export function shouldCheck(lastBlockNumber,tx){if(tx.receipt)return false;if(!tx.lastCheckedBlockNumber)return true;var blocksSinceCheck=lastBlockNumber-tx.lastCheckedBlockNumber;if(blocksSinceCheck<1)return false;var minutesPending=(new Date().getTime()-tx.addedTime)/1000/60;if(minutesPending>60){// every 10 blocks if pending for longer than an hour\nreturn blocksSinceCheck>9;}else if(minutesPending>5){// every 3 blocks if pending more than 5 minutes\nreturn blocksSinceCheck>2;}else{// otherwise every block\nreturn true;}}var RETRY_OPTIONS_BY_CHAIN_ID=(_RETRY_OPTIONS_BY_CHA={},_defineProperty(_RETRY_OPTIONS_BY_CHA,SupportedChainId.ARBITRUM_ONE,{n:10,minWait:250,maxWait:1000}),_defineProperty(_RETRY_OPTIONS_BY_CHA,SupportedChainId.ARBITRUM_RINKEBY,{n:10,minWait:250,maxWait:1000}),_defineProperty(_RETRY_OPTIONS_BY_CHA,SupportedChainId.OPTIMISTIC_KOVAN,{n:10,minWait:250,maxWait:1000}),_defineProperty(_RETRY_OPTIONS_BY_CHA,SupportedChainId.OPTIMISM,{n:10,minWait:250,maxWait:1000}),_RETRY_OPTIONS_BY_CHA);var DEFAULT_RETRY_OPTIONS={n:1,minWait:0,maxWait:0};export default function Updater(){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId,library=_useActiveWeb3React.library;var lastBlockNumber=useBlockNumber();var dispatch=useAppDispatch();var state=useAppSelector(function(state){return state.transactions;});var transactions=useMemo(function(){var _state$chainId;return chainId?(_state$chainId=state[chainId])!==null&&_state$chainId!==void 0?_state$chainId:{}:{};},[chainId,state]);// show popup on confirm\nvar addPopup=useAddPopup();var getReceipt=useCallback(function(hash){var _RETRY_OPTIONS_BY_CHA2;if(!library||!chainId)throw new Error('No library or chainId');var retryOptions=(_RETRY_OPTIONS_BY_CHA2=RETRY_OPTIONS_BY_CHAIN_ID[chainId])!==null&&_RETRY_OPTIONS_BY_CHA2!==void 0?_RETRY_OPTIONS_BY_CHA2:DEFAULT_RETRY_OPTIONS;return retry(function(){return library.getTransactionReceipt(hash).then(function(receipt){if(receipt===null){console.debug('Retrying for hash',hash);throw new RetryableError();}return receipt;});},retryOptions);},[chainId,library]);useEffect(function(){if(!chainId||!library||!lastBlockNumber)return;var cancels=Object.keys(transactions).filter(function(hash){return shouldCheck(lastBlockNumber,transactions[hash]);}).map(function(hash){var _getReceipt=getReceipt(hash),promise=_getReceipt.promise,cancel=_getReceipt.cancel;promise.then(function(receipt){if(receipt){var _transactions$hash;dispatch(finalizeTransaction({chainId:chainId,hash:hash,receipt:{blockHash:receipt.blockHash,blockNumber:receipt.blockNumber,contractAddress:receipt.contractAddress,from:receipt.from,status:receipt.status,to:receipt.to,transactionHash:receipt.transactionHash,transactionIndex:receipt.transactionIndex}}));addPopup({txn:{hash:hash,success:receipt.status===1,summary:(_transactions$hash=transactions[hash])===null||_transactions$hash===void 0?void 0:_transactions$hash.summary}},hash);// the receipt was fetched before the block, fast forward to that block to trigger balance updates\nif(receipt.blockNumber>lastBlockNumber){dispatch(updateBlockNumber({chainId:chainId,blockNumber:receipt.blockNumber}));}}else{dispatch(checkedTransaction({chainId:chainId,hash:hash,blockNumber:lastBlockNumber}));}}).catch(function(error){if(!error.isCancelledError){console.error(\"Failed to check transaction hash: \".concat(hash),error);}});return cancel;});return function(){cancels.forEach(function(cancel){return cancel();});};},[chainId,library,transactions,lastBlockNumber,dispatch,addPopup,getReceipt]);return null;}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/transactions/updater.tsx"],"names":["useCallback","useEffect","useMemo","useAppDispatch","useAppSelector","SupportedChainId","useActiveWeb3React","retry","RetryableError","updateBlockNumber","useAddPopup","useBlockNumber","checkedTransaction","finalizeTransaction","shouldCheck","lastBlockNumber","tx","receipt","lastCheckedBlockNumber","blocksSinceCheck","minutesPending","Date","getTime","addedTime","RETRY_OPTIONS_BY_CHAIN_ID","ARBITRUM_ONE","n","minWait","maxWait","ARBITRUM_RINKEBY","OPTIMISTIC_KOVAN","OPTIMISM","DEFAULT_RETRY_OPTIONS","Updater","chainId","library","dispatch","state","transactions","addPopup","getReceipt","hash","Error","retryOptions","getTransactionReceipt","then","console","debug","cancels","Object","keys","filter","map","promise","cancel","blockHash","blockNumber","contractAddress","from","status","to","transactionHash","transactionIndex","txn","success","summary","catch","error","isCancelledError","forEach"],"mappings":"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","sourcesContent":["import { useCallback, useEffect, useMemo } from 'react'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\nimport { SupportedChainId } from '../../constants/chains'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { retry, RetryableError, RetryOptions } from '../../utils/retry'\nimport { updateBlockNumber } from '../application/actions'\nimport { useAddPopup, useBlockNumber } from '../application/hooks'\nimport { checkedTransaction, finalizeTransaction } from './actions'\n\ninterface TxInterface {\n  addedTime: number\n  receipt?: Record<string, any>\n  lastCheckedBlockNumber?: number\n}\n\nexport function shouldCheck(lastBlockNumber: number, tx: TxInterface): boolean {\n  if (tx.receipt) return false\n  if (!tx.lastCheckedBlockNumber) return true\n  const blocksSinceCheck = lastBlockNumber - tx.lastCheckedBlockNumber\n  if (blocksSinceCheck < 1) return false\n  const minutesPending = (new Date().getTime() - tx.addedTime) / 1000 / 60\n  if (minutesPending > 60) {\n    // every 10 blocks if pending for longer than an hour\n    return blocksSinceCheck > 9\n  } else if (minutesPending > 5) {\n    // every 3 blocks if pending more than 5 minutes\n    return blocksSinceCheck > 2\n  } else {\n    // otherwise every block\n    return true\n  }\n}\n\nconst RETRY_OPTIONS_BY_CHAIN_ID: { [chainId: number]: RetryOptions } = {\n  [SupportedChainId.ARBITRUM_ONE]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.ARBITRUM_RINKEBY]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISTIC_KOVAN]: { n: 10, minWait: 250, maxWait: 1000 },\n  [SupportedChainId.OPTIMISM]: { n: 10, minWait: 250, maxWait: 1000 },\n}\nconst DEFAULT_RETRY_OPTIONS: RetryOptions = { n: 1, minWait: 0, maxWait: 0 }\n\nexport default function Updater(): null {\n  const { chainId, library } = useActiveWeb3React()\n\n  const lastBlockNumber = useBlockNumber()\n\n  const dispatch = useAppDispatch()\n  const state = useAppSelector((state) => state.transactions)\n\n  const transactions = useMemo(() => (chainId ? state[chainId] ?? {} : {}), [chainId, state])\n\n  // show popup on confirm\n  const addPopup = useAddPopup()\n\n  const getReceipt = useCallback(\n    (hash: string) => {\n      if (!library || !chainId) throw new Error('No library or chainId')\n      const retryOptions = RETRY_OPTIONS_BY_CHAIN_ID[chainId] ?? DEFAULT_RETRY_OPTIONS\n      return retry(\n        () =>\n          library.getTransactionReceipt(hash).then((receipt) => {\n            if (receipt === null) {\n              console.debug('Retrying for hash', hash)\n              throw new RetryableError()\n            }\n            return receipt\n          }),\n        retryOptions\n      )\n    },\n    [chainId, library]\n  )\n\n  useEffect(() => {\n    if (!chainId || !library || !lastBlockNumber) return\n\n    const cancels = Object.keys(transactions)\n      .filter((hash) => shouldCheck(lastBlockNumber, transactions[hash]))\n      .map((hash) => {\n        const { promise, cancel } = getReceipt(hash)\n        promise\n          .then((receipt) => {\n            if (receipt) {\n              dispatch(\n                finalizeTransaction({\n                  chainId,\n                  hash,\n                  receipt: {\n                    blockHash: receipt.blockHash,\n                    blockNumber: receipt.blockNumber,\n                    contractAddress: receipt.contractAddress,\n                    from: receipt.from,\n                    status: receipt.status,\n                    to: receipt.to,\n                    transactionHash: receipt.transactionHash,\n                    transactionIndex: receipt.transactionIndex,\n                  },\n                })\n              )\n\n              addPopup(\n                {\n                  txn: {\n                    hash,\n                    success: receipt.status === 1,\n                    summary: transactions[hash]?.summary,\n                  },\n                },\n                hash\n              )\n\n              // the receipt was fetched before the block, fast forward to that block to trigger balance updates\n              if (receipt.blockNumber > lastBlockNumber) {\n                dispatch(updateBlockNumber({ chainId, blockNumber: receipt.blockNumber }))\n              }\n            } else {\n              dispatch(checkedTransaction({ chainId, hash, blockNumber: lastBlockNumber }))\n            }\n          })\n          .catch((error) => {\n            if (!error.isCancelledError) {\n              console.error(`Failed to check transaction hash: ${hash}`, error)\n            }\n          })\n        return cancel\n      })\n\n    return () => {\n      cancels.forEach((cancel) => cancel())\n    }\n  }, [chainId, library, transactions, lastBlockNumber, dispatch, addPopup, getReceipt])\n\n  return null\n}\n"]},"metadata":{},"sourceType":"module"}