{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _QUOTE_GAS_OVERRIDES;import{CurrencyAmount,TradeType}from'@uniswap/sdk-core';import{encodeRouteToPath,Trade}from'@uniswap/v3-sdk';import{SupportedChainId}from'constants/chains';import{useMemo}from'react';import{useSingleContractMultipleData}from'../state/multicall/hooks';import{useAllV3Routes}from'./useAllV3Routes';import{useV3Quoter}from'./useContract';import{useActiveWeb3React}from'./web3';export var V3TradeState;(function(V3TradeState){V3TradeState[V3TradeState[\"LOADING\"]=0]=\"LOADING\";V3TradeState[V3TradeState[\"INVALID\"]=1]=\"INVALID\";V3TradeState[V3TradeState[\"NO_ROUTE_FOUND\"]=2]=\"NO_ROUTE_FOUND\";V3TradeState[V3TradeState[\"VALID\"]=3]=\"VALID\";V3TradeState[V3TradeState[\"SYNCING\"]=4]=\"SYNCING\";})(V3TradeState||(V3TradeState={}));var QUOTE_GAS_OVERRIDES=(_QUOTE_GAS_OVERRIDES={},_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.OPTIMISM,6000000),_defineProperty(_QUOTE_GAS_OVERRIDES,SupportedChainId.OPTIMISTIC_KOVAN,6000000),_QUOTE_GAS_OVERRIDES);var DEFAULT_GAS_QUOTE=2000000;/**\n * Returns the best v3 trade for a desired exact input swap\n * @param amountIn the amount to swap in\n * @param currencyOut the desired output currency\n */export function useBestV3TradeExactIn(amountIn,currencyOut){var _QUOTE_GAS_OVERRIDES$;var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var quoter=useV3Quoter();var _useAllV3Routes=useAllV3Routes(amountIn===null||amountIn===void 0?void 0:amountIn.currency,currencyOut),routes=_useAllV3Routes.routes,routesLoading=_useAllV3Routes.loading;var quoteExactInInputs=useMemo(function(){return routes.map(function(route){return[encodeRouteToPath(route,false),amountIn?\"0x\".concat(amountIn.quotient.toString(16)):undefined];});},[amountIn,routes]);var quotesResults=useSingleContractMultipleData(quoter,'quoteExactInput',quoteExactInInputs,{gasRequired:chainId?(_QUOTE_GAS_OVERRIDES$=QUOTE_GAS_OVERRIDES[chainId])!==null&&_QUOTE_GAS_OVERRIDES$!==void 0?_QUOTE_GAS_OVERRIDES$:DEFAULT_GAS_QUOTE:undefined});return useMemo(function(){if(!amountIn||!currencyOut||// skip when tokens are the same\namountIn.currency.equals(currencyOut)){return{state:V3TradeState.INVALID,trade:null};}if(routesLoading||quotesResults.some(function(_ref){var loading=_ref.loading;return loading;})){return{state:V3TradeState.LOADING,trade:null};}var _quotesResults$reduce=quotesResults.reduce(function(currentBest,_ref2,i){var result=_ref2.result;if(!result)return currentBest;if(currentBest.amountOut===null){return{bestRoute:routes[i],amountOut:result.amountOut};}else if(currentBest.amountOut.lt(result.amountOut)){return{bestRoute:routes[i],amountOut:result.amountOut};}return currentBest;},{bestRoute:null,amountOut:null}),bestRoute=_quotesResults$reduce.bestRoute,amountOut=_quotesResults$reduce.amountOut;if(!bestRoute||!amountOut){return{state:V3TradeState.NO_ROUTE_FOUND,trade:null};}var isSyncing=quotesResults.some(function(_ref3){var syncing=_ref3.syncing;return syncing;});return{state:isSyncing?V3TradeState.SYNCING:V3TradeState.VALID,trade:Trade.createUncheckedTrade({route:bestRoute,tradeType:TradeType.EXACT_INPUT,inputAmount:amountIn,outputAmount:CurrencyAmount.fromRawAmount(currencyOut,amountOut.toString())})};},[amountIn,currencyOut,quotesResults,routes,routesLoading]);}/**\n * Returns the best v3 trade for a desired exact output swap\n * @param currencyIn the desired input currency\n * @param amountOut the amount to swap out\n */export function useBestV3TradeExactOut(currencyIn,amountOut){var _QUOTE_GAS_OVERRIDES$2;var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var quoter=useV3Quoter();var _useAllV3Routes2=useAllV3Routes(currencyIn,amountOut===null||amountOut===void 0?void 0:amountOut.currency),routes=_useAllV3Routes2.routes,routesLoading=_useAllV3Routes2.loading;var quoteExactOutInputs=useMemo(function(){return routes.map(function(route){return[encodeRouteToPath(route,true),amountOut?\"0x\".concat(amountOut.quotient.toString(16)):undefined];});},[amountOut,routes]);var quotesResults=useSingleContractMultipleData(quoter,'quoteExactOutput',quoteExactOutInputs,{gasRequired:chainId?(_QUOTE_GAS_OVERRIDES$2=QUOTE_GAS_OVERRIDES[chainId])!==null&&_QUOTE_GAS_OVERRIDES$2!==void 0?_QUOTE_GAS_OVERRIDES$2:DEFAULT_GAS_QUOTE:undefined});return useMemo(function(){if(!amountOut||!currencyIn||quotesResults.some(function(_ref4){var valid=_ref4.valid;return!valid;})||// skip when tokens are the same\namountOut.currency.equals(currencyIn)){return{state:V3TradeState.INVALID,trade:null};}if(routesLoading||quotesResults.some(function(_ref5){var loading=_ref5.loading;return loading;})){return{state:V3TradeState.LOADING,trade:null};}var _quotesResults$reduce2=quotesResults.reduce(function(currentBest,_ref6,i){var result=_ref6.result;if(!result)return currentBest;if(currentBest.amountIn===null){return{bestRoute:routes[i],amountIn:result.amountIn};}else if(currentBest.amountIn.gt(result.amountIn)){return{bestRoute:routes[i],amountIn:result.amountIn};}return currentBest;},{bestRoute:null,amountIn:null}),bestRoute=_quotesResults$reduce2.bestRoute,amountIn=_quotesResults$reduce2.amountIn;if(!bestRoute||!amountIn){return{state:V3TradeState.NO_ROUTE_FOUND,trade:null};}var isSyncing=quotesResults.some(function(_ref7){var syncing=_ref7.syncing;return syncing;});return{state:isSyncing?V3TradeState.SYNCING:V3TradeState.VALID,trade:Trade.createUncheckedTrade({route:bestRoute,tradeType:TradeType.EXACT_OUTPUT,inputAmount:CurrencyAmount.fromRawAmount(currencyIn,amountIn.toString()),outputAmount:amountOut})};},[amountOut,currencyIn,quotesResults,routes,routesLoading]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useBestV3Trade.ts"],"names":["CurrencyAmount","TradeType","encodeRouteToPath","Trade","SupportedChainId","useMemo","useSingleContractMultipleData","useAllV3Routes","useV3Quoter","useActiveWeb3React","V3TradeState","QUOTE_GAS_OVERRIDES","OPTIMISM","OPTIMISTIC_KOVAN","DEFAULT_GAS_QUOTE","useBestV3TradeExactIn","amountIn","currencyOut","chainId","quoter","currency","routes","routesLoading","loading","quoteExactInInputs","map","route","quotient","toString","undefined","quotesResults","gasRequired","equals","state","INVALID","trade","some","LOADING","reduce","currentBest","i","result","amountOut","bestRoute","lt","NO_ROUTE_FOUND","isSyncing","syncing","SYNCING","VALID","createUncheckedTrade","tradeType","EXACT_INPUT","inputAmount","outputAmount","fromRawAmount","useBestV3TradeExactOut","currencyIn","quoteExactOutInputs","valid","gt","EXACT_OUTPUT"],"mappings":"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","sourcesContent":["import { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { encodeRouteToPath, Route, Trade } from '@uniswap/v3-sdk'\nimport { SupportedChainId } from 'constants/chains'\nimport { BigNumber } from 'ethers'\nimport { useMemo } from 'react'\nimport { useSingleContractMultipleData } from '../state/multicall/hooks'\nimport { useAllV3Routes } from './useAllV3Routes'\nimport { useV3Quoter } from './useContract'\nimport { useActiveWeb3React } from './web3'\n\nexport enum V3TradeState {\n  LOADING,\n  INVALID,\n  NO_ROUTE_FOUND,\n  VALID,\n  SYNCING,\n}\n\nconst QUOTE_GAS_OVERRIDES: { [chainId: number]: number } = {\n  [SupportedChainId.OPTIMISM]: 6_000_000,\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 6_000_000,\n}\n\nconst DEFAULT_GAS_QUOTE = 2_000_000\n\n/**\n * Returns the best v3 trade for a desired exact input swap\n * @param amountIn the amount to swap in\n * @param currencyOut the desired output currency\n */\nexport function useBestV3TradeExactIn(\n  amountIn?: CurrencyAmount<Currency>,\n  currencyOut?: Currency\n): { state: V3TradeState; trade: Trade<Currency, Currency, TradeType.EXACT_INPUT> | null } {\n  const { chainId } = useActiveWeb3React()\n  const quoter = useV3Quoter()\n  const { routes, loading: routesLoading } = useAllV3Routes(amountIn?.currency, currencyOut)\n\n  const quoteExactInInputs = useMemo(() => {\n    return routes.map((route) => [\n      encodeRouteToPath(route, false),\n      amountIn ? `0x${amountIn.quotient.toString(16)}` : undefined,\n    ])\n  }, [amountIn, routes])\n\n  const quotesResults = useSingleContractMultipleData(quoter, 'quoteExactInput', quoteExactInInputs, {\n    gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n  })\n\n  return useMemo(() => {\n    if (\n      !amountIn ||\n      !currencyOut ||\n      // skip when tokens are the same\n      amountIn.currency.equals(currencyOut)\n    ) {\n      return {\n        state: V3TradeState.INVALID,\n        trade: null,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: V3TradeState.LOADING,\n        trade: null,\n      }\n    }\n\n    const { bestRoute, amountOut } = quotesResults.reduce(\n      (currentBest: { bestRoute: Route<Currency, Currency> | null; amountOut: BigNumber | null }, { result }, i) => {\n        if (!result) return currentBest\n\n        if (currentBest.amountOut === null) {\n          return {\n            bestRoute: routes[i],\n            amountOut: result.amountOut,\n          }\n        } else if (currentBest.amountOut.lt(result.amountOut)) {\n          return {\n            bestRoute: routes[i],\n            amountOut: result.amountOut,\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountOut: null,\n      }\n    )\n\n    if (!bestRoute || !amountOut) {\n      return {\n        state: V3TradeState.NO_ROUTE_FOUND,\n        trade: null,\n      }\n    }\n\n    const isSyncing = quotesResults.some(({ syncing }) => syncing)\n\n    return {\n      state: isSyncing ? V3TradeState.SYNCING : V3TradeState.VALID,\n      trade: Trade.createUncheckedTrade({\n        route: bestRoute,\n        tradeType: TradeType.EXACT_INPUT,\n        inputAmount: amountIn,\n        outputAmount: CurrencyAmount.fromRawAmount(currencyOut, amountOut.toString()),\n      }),\n    }\n  }, [amountIn, currencyOut, quotesResults, routes, routesLoading])\n}\n\n/**\n * Returns the best v3 trade for a desired exact output swap\n * @param currencyIn the desired input currency\n * @param amountOut the amount to swap out\n */\nexport function useBestV3TradeExactOut(\n  currencyIn?: Currency,\n  amountOut?: CurrencyAmount<Currency>\n): { state: V3TradeState; trade: Trade<Currency, Currency, TradeType.EXACT_OUTPUT> | null } {\n  const { chainId } = useActiveWeb3React()\n  const quoter = useV3Quoter()\n  const { routes, loading: routesLoading } = useAllV3Routes(currencyIn, amountOut?.currency)\n\n  const quoteExactOutInputs = useMemo(() => {\n    return routes.map((route) => [\n      encodeRouteToPath(route, true),\n      amountOut ? `0x${amountOut.quotient.toString(16)}` : undefined,\n    ])\n  }, [amountOut, routes])\n\n  const quotesResults = useSingleContractMultipleData(quoter, 'quoteExactOutput', quoteExactOutInputs, {\n    gasRequired: chainId ? QUOTE_GAS_OVERRIDES[chainId] ?? DEFAULT_GAS_QUOTE : undefined,\n  })\n\n  return useMemo(() => {\n    if (\n      !amountOut ||\n      !currencyIn ||\n      quotesResults.some(({ valid }) => !valid) ||\n      // skip when tokens are the same\n      amountOut.currency.equals(currencyIn)\n    ) {\n      return {\n        state: V3TradeState.INVALID,\n        trade: null,\n      }\n    }\n\n    if (routesLoading || quotesResults.some(({ loading }) => loading)) {\n      return {\n        state: V3TradeState.LOADING,\n        trade: null,\n      }\n    }\n\n    const { bestRoute, amountIn } = quotesResults.reduce(\n      (currentBest: { bestRoute: Route<Currency, Currency> | null; amountIn: BigNumber | null }, { result }, i) => {\n        if (!result) return currentBest\n\n        if (currentBest.amountIn === null) {\n          return {\n            bestRoute: routes[i],\n            amountIn: result.amountIn,\n          }\n        } else if (currentBest.amountIn.gt(result.amountIn)) {\n          return {\n            bestRoute: routes[i],\n            amountIn: result.amountIn,\n          }\n        }\n\n        return currentBest\n      },\n      {\n        bestRoute: null,\n        amountIn: null,\n      }\n    )\n\n    if (!bestRoute || !amountIn) {\n      return {\n        state: V3TradeState.NO_ROUTE_FOUND,\n        trade: null,\n      }\n    }\n\n    const isSyncing = quotesResults.some(({ syncing }) => syncing)\n\n    return {\n      state: isSyncing ? V3TradeState.SYNCING : V3TradeState.VALID,\n      trade: Trade.createUncheckedTrade({\n        route: bestRoute,\n        tradeType: TradeType.EXACT_OUTPUT,\n        inputAmount: CurrencyAmount.fromRawAmount(currencyIn, amountIn.toString()),\n        outputAmount: amountOut,\n      }),\n    }\n  }, [amountOut, currencyIn, quotesResults, routes, routesLoading])\n}\n"]},"metadata":{},"sourceType":"module"}