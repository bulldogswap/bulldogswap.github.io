{"ast":null,"code":"import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import{isAddress}from'../../utils';/**\n * Token instances created from token info on a token list.\n */export var WrappedTokenInfo=/*#__PURE__*/function(){function WrappedTokenInfo(tokenInfo,list){_classCallCheck(this,WrappedTokenInfo);this.isNative=false;this.isToken=true;this.list=void 0;this.tokenInfo=void 0;this._checksummedAddress=null;this._tags=null;this.tokenInfo=tokenInfo;this.list=list;}_createClass(WrappedTokenInfo,[{key:\"address\",get:function get(){if(this._checksummedAddress)return this._checksummedAddress;var checksummedAddress=isAddress(this.tokenInfo.address);if(!checksummedAddress)throw new Error(\"Invalid token address: \".concat(this.tokenInfo.address));return this._checksummedAddress=checksummedAddress;}},{key:\"chainId\",get:function get(){return this.tokenInfo.chainId;}},{key:\"decimals\",get:function get(){return this.tokenInfo.decimals;}},{key:\"name\",get:function get(){return this.tokenInfo.name;}},{key:\"symbol\",get:function get(){return this.tokenInfo.symbol;}},{key:\"logoURI\",get:function get(){return this.tokenInfo.logoURI;}},{key:\"tags\",get:function get(){if(this._tags!==null)return this._tags;if(!this.tokenInfo.tags)return this._tags=[];var listTags=this.list.tags;if(!listTags)return this._tags=[];return this._tags=this.tokenInfo.tags.map(function(tagId){return _objectSpread(_objectSpread({},listTags[tagId]),{},{id:tagId});});}},{key:\"equals\",value:function equals(other){return other.chainId===this.chainId&&other.isToken&&other.address.toLowerCase()===this.address.toLowerCase();}},{key:\"sortsBefore\",value:function sortsBefore(other){if(this.equals(other))throw new Error('Addresses should not be equal');return this.address.toLowerCase()<other.address.toLowerCase();}},{key:\"wrapped\",get:function get(){return this;}}]);return WrappedTokenInfo;}();","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/lists/wrappedTokenInfo.ts"],"names":["isAddress","WrappedTokenInfo","tokenInfo","list","isNative","isToken","_checksummedAddress","_tags","checksummedAddress","address","Error","chainId","decimals","name","symbol","logoURI","tags","listTags","map","tagId","id","other","toLowerCase","equals"],"mappings":"qiBAGA,OAASA,SAAT,KAA0B,aAA1B,CAMA;AACA;AACA,GACA,UAAaC,CAAAA,gBAAb,yBAOE,0BAAYC,SAAZ,CAAkCC,IAAlC,CAAmD,6CANnCC,QAMmC,CANjB,KAMiB,MALnCC,OAKmC,CALnB,IAKmB,MAJnCF,IAImC,aAFnCD,SAEmC,aAK3CI,mBAL2C,CAKN,IALM,MAkC3CC,KAlC2C,CAkCjB,IAlCiB,CACjD,KAAKL,SAAL,CAAiBA,SAAjB,CACA,KAAKC,IAAL,CAAYA,IAAZ,CACD,CAVH,kDAcE,cAA6B,CAC3B,GAAI,KAAKG,mBAAT,CAA8B,MAAO,MAAKA,mBAAZ,CAC9B,GAAME,CAAAA,kBAAkB,CAAGR,SAAS,CAAC,KAAKE,SAAL,CAAeO,OAAhB,CAApC,CACA,GAAI,CAACD,kBAAL,CAAyB,KAAM,IAAIE,CAAAA,KAAJ,kCAAoC,KAAKR,SAAL,CAAeO,OAAnD,EAAN,CACzB,MAAQ,MAAKH,mBAAL,CAA2BE,kBAAnC,CACD,CAnBH,qBAqBE,cAA6B,CAC3B,MAAO,MAAKN,SAAL,CAAeS,OAAtB,CACD,CAvBH,sBAyBE,cAA8B,CAC5B,MAAO,MAAKT,SAAL,CAAeU,QAAtB,CACD,CA3BH,kBA6BE,cAA0B,CACxB,MAAO,MAAKV,SAAL,CAAeW,IAAtB,CACD,CA/BH,oBAiCE,cAA4B,CAC1B,MAAO,MAAKX,SAAL,CAAeY,MAAtB,CACD,CAnCH,qBAqCE,cAAyC,CACvC,MAAO,MAAKZ,SAAL,CAAea,OAAtB,CACD,CAvCH,kBA0CE,cAA6B,CAC3B,GAAI,KAAKR,KAAL,GAAe,IAAnB,CAAyB,MAAO,MAAKA,KAAZ,CACzB,GAAI,CAAC,KAAKL,SAAL,CAAec,IAApB,CAA0B,MAAQ,MAAKT,KAAL,CAAa,EAArB,CAC1B,GAAMU,CAAAA,QAAQ,CAAG,KAAKd,IAAL,CAAUa,IAA3B,CACA,GAAI,CAACC,QAAL,CAAe,MAAQ,MAAKV,KAAL,CAAa,EAArB,CAEf,MAAQ,MAAKA,KAAL,CAAa,KAAKL,SAAL,CAAec,IAAf,CAAoBE,GAApB,CAAwB,SAACC,KAAD,CAAW,CACtD,sCACKF,QAAQ,CAACE,KAAD,CADb,MAEEC,EAAE,CAAED,KAFN,GAID,CALoB,CAArB,CAMD,CAtDH,sBAwDE,gBAAOE,KAAP,CAAiC,CAC/B,MAAOA,CAAAA,KAAK,CAACV,OAAN,GAAkB,KAAKA,OAAvB,EAAkCU,KAAK,CAAChB,OAAxC,EAAmDgB,KAAK,CAACZ,OAAN,CAAca,WAAd,KAAgC,KAAKb,OAAL,CAAaa,WAAb,EAA1F,CACD,CA1DH,2BA4DE,qBAAYD,KAAZ,CAAmC,CACjC,GAAI,KAAKE,MAAL,CAAYF,KAAZ,CAAJ,CAAwB,KAAM,IAAIX,CAAAA,KAAJ,CAAU,+BAAV,CAAN,CACxB,MAAO,MAAKD,OAAL,CAAaa,WAAb,GAA6BD,KAAK,CAACZ,OAAN,CAAca,WAAd,EAApC,CACD,CA/DH,qBAiEE,cAA4B,CAC1B,MAAO,KAAP,CACD,CAnEH","sourcesContent":["import { Currency, Token } from '@uniswap/sdk-core'\nimport { Tags, TokenInfo } from '@uniswap/token-lists'\nimport { TokenList } from '@uniswap/token-lists/dist/types'\nimport { isAddress } from '../../utils'\n\ntype TagDetails = Tags[keyof Tags]\ninterface TagInfo extends TagDetails {\n  id: string\n}\n/**\n * Token instances created from token info on a token list.\n */\nexport class WrappedTokenInfo implements Token {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n  public readonly list: TokenList\n\n  public readonly tokenInfo: TokenInfo\n\n  constructor(tokenInfo: TokenInfo, list: TokenList) {\n    this.tokenInfo = tokenInfo\n    this.list = list\n  }\n\n  private _checksummedAddress: string | null = null\n\n  public get address(): string {\n    if (this._checksummedAddress) return this._checksummedAddress\n    const checksummedAddress = isAddress(this.tokenInfo.address)\n    if (!checksummedAddress) throw new Error(`Invalid token address: ${this.tokenInfo.address}`)\n    return (this._checksummedAddress = checksummedAddress)\n  }\n\n  public get chainId(): number {\n    return this.tokenInfo.chainId\n  }\n\n  public get decimals(): number {\n    return this.tokenInfo.decimals\n  }\n\n  public get name(): string {\n    return this.tokenInfo.name\n  }\n\n  public get symbol(): string {\n    return this.tokenInfo.symbol\n  }\n\n  public get logoURI(): string | undefined {\n    return this.tokenInfo.logoURI\n  }\n\n  private _tags: TagInfo[] | null = null\n  public get tags(): TagInfo[] {\n    if (this._tags !== null) return this._tags\n    if (!this.tokenInfo.tags) return (this._tags = [])\n    const listTags = this.list.tags\n    if (!listTags) return (this._tags = [])\n\n    return (this._tags = this.tokenInfo.tags.map((tagId) => {\n      return {\n        ...listTags[tagId],\n        id: tagId,\n      }\n    }))\n  }\n\n  equals(other: Currency): boolean {\n    return other.chainId === this.chainId && other.isToken && other.address.toLowerCase() === this.address.toLowerCase()\n  }\n\n  sortsBefore(other: Token): boolean {\n    if (this.equals(other)) throw new Error('Addresses should not be equal')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  public get wrapped(): Token {\n    return this\n  }\n}\n"]},"metadata":{},"sourceType":"module"}