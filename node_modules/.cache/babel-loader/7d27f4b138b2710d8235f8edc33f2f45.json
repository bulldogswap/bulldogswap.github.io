{"ast":null,"code":"import{Interface}from'@ethersproject/abi';import{toHex}from'@uniswap/v3-sdk';var ERC20_INTERFACE=new Interface([{constant:false,inputs:[{name:'_spender',type:'address'},{name:'_value',type:'uint256'}],name:'approve',outputs:[{name:'',type:'bool'}],payable:false,stateMutability:'nonpayable',type:'function'}]);export default function approveAmountCalldata(amount,spender){if(!amount.currency.isToken)throw new Error('Must call with an amount of token');var approveData=ERC20_INTERFACE.encodeFunctionData('approve',[spender,toHex(amount.quotient)]);return{to:amount.currency.address,data:approveData,value:'0x0'};}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/approveAmountCalldata.ts"],"names":["Interface","toHex","ERC20_INTERFACE","constant","inputs","name","type","outputs","payable","stateMutability","approveAmountCalldata","amount","spender","currency","isToken","Error","approveData","encodeFunctionData","quotient","to","address","data","value"],"mappings":"AAAA,OAASA,SAAT,KAA0B,oBAA1B,CAEA,OAASC,KAAT,KAAsB,iBAAtB,CAGA,GAAMC,CAAAA,eAAe,CAAG,GAAIF,CAAAA,SAAJ,CAAc,CACpC,CACEG,QAAQ,CAAE,KADZ,CAEEC,MAAM,CAAE,CACN,CAAEC,IAAI,CAAE,UAAR,CAAoBC,IAAI,CAAE,SAA1B,CADM,CAEN,CAAED,IAAI,CAAE,QAAR,CAAkBC,IAAI,CAAE,SAAxB,CAFM,CAFV,CAMED,IAAI,CAAE,SANR,CAOEE,OAAO,CAAE,CAAC,CAAEF,IAAI,CAAE,EAAR,CAAYC,IAAI,CAAE,MAAlB,CAAD,CAPX,CAQEE,OAAO,CAAE,KARX,CASEC,eAAe,CAAE,YATnB,CAUEH,IAAI,CAAE,UAVR,CADoC,CAAd,CAAxB,CAeA,cAAe,SAASI,CAAAA,qBAAT,CACbC,MADa,CAEbC,OAFa,CAG+B,CAC5C,GAAI,CAACD,MAAM,CAACE,QAAP,CAAgBC,OAArB,CAA8B,KAAM,IAAIC,CAAAA,KAAJ,CAAU,mCAAV,CAAN,CAC9B,GAAMC,CAAAA,WAAW,CAAGd,eAAe,CAACe,kBAAhB,CAAmC,SAAnC,CAA8C,CAACL,OAAD,CAAUX,KAAK,CAACU,MAAM,CAACO,QAAR,CAAf,CAA9C,CAApB,CACA,MAAO,CACLC,EAAE,CAAER,MAAM,CAACE,QAAP,CAAgBO,OADf,CAELC,IAAI,CAAEL,WAFD,CAGLM,KAAK,CAAE,KAHF,CAAP,CAKD","sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\nimport { Erc20Interface } from '../abis/types/Erc20'\n\nconst ERC20_INTERFACE = new Interface([\n  {\n    constant: false,\n    inputs: [\n      { name: '_spender', type: 'address' },\n      { name: '_value', type: 'uint256' },\n    ],\n    name: 'approve',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n]) as Erc20Interface\n\nexport default function approveAmountCalldata(\n  amount: CurrencyAmount<Currency>,\n  spender: string\n): { to: string; data: string; value: '0x0' } {\n  if (!amount.currency.isToken) throw new Error('Must call with an amount of token')\n  const approveData = ERC20_INTERFACE.encodeFunctionData('approve', [spender, toHex(amount.quotient)])\n  return {\n    to: amount.currency.address,\n    data: approveData,\n    value: '0x0',\n  }\n}\n"]},"metadata":{},"sourceType":"module"}