{"ast":null,"code":"import{Percent}from'@uniswap/sdk-core';import JSBI from'jsbi';import{ONE_HUNDRED_PERCENT}from'../constants/misc';export function computeFiatValuePriceImpact(fiatValueInput,fiatValueOutput){if(!fiatValueOutput||!fiatValueInput)return undefined;if(!fiatValueInput.currency.equals(fiatValueOutput.currency))return undefined;if(JSBI.equal(fiatValueInput.quotient,JSBI.BigInt(0)))return undefined;var pct=ONE_HUNDRED_PERCENT.subtract(fiatValueOutput.divide(fiatValueInput));return new Percent(pct.numerator,pct.denominator);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/computeFiatValuePriceImpact.tsx"],"names":["Percent","JSBI","ONE_HUNDRED_PERCENT","computeFiatValuePriceImpact","fiatValueInput","fiatValueOutput","undefined","currency","equals","equal","quotient","BigInt","pct","subtract","divide","numerator","denominator"],"mappings":"AAAA,OAAgCA,OAAhC,KAA+C,mBAA/C,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CACA,OAASC,mBAAT,KAAoC,mBAApC,CAEA,MAAO,SAASC,CAAAA,2BAAT,CACLC,cADK,CAELC,eAFK,CAGgB,CACrB,GAAI,CAACA,eAAD,EAAoB,CAACD,cAAzB,CAAyC,MAAOE,CAAAA,SAAP,CACzC,GAAI,CAACF,cAAc,CAACG,QAAf,CAAwBC,MAAxB,CAA+BH,eAAe,CAACE,QAA/C,CAAL,CAA+D,MAAOD,CAAAA,SAAP,CAC/D,GAAIL,IAAI,CAACQ,KAAL,CAAWL,cAAc,CAACM,QAA1B,CAAoCT,IAAI,CAACU,MAAL,CAAY,CAAZ,CAApC,CAAJ,CAAyD,MAAOL,CAAAA,SAAP,CACzD,GAAMM,CAAAA,GAAG,CAAGV,mBAAmB,CAACW,QAApB,CAA6BR,eAAe,CAACS,MAAhB,CAAuBV,cAAvB,CAA7B,CAAZ,CACA,MAAO,IAAIJ,CAAAA,OAAJ,CAAYY,GAAG,CAACG,SAAhB,CAA2BH,GAAG,CAACI,WAA/B,CAAP,CACD","sourcesContent":["import { Token, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { ONE_HUNDRED_PERCENT } from '../constants/misc'\n\nexport function computeFiatValuePriceImpact(\n  fiatValueInput: CurrencyAmount<Token> | undefined | null,\n  fiatValueOutput: CurrencyAmount<Token> | undefined | null\n): Percent | undefined {\n  if (!fiatValueOutput || !fiatValueInput) return undefined\n  if (!fiatValueInput.currency.equals(fiatValueOutput.currency)) return undefined\n  if (JSBI.equal(fiatValueInput.quotient, JSBI.BigInt(0))) return undefined\n  const pct = ONE_HUNDRED_PERCENT.subtract(fiatValueOutput.divide(fiatValueInput))\n  return new Percent(pct.numerator, pct.denominator)\n}\n"]},"metadata":{},"sourceType":"module"}