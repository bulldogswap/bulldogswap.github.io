{"ast":null,"code":"import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";export function toCallKey(call){var key=\"\".concat(call.address,\"-\").concat(call.callData);if(call.gasRequired){if(!Number.isSafeInteger(call.gasRequired)){throw new Error(\"Invalid number: \".concat(call.gasRequired));}key+=\"-\".concat(call.gasRequired);}return key;}export function parseCallKey(callKey){var pcs=callKey.split('-');if(![2,3].includes(pcs.length)){throw new Error(\"Invalid call key: \".concat(callKey));}return _objectSpread({address:pcs[0],callData:pcs[1]},pcs[2]?{gasRequired:Number.parseInt(pcs[2])}:{});}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/multicall/utils.ts"],"names":["toCallKey","call","key","address","callData","gasRequired","Number","isSafeInteger","Error","parseCallKey","callKey","pcs","split","includes","length","parseInt"],"mappings":"uLAMA,MAAO,SAASA,CAAAA,SAAT,CAAmBC,IAAnB,CAAuC,CAC5C,GAAIC,CAAAA,GAAG,WAAMD,IAAI,CAACE,OAAX,aAAsBF,IAAI,CAACG,QAA3B,CAAP,CACA,GAAIH,IAAI,CAACI,WAAT,CAAsB,CACpB,GAAI,CAACC,MAAM,CAACC,aAAP,CAAqBN,IAAI,CAACI,WAA1B,CAAL,CAA6C,CAC3C,KAAM,IAAIG,CAAAA,KAAJ,2BAA6BP,IAAI,CAACI,WAAlC,EAAN,CACD,CACDH,GAAG,aAAQD,IAAI,CAACI,WAAb,CAAH,CACD,CACD,MAAOH,CAAAA,GAAP,CACD,CAED,MAAO,SAASO,CAAAA,YAAT,CAAsBC,OAAtB,CAA6C,CAClD,GAAMC,CAAAA,GAAG,CAAGD,OAAO,CAACE,KAAR,CAAc,GAAd,CAAZ,CACA,GAAI,CAAC,CAAC,CAAD,CAAI,CAAJ,EAAOC,QAAP,CAAgBF,GAAG,CAACG,MAApB,CAAL,CAAkC,CAChC,KAAM,IAAIN,CAAAA,KAAJ,6BAA+BE,OAA/B,EAAN,CACD,CACD,sBACEP,OAAO,CAAEQ,GAAG,CAAC,CAAD,CADd,CAEEP,QAAQ,CAAEO,GAAG,CAAC,CAAD,CAFf,EAGMA,GAAG,CAAC,CAAD,CAAH,CAAS,CAAEN,WAAW,CAAEC,MAAM,CAACS,QAAP,CAAgBJ,GAAG,CAAC,CAAD,CAAnB,CAAf,CAAT,CAAoD,EAH1D,EAKD","sourcesContent":["export interface Call {\n  address: string\n  callData: string\n  gasRequired?: number\n}\n\nexport function toCallKey(call: Call): string {\n  let key = `${call.address}-${call.callData}`\n  if (call.gasRequired) {\n    if (!Number.isSafeInteger(call.gasRequired)) {\n      throw new Error(`Invalid number: ${call.gasRequired}`)\n    }\n    key += `-${call.gasRequired}`\n  }\n  return key\n}\n\nexport function parseCallKey(callKey: string): Call {\n  const pcs = callKey.split('-')\n  if (![2, 3].includes(pcs.length)) {\n    throw new Error(`Invalid call key: ${callKey}`)\n  }\n  return {\n    address: pcs[0],\n    callData: pcs[1],\n    ...(pcs[2] ? { gasRequired: Number.parseInt(pcs[2]) } : {}),\n  }\n}\n"]},"metadata":{},"sourceType":"module"}