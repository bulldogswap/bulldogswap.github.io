{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _TOKEN_BALANCE_GAS_OV;import{CurrencyAmount,Ether}from'@uniswap/sdk-core';import JSBI from'jsbi';import{useMemo}from'react';import{UNI}from'../../constants/tokens';import{useActiveWeb3React}from'../../hooks/web3';import{useAllTokens}from'../../hooks/Tokens';import{useMulticall2Contract}from'../../hooks/useContract';import{isAddress}from'../../utils';import{useUserUnclaimedAmount}from'../claim/hooks';import{useMultipleContractSingleData,useSingleContractMultipleData}from'../multicall/hooks';import{useTotalUniEarned}from'../stake/hooks';import{Interface}from'@ethersproject/abi';import ERC20ABI from'abis/erc20.json';import{SupportedChainId}from'constants/chains';/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */export function useETHBalances(uncheckedAddresses){var _useActiveWeb3React=useActiveWeb3React(),chainId=_useActiveWeb3React.chainId;var multicallContract=useMulticall2Contract();var addresses=useMemo(function(){return uncheckedAddresses?uncheckedAddresses.map(isAddress).filter(function(a){return a!==false;}).sort():[];},[uncheckedAddresses]);var results=useSingleContractMultipleData(multicallContract,'getEthBalance',addresses.map(function(address){return[address];}));return useMemo(function(){return addresses.reduce(function(memo,address,i){var _results$i,_results$i$result;var value=results===null||results===void 0?void 0:(_results$i=results[i])===null||_results$i===void 0?void 0:(_results$i$result=_results$i.result)===null||_results$i$result===void 0?void 0:_results$i$result[0];if(value&&chainId)memo[address]=CurrencyAmount.fromRawAmount(Ether.onChain(chainId),JSBI.BigInt(value.toString()));return memo;},{});},[addresses,chainId,results]);}var TOKEN_BALANCE_GAS_OVERRIDE=(_TOKEN_BALANCE_GAS_OV={},_defineProperty(_TOKEN_BALANCE_GAS_OV,SupportedChainId.OPTIMISM,250000),_defineProperty(_TOKEN_BALANCE_GAS_OV,SupportedChainId.OPTIMISTIC_KOVAN,250000),_TOKEN_BALANCE_GAS_OV);/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */export function useTokenBalancesWithLoadingIndicator(address,tokens){var _ref;var validatedTokens=useMemo(function(){var _tokens$filter;return(_tokens$filter=tokens===null||tokens===void 0?void 0:tokens.filter(function(t){return isAddress(t===null||t===void 0?void 0:t.address)!==false;}))!==null&&_tokens$filter!==void 0?_tokens$filter:[];},[tokens]);var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var validatedTokenAddresses=useMemo(function(){return validatedTokens.map(function(vt){return vt.address;});},[validatedTokens]);var ERC20Interface=new Interface(ERC20ABI);var balances=useMultipleContractSingleData(validatedTokenAddresses,ERC20Interface,'balanceOf',[address],{gasRequired:(_ref=chainId&&TOKEN_BALANCE_GAS_OVERRIDE[chainId])!==null&&_ref!==void 0?_ref:100000});var anyLoading=useMemo(function(){return balances.some(function(callState){return callState.loading;});},[balances]);return[useMemo(function(){return address&&validatedTokens.length>0?validatedTokens.reduce(function(memo,token,i){var _balances$i,_balances$i$result;var value=balances===null||balances===void 0?void 0:(_balances$i=balances[i])===null||_balances$i===void 0?void 0:(_balances$i$result=_balances$i.result)===null||_balances$i$result===void 0?void 0:_balances$i$result[0];var amount=value?JSBI.BigInt(value.toString()):undefined;if(amount){memo[token.address]=CurrencyAmount.fromRawAmount(token,amount);}return memo;},{}):{};},[address,validatedTokens,balances]),anyLoading];}export function useTokenBalances(address,tokens){return useTokenBalancesWithLoadingIndicator(address,tokens)[0];}// get the balance for a single token/account combo\nexport function useTokenBalance(account,token){var tokenBalances=useTokenBalances(account,[token]);if(!token)return undefined;return tokenBalances[token.address];}export function useCurrencyBalances(account,currencies){var tokens=useMemo(function(){var _currencies$filter;return(_currencies$filter=currencies===null||currencies===void 0?void 0:currencies.filter(function(currency){var _currency$isToken;return(_currency$isToken=currency===null||currency===void 0?void 0:currency.isToken)!==null&&_currency$isToken!==void 0?_currency$isToken:false;}))!==null&&_currencies$filter!==void 0?_currencies$filter:[];},[currencies]);var tokenBalances=useTokenBalances(account,tokens);var containsETH=useMemo(function(){var _currencies$some;return(_currencies$some=currencies===null||currencies===void 0?void 0:currencies.some(function(currency){return currency===null||currency===void 0?void 0:currency.isNative;}))!==null&&_currencies$some!==void 0?_currencies$some:false;},[currencies]);var ethBalance=useETHBalances(containsETH?[account]:[]);return useMemo(function(){var _currencies$map;return(_currencies$map=currencies===null||currencies===void 0?void 0:currencies.map(function(currency){if(!account||!currency)return undefined;if(currency.isToken)return tokenBalances[currency.address];if(currency.isNative)return ethBalance[account];return undefined;}))!==null&&_currencies$map!==void 0?_currencies$map:[];},[account,currencies,ethBalance,tokenBalances]);}export function useCurrencyBalance(account,currency){return useCurrencyBalances(account,[currency])[0];}// mimics useAllBalances\nexport function useAllTokenBalances(){var _useActiveWeb3React3=useActiveWeb3React(),account=_useActiveWeb3React3.account;var allTokens=useAllTokens();var allTokensArray=useMemo(function(){return Object.values(allTokens!==null&&allTokens!==void 0?allTokens:{});},[allTokens]);var balances=useTokenBalances(account!==null&&account!==void 0?account:undefined,allTokensArray);return balances!==null&&balances!==void 0?balances:{};}// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(){var _uniBalance$quotient,_uniUnclaimed$quotien,_uniUnHarvested$quoti;var _useActiveWeb3React4=useActiveWeb3React(),account=_useActiveWeb3React4.account,chainId=_useActiveWeb3React4.chainId;var uni=chainId?UNI[chainId]:undefined;var uniBalance=useTokenBalance(account!==null&&account!==void 0?account:undefined,uni);var uniUnclaimed=useUserUnclaimedAmount(account);var uniUnHarvested=useTotalUniEarned();if(!uni)return undefined;return CurrencyAmount.fromRawAmount(uni,JSBI.add(JSBI.add((_uniBalance$quotient=uniBalance===null||uniBalance===void 0?void 0:uniBalance.quotient)!==null&&_uniBalance$quotient!==void 0?_uniBalance$quotient:JSBI.BigInt(0),(_uniUnclaimed$quotien=uniUnclaimed===null||uniUnclaimed===void 0?void 0:uniUnclaimed.quotient)!==null&&_uniUnclaimed$quotien!==void 0?_uniUnclaimed$quotien:JSBI.BigInt(0)),(_uniUnHarvested$quoti=uniUnHarvested===null||uniUnHarvested===void 0?void 0:uniUnHarvested.quotient)!==null&&_uniUnHarvested$quoti!==void 0?_uniUnHarvested$quoti:JSBI.BigInt(0)));}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/wallet/hooks.ts"],"names":["CurrencyAmount","Ether","JSBI","useMemo","UNI","useActiveWeb3React","useAllTokens","useMulticall2Contract","isAddress","useUserUnclaimedAmount","useMultipleContractSingleData","useSingleContractMultipleData","useTotalUniEarned","Interface","ERC20ABI","SupportedChainId","useETHBalances","uncheckedAddresses","chainId","multicallContract","addresses","map","filter","a","sort","results","address","reduce","memo","i","value","result","fromRawAmount","onChain","BigInt","toString","TOKEN_BALANCE_GAS_OVERRIDE","OPTIMISM","OPTIMISTIC_KOVAN","useTokenBalancesWithLoadingIndicator","tokens","validatedTokens","t","validatedTokenAddresses","vt","ERC20Interface","balances","gasRequired","anyLoading","some","callState","loading","length","token","amount","undefined","useTokenBalances","useTokenBalance","account","tokenBalances","useCurrencyBalances","currencies","currency","isToken","containsETH","isNative","ethBalance","useCurrencyBalance","useAllTokenBalances","allTokens","allTokensArray","Object","values","useAggregateUniBalance","uni","uniBalance","uniUnclaimed","uniUnHarvested","add","quotient"],"mappings":"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","sourcesContent":["import { Currency, Token, CurrencyAmount, Ether } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\nimport { useMemo } from 'react'\nimport { UNI } from '../../constants/tokens'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useAllTokens } from '../../hooks/Tokens'\nimport { useMulticall2Contract } from '../../hooks/useContract'\nimport { isAddress } from '../../utils'\nimport { useUserUnclaimedAmount } from '../claim/hooks'\nimport { useMultipleContractSingleData, useSingleContractMultipleData } from '../multicall/hooks'\nimport { useTotalUniEarned } from '../stake/hooks'\nimport { Interface } from '@ethersproject/abi'\nimport ERC20ABI from 'abis/erc20.json'\nimport { Erc20Interface } from 'abis/types/Erc20'\nimport { SupportedChainId } from 'constants/chains'\n/**\n * Returns a map of the given addresses to their eventually consistent ETH balances.\n */\nexport function useETHBalances(uncheckedAddresses?: (string | undefined)[]): {\n  [address: string]: CurrencyAmount<Currency> | undefined\n} {\n  const { chainId } = useActiveWeb3React()\n  const multicallContract = useMulticall2Contract()\n\n  const addresses: string[] = useMemo(\n    () =>\n      uncheckedAddresses\n        ? uncheckedAddresses\n            .map(isAddress)\n            .filter((a): a is string => a !== false)\n            .sort()\n        : [],\n    [uncheckedAddresses]\n  )\n\n  const results = useSingleContractMultipleData(\n    multicallContract,\n    'getEthBalance',\n    addresses.map((address) => [address])\n  )\n\n  return useMemo(\n    () =>\n      addresses.reduce<{ [address: string]: CurrencyAmount<Currency> }>((memo, address, i) => {\n        const value = results?.[i]?.result?.[0]\n        if (value && chainId)\n          memo[address] = CurrencyAmount.fromRawAmount(Ether.onChain(chainId), JSBI.BigInt(value.toString()))\n        return memo\n      }, {}),\n    [addresses, chainId, results]\n  )\n}\n\nconst TOKEN_BALANCE_GAS_OVERRIDE: { [chainId: number]: number } = {\n  [SupportedChainId.OPTIMISM]: 250_000,\n  [SupportedChainId.OPTIMISTIC_KOVAN]: 250_000,\n}\n\n/**\n * Returns a map of token addresses to their eventually consistent token balances for a single account.\n */\nexport function useTokenBalancesWithLoadingIndicator(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): [{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }, boolean] {\n  const validatedTokens: Token[] = useMemo(\n    () => tokens?.filter((t?: Token): t is Token => isAddress(t?.address) !== false) ?? [],\n    [tokens]\n  )\n\n  const { chainId } = useActiveWeb3React()\n\n  const validatedTokenAddresses = useMemo(() => validatedTokens.map((vt) => vt.address), [validatedTokens])\n  const ERC20Interface = new Interface(ERC20ABI) as Erc20Interface\n  const balances = useMultipleContractSingleData(validatedTokenAddresses, ERC20Interface, 'balanceOf', [address], {\n    gasRequired: (chainId && TOKEN_BALANCE_GAS_OVERRIDE[chainId]) ?? 100_000,\n  })\n\n  const anyLoading: boolean = useMemo(() => balances.some((callState) => callState.loading), [balances])\n\n  return [\n    useMemo(\n      () =>\n        address && validatedTokens.length > 0\n          ? validatedTokens.reduce<{ [tokenAddress: string]: CurrencyAmount<Token> | undefined }>((memo, token, i) => {\n              const value = balances?.[i]?.result?.[0]\n              const amount = value ? JSBI.BigInt(value.toString()) : undefined\n              if (amount) {\n                memo[token.address] = CurrencyAmount.fromRawAmount(token, amount)\n              }\n              return memo\n            }, {})\n          : {},\n      [address, validatedTokens, balances]\n    ),\n    anyLoading,\n  ]\n}\n\nexport function useTokenBalances(\n  address?: string,\n  tokens?: (Token | undefined)[]\n): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  return useTokenBalancesWithLoadingIndicator(address, tokens)[0]\n}\n\n// get the balance for a single token/account combo\nexport function useTokenBalance(account?: string, token?: Token): CurrencyAmount<Token> | undefined {\n  const tokenBalances = useTokenBalances(account, [token])\n  if (!token) return undefined\n  return tokenBalances[token.address]\n}\n\nexport function useCurrencyBalances(\n  account?: string,\n  currencies?: (Currency | undefined)[]\n): (CurrencyAmount<Currency> | undefined)[] {\n  const tokens = useMemo(\n    () => currencies?.filter((currency): currency is Token => currency?.isToken ?? false) ?? [],\n    [currencies]\n  )\n\n  const tokenBalances = useTokenBalances(account, tokens)\n  const containsETH: boolean = useMemo(() => currencies?.some((currency) => currency?.isNative) ?? false, [currencies])\n  const ethBalance = useETHBalances(containsETH ? [account] : [])\n\n  return useMemo(\n    () =>\n      currencies?.map((currency) => {\n        if (!account || !currency) return undefined\n        if (currency.isToken) return tokenBalances[currency.address]\n        if (currency.isNative) return ethBalance[account]\n        return undefined\n      }) ?? [],\n    [account, currencies, ethBalance, tokenBalances]\n  )\n}\n\nexport function useCurrencyBalance(account?: string, currency?: Currency): CurrencyAmount<Currency> | undefined {\n  return useCurrencyBalances(account, [currency])[0]\n}\n\n// mimics useAllBalances\nexport function useAllTokenBalances(): { [tokenAddress: string]: CurrencyAmount<Token> | undefined } {\n  const { account } = useActiveWeb3React()\n  const allTokens = useAllTokens()\n  const allTokensArray = useMemo(() => Object.values(allTokens ?? {}), [allTokens])\n  const balances = useTokenBalances(account ?? undefined, allTokensArray)\n  return balances ?? {}\n}\n\n// get the total owned, unclaimed, and unharvested UNI for account\nexport function useAggregateUniBalance(): CurrencyAmount<Token> | undefined {\n  const { account, chainId } = useActiveWeb3React()\n\n  const uni = chainId ? UNI[chainId] : undefined\n\n  const uniBalance: CurrencyAmount<Token> | undefined = useTokenBalance(account ?? undefined, uni)\n  const uniUnclaimed: CurrencyAmount<Token> | undefined = useUserUnclaimedAmount(account)\n  const uniUnHarvested: CurrencyAmount<Token> | undefined = useTotalUniEarned()\n\n  if (!uni) return undefined\n\n  return CurrencyAmount.fromRawAmount(\n    uni,\n    JSBI.add(\n      JSBI.add(uniBalance?.quotient ?? JSBI.BigInt(0), uniUnclaimed?.quotient ?? JSBI.BigInt(0)),\n      uniUnHarvested?.quotient ?? JSBI.BigInt(0)\n    )\n  )\n}\n"]},"metadata":{},"sourceType":"module"}