{"ast":null,"code":"import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{i18n}from\"@lingui/core\";import JSBI from'jsbi';import{useBestV3TradeExactIn,useBestV3TradeExactOut}from'../../hooks/useBestV3Trade';import useENS from'../../hooks/useENS';import{parseUnits}from'@ethersproject/units';import{CurrencyAmount}from'@uniswap/sdk-core';import{Trade as V2Trade}from'@uniswap/v2-sdk';import{useCallback,useEffect,useState}from'react';import{useActiveWeb3React}from'../../hooks/web3';import{useCurrency}from'../../hooks/Tokens';import useSwapSlippageTolerance from'../../hooks/useSwapSlippageTolerance';import{Version}from'../../hooks/useToggledVersion';import{useV2TradeExactIn,useV2TradeExactOut}from'../../hooks/useV2Trade';import useParsedQueryString from'../../hooks/useParsedQueryString';import{isAddress}from'../../utils';import{useCurrencyBalances}from'../wallet/hooks';import{Field,replaceSwapState,selectCurrency,setRecipient,switchCurrencies,typeInput}from'./actions';import{useUserSingleHopOnly}from'state/user/hooks';import{useAppDispatch,useAppSelector}from'state/hooks';export function useSwapState(){return useAppSelector(function(state){return state.swap;});}export function useSwapActionHandlers(){var dispatch=useAppDispatch();var onCurrencySelection=useCallback(function(field,currency){dispatch(selectCurrency({field:field,currencyId:currency.isToken?currency.address:currency.isNative?'ETH':''}));},[dispatch]);var onSwitchTokens=useCallback(function(){dispatch(switchCurrencies());},[dispatch]);var onUserInput=useCallback(function(field,typedValue){dispatch(typeInput({field:field,typedValue:typedValue}));},[dispatch]);var onChangeRecipient=useCallback(function(recipient){dispatch(setRecipient({recipient:recipient}));},[dispatch]);return{onSwitchTokens:onSwitchTokens,onCurrencySelection:onCurrencySelection,onUserInput:onUserInput,onChangeRecipient:onChangeRecipient};}// try to parse a user entered amount for a given token\nexport function tryParseAmount(value,currency){if(!value||!currency){return undefined;}try{var typedValueParsed=parseUnits(value,currency.decimals).toString();if(typedValueParsed!=='0'){return CurrencyAmount.fromRawAmount(currency,JSBI.BigInt(typedValueParsed));}}catch(error){// should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\nconsole.debug(\"Failed to parse input amount: \\\"\".concat(value,\"\\\"\"),error);}// necessary for all paths to return a value\nreturn undefined;}var BAD_RECIPIENT_ADDRESSES={'0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f':true,// v2 factory\n'0xf164fC0Ec4E93095b804a4795bBe1e041497b92a':true,// v2 router 01\n'0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D':true// v2 router 02\n};/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */function involvesAddress(trade,checksummedAddress){var path=trade instanceof V2Trade?trade.route.path:trade.route.tokenPath;return path.some(function(token){return token.address===checksummedAddress;})||(trade instanceof V2Trade?trade.route.pairs.some(function(pair){return pair.liquidityToken.address===checksummedAddress;}):false);}// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(toggledVersion){var _ref,_ref2,_ref3,_currencyBalances,_currencies,_ref4;var _useActiveWeb3React=useActiveWeb3React(),account=_useActiveWeb3React.account;var _useUserSingleHopOnly=useUserSingleHopOnly(),_useUserSingleHopOnly2=_slicedToArray(_useUserSingleHopOnly,1),singleHopOnly=_useUserSingleHopOnly2[0];var _useSwapState=useSwapState(),independentField=_useSwapState.independentField,typedValue=_useSwapState.typedValue,inputCurrencyId=_useSwapState[Field.INPUT].currencyId,outputCurrencyId=_useSwapState[Field.OUTPUT].currencyId,recipient=_useSwapState.recipient;var inputCurrency=useCurrency(inputCurrencyId);var outputCurrency=useCurrency(outputCurrencyId);var recipientLookup=useENS(recipient!==null&&recipient!==void 0?recipient:undefined);var to=(_ref=recipient===null?account:recipientLookup.address)!==null&&_ref!==void 0?_ref:null;var relevantTokenBalances=useCurrencyBalances(account!==null&&account!==void 0?account:undefined,[inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined]);var isExactIn=independentField===Field.INPUT;var parsedAmount=tryParseAmount(typedValue,(_ref2=isExactIn?inputCurrency:outputCurrency)!==null&&_ref2!==void 0?_ref2:undefined);var bestV2TradeExactIn=useV2TradeExactIn(isExactIn?parsedAmount:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined,{maxHops:singleHopOnly?1:undefined});var bestV2TradeExactOut=useV2TradeExactOut(inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,!isExactIn?parsedAmount:undefined,{maxHops:singleHopOnly?1:undefined});var bestV3TradeExactIn=useBestV3TradeExactIn(isExactIn?parsedAmount:undefined,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined);var bestV3TradeExactOut=useBestV3TradeExactOut(inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined,!isExactIn?parsedAmount:undefined);var v2Trade=isExactIn?bestV2TradeExactIn:bestV2TradeExactOut;var v3Trade=(_ref3=isExactIn?bestV3TradeExactIn:bestV3TradeExactOut)!==null&&_ref3!==void 0?_ref3:undefined;var currencyBalances=(_currencyBalances={},_defineProperty(_currencyBalances,Field.INPUT,relevantTokenBalances[0]),_defineProperty(_currencyBalances,Field.OUTPUT,relevantTokenBalances[1]),_currencyBalances);var currencies=(_currencies={},_defineProperty(_currencies,Field.INPUT,inputCurrency!==null&&inputCurrency!==void 0?inputCurrency:undefined),_defineProperty(_currencies,Field.OUTPUT,outputCurrency!==null&&outputCurrency!==void 0?outputCurrency:undefined),_currencies);var inputError;if(!account){inputError=/*i18n*/i18n._(\"Connect Wallet\");}if(!parsedAmount){var _inputError;inputError=(_inputError=inputError)!==null&&_inputError!==void 0?_inputError:/*i18n*/i18n._(\"Enter an amount\");}if(!currencies[Field.INPUT]||!currencies[Field.OUTPUT]){var _inputError2;inputError=(_inputError2=inputError)!==null&&_inputError2!==void 0?_inputError2:/*i18n*/i18n._(\"Select a token\");}var formattedTo=isAddress(to);if(!to||!formattedTo){var _inputError3;inputError=(_inputError3=inputError)!==null&&_inputError3!==void 0?_inputError3:/*i18n*/i18n._(\"Enter a recipient\");}else{if(BAD_RECIPIENT_ADDRESSES[formattedTo]||bestV2TradeExactIn&&involvesAddress(bestV2TradeExactIn,formattedTo)||bestV2TradeExactOut&&involvesAddress(bestV2TradeExactOut,formattedTo)){var _inputError4;inputError=(_inputError4=inputError)!==null&&_inputError4!==void 0?_inputError4:/*i18n*/i18n._(\"Invalid recipient\");}}var toggledTrade=(_ref4=toggledVersion===Version.v2?v2Trade:v3Trade.trade)!==null&&_ref4!==void 0?_ref4:undefined;var allowedSlippage=useSwapSlippageTolerance(toggledTrade);// compare input balance to max input based on version\nvar _ref5=[currencyBalances[Field.INPUT],toggledTrade===null||toggledTrade===void 0?void 0:toggledTrade.maximumAmountIn(allowedSlippage)],balanceIn=_ref5[0],amountIn=_ref5[1];if(balanceIn&&amountIn&&balanceIn.lessThan(amountIn)){inputError=/*i18n*/i18n._(\"Insufficient {0} balance\",{0:amountIn.currency.symbol});}return{currencies:currencies,currencyBalances:currencyBalances,parsedAmount:parsedAmount,inputError:inputError,v2Trade:v2Trade!==null&&v2Trade!==void 0?v2Trade:undefined,v3TradeState:v3Trade,toggledTrade:toggledTrade,allowedSlippage:allowedSlippage};}function parseCurrencyFromURLParameter(urlParam){if(typeof urlParam==='string'){var valid=isAddress(urlParam);if(valid)return valid;if(urlParam.toUpperCase()==='ETH')return'ETH';}return'';}function parseTokenAmountURLParameter(urlParam){return typeof urlParam==='string'&&!isNaN(parseFloat(urlParam))?urlParam:'';}function parseIndependentFieldURLParameter(urlParam){return typeof urlParam==='string'&&urlParam.toLowerCase()==='output'?Field.OUTPUT:Field.INPUT;}var ENS_NAME_REGEX=/^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/;var ADDRESS_REGEX=/^0x[a-fA-F0-9]{40}$/;function validatedRecipient(recipient){if(typeof recipient!=='string')return null;var address=isAddress(recipient);if(address)return address;if(ENS_NAME_REGEX.test(recipient))return recipient;if(ADDRESS_REGEX.test(recipient))return recipient;return null;}export function queryParametersToSwapState(parsedQs){var _ref6;var inputCurrency=parseCurrencyFromURLParameter(parsedQs.inputCurrency);var outputCurrency=parseCurrencyFromURLParameter(parsedQs.outputCurrency);if(inputCurrency===''&&outputCurrency===''){// default to ETH input\ninputCurrency='ETH';}else if(inputCurrency===outputCurrency){// clear output if identical\noutputCurrency='';}var recipient=validatedRecipient(parsedQs.recipient);return _ref6={},_defineProperty(_ref6,Field.INPUT,{currencyId:inputCurrency}),_defineProperty(_ref6,Field.OUTPUT,{currencyId:outputCurrency}),_defineProperty(_ref6,\"typedValue\",parseTokenAmountURLParameter(parsedQs.exactAmount)),_defineProperty(_ref6,\"independentField\",parseIndependentFieldURLParameter(parsedQs.exactField)),_defineProperty(_ref6,\"recipient\",recipient),_ref6;}// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch(){var _useActiveWeb3React2=useActiveWeb3React(),chainId=_useActiveWeb3React2.chainId;var dispatch=useAppDispatch();var parsedQs=useParsedQueryString();var _useState=useState(),_useState2=_slicedToArray(_useState,2),result=_useState2[0],setResult=_useState2[1];useEffect(function(){if(!chainId)return;var parsed=queryParametersToSwapState(parsedQs);dispatch(replaceSwapState({typedValue:parsed.typedValue,field:parsed.independentField,inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId,recipient:parsed.recipient}));setResult({inputCurrencyId:parsed[Field.INPUT].currencyId,outputCurrencyId:parsed[Field.OUTPUT].currencyId});// eslint-disable-next-line react-hooks/exhaustive-deps\n},[dispatch,chainId]);return result;}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/swap/hooks.ts"],"names":["JSBI","useBestV3TradeExactIn","useBestV3TradeExactOut","useENS","parseUnits","CurrencyAmount","Trade","V2Trade","useCallback","useEffect","useState","useActiveWeb3React","useCurrency","useSwapSlippageTolerance","Version","useV2TradeExactIn","useV2TradeExactOut","useParsedQueryString","isAddress","useCurrencyBalances","Field","replaceSwapState","selectCurrency","setRecipient","switchCurrencies","typeInput","useUserSingleHopOnly","useAppDispatch","useAppSelector","useSwapState","state","swap","useSwapActionHandlers","dispatch","onCurrencySelection","field","currency","currencyId","isToken","address","isNative","onSwitchTokens","onUserInput","typedValue","onChangeRecipient","recipient","tryParseAmount","value","undefined","typedValueParsed","decimals","toString","fromRawAmount","BigInt","error","console","debug","BAD_RECIPIENT_ADDRESSES","involvesAddress","trade","checksummedAddress","path","route","tokenPath","some","token","pairs","pair","liquidityToken","useDerivedSwapInfo","toggledVersion","account","singleHopOnly","independentField","inputCurrencyId","INPUT","outputCurrencyId","OUTPUT","inputCurrency","outputCurrency","recipientLookup","to","relevantTokenBalances","isExactIn","parsedAmount","bestV2TradeExactIn","maxHops","bestV2TradeExactOut","bestV3TradeExactIn","bestV3TradeExactOut","v2Trade","v3Trade","currencyBalances","currencies","inputError","formattedTo","toggledTrade","v2","allowedSlippage","maximumAmountIn","balanceIn","amountIn","lessThan","symbol","v3TradeState","parseCurrencyFromURLParameter","urlParam","valid","toUpperCase","parseTokenAmountURLParameter","isNaN","parseFloat","parseIndependentFieldURLParameter","toLowerCase","ENS_NAME_REGEX","ADDRESS_REGEX","validatedRecipient","test","queryParametersToSwapState","parsedQs","exactAmount","exactField","useDefaultsFromURLSearch","chainId","result","setResult","parsed"],"mappings":"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","sourcesContent":["import { t } from '@lingui/macro'\nimport JSBI from 'jsbi'\nimport { Trade as V3Trade } from '@uniswap/v3-sdk'\nimport { useBestV3TradeExactIn, useBestV3TradeExactOut, V3TradeState } from '../../hooks/useBestV3Trade'\nimport useENS from '../../hooks/useENS'\nimport { parseUnits } from '@ethersproject/units'\nimport { Currency, CurrencyAmount, Percent, TradeType } from '@uniswap/sdk-core'\nimport { Trade as V2Trade } from '@uniswap/v2-sdk'\nimport { ParsedQs } from 'qs'\nimport { useCallback, useEffect, useState } from 'react'\nimport { useActiveWeb3React } from '../../hooks/web3'\nimport { useCurrency } from '../../hooks/Tokens'\nimport useSwapSlippageTolerance from '../../hooks/useSwapSlippageTolerance'\nimport { Version } from '../../hooks/useToggledVersion'\nimport { useV2TradeExactIn, useV2TradeExactOut } from '../../hooks/useV2Trade'\nimport useParsedQueryString from '../../hooks/useParsedQueryString'\nimport { isAddress } from '../../utils'\nimport { AppState } from '../index'\nimport { useCurrencyBalances } from '../wallet/hooks'\nimport { Field, replaceSwapState, selectCurrency, setRecipient, switchCurrencies, typeInput } from './actions'\nimport { SwapState } from './reducer'\nimport { useUserSingleHopOnly } from 'state/user/hooks'\nimport { useAppDispatch, useAppSelector } from 'state/hooks'\n\nexport function useSwapState(): AppState['swap'] {\n  return useAppSelector((state) => state.swap)\n}\n\nexport function useSwapActionHandlers(): {\n  onCurrencySelection: (field: Field, currency: Currency) => void\n  onSwitchTokens: () => void\n  onUserInput: (field: Field, typedValue: string) => void\n  onChangeRecipient: (recipient: string | null) => void\n} {\n  const dispatch = useAppDispatch()\n  const onCurrencySelection = useCallback(\n    (field: Field, currency: Currency) => {\n      dispatch(\n        selectCurrency({\n          field,\n          currencyId: currency.isToken ? currency.address : currency.isNative ? 'ETH' : '',\n        })\n      )\n    },\n    [dispatch]\n  )\n\n  const onSwitchTokens = useCallback(() => {\n    dispatch(switchCurrencies())\n  }, [dispatch])\n\n  const onUserInput = useCallback(\n    (field: Field, typedValue: string) => {\n      dispatch(typeInput({ field, typedValue }))\n    },\n    [dispatch]\n  )\n\n  const onChangeRecipient = useCallback(\n    (recipient: string | null) => {\n      dispatch(setRecipient({ recipient }))\n    },\n    [dispatch]\n  )\n\n  return {\n    onSwitchTokens,\n    onCurrencySelection,\n    onUserInput,\n    onChangeRecipient,\n  }\n}\n\n// try to parse a user entered amount for a given token\nexport function tryParseAmount<T extends Currency>(value?: string, currency?: T): CurrencyAmount<T> | undefined {\n  if (!value || !currency) {\n    return undefined\n  }\n  try {\n    const typedValueParsed = parseUnits(value, currency.decimals).toString()\n    if (typedValueParsed !== '0') {\n      return CurrencyAmount.fromRawAmount(currency, JSBI.BigInt(typedValueParsed))\n    }\n  } catch (error) {\n    // should fail if the user specifies too many decimal places of precision (or maybe exceed max uint?)\n    console.debug(`Failed to parse input amount: \"${value}\"`, error)\n  }\n  // necessary for all paths to return a value\n  return undefined\n}\n\nconst BAD_RECIPIENT_ADDRESSES: { [address: string]: true } = {\n  '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f': true, // v2 factory\n  '0xf164fC0Ec4E93095b804a4795bBe1e041497b92a': true, // v2 router 01\n  '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D': true, // v2 router 02\n}\n\n/**\n * Returns true if any of the pairs or tokens in a trade have the given checksummed address\n * @param trade to check for the given address\n * @param checksummedAddress address to check in the pairs and tokens\n */\nfunction involvesAddress(\n  trade: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType>,\n  checksummedAddress: string\n): boolean {\n  const path = trade instanceof V2Trade ? trade.route.path : trade.route.tokenPath\n  return (\n    path.some((token) => token.address === checksummedAddress) ||\n    (trade instanceof V2Trade\n      ? trade.route.pairs.some((pair) => pair.liquidityToken.address === checksummedAddress)\n      : false)\n  )\n}\n\n// from the current swap inputs, compute the best trade and return it.\nexport function useDerivedSwapInfo(toggledVersion: Version): {\n  currencies: { [field in Field]?: Currency }\n  currencyBalances: { [field in Field]?: CurrencyAmount<Currency> }\n  parsedAmount: CurrencyAmount<Currency> | undefined\n  inputError?: string\n  v2Trade: V2Trade<Currency, Currency, TradeType> | undefined\n  v3TradeState: { trade: V3Trade<Currency, Currency, TradeType> | null; state: V3TradeState }\n  toggledTrade: V2Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType> | undefined\n  allowedSlippage: Percent\n} {\n  const { account } = useActiveWeb3React()\n\n  const [singleHopOnly] = useUserSingleHopOnly()\n\n  const {\n    independentField,\n    typedValue,\n    [Field.INPUT]: { currencyId: inputCurrencyId },\n    [Field.OUTPUT]: { currencyId: outputCurrencyId },\n    recipient,\n  } = useSwapState()\n\n  const inputCurrency = useCurrency(inputCurrencyId)\n  const outputCurrency = useCurrency(outputCurrencyId)\n  const recipientLookup = useENS(recipient ?? undefined)\n  const to: string | null = (recipient === null ? account : recipientLookup.address) ?? null\n\n  const relevantTokenBalances = useCurrencyBalances(account ?? undefined, [\n    inputCurrency ?? undefined,\n    outputCurrency ?? undefined,\n  ])\n\n  const isExactIn: boolean = independentField === Field.INPUT\n  const parsedAmount = tryParseAmount(typedValue, (isExactIn ? inputCurrency : outputCurrency) ?? undefined)\n\n  const bestV2TradeExactIn = useV2TradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined, {\n    maxHops: singleHopOnly ? 1 : undefined,\n  })\n  const bestV2TradeExactOut = useV2TradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined, {\n    maxHops: singleHopOnly ? 1 : undefined,\n  })\n\n  const bestV3TradeExactIn = useBestV3TradeExactIn(isExactIn ? parsedAmount : undefined, outputCurrency ?? undefined)\n  const bestV3TradeExactOut = useBestV3TradeExactOut(inputCurrency ?? undefined, !isExactIn ? parsedAmount : undefined)\n\n  const v2Trade = isExactIn ? bestV2TradeExactIn : bestV2TradeExactOut\n  const v3Trade = (isExactIn ? bestV3TradeExactIn : bestV3TradeExactOut) ?? undefined\n\n  const currencyBalances = {\n    [Field.INPUT]: relevantTokenBalances[0],\n    [Field.OUTPUT]: relevantTokenBalances[1],\n  }\n\n  const currencies: { [field in Field]?: Currency } = {\n    [Field.INPUT]: inputCurrency ?? undefined,\n    [Field.OUTPUT]: outputCurrency ?? undefined,\n  }\n\n  let inputError: string | undefined\n  if (!account) {\n    inputError = t`Connect Wallet`\n  }\n\n  if (!parsedAmount) {\n    inputError = inputError ?? t`Enter an amount`\n  }\n\n  if (!currencies[Field.INPUT] || !currencies[Field.OUTPUT]) {\n    inputError = inputError ?? t`Select a token`\n  }\n\n  const formattedTo = isAddress(to)\n  if (!to || !formattedTo) {\n    inputError = inputError ?? t`Enter a recipient`\n  } else {\n    if (\n      BAD_RECIPIENT_ADDRESSES[formattedTo] ||\n      (bestV2TradeExactIn && involvesAddress(bestV2TradeExactIn, formattedTo)) ||\n      (bestV2TradeExactOut && involvesAddress(bestV2TradeExactOut, formattedTo))\n    ) {\n      inputError = inputError ?? t`Invalid recipient`\n    }\n  }\n\n  const toggledTrade = (toggledVersion === Version.v2 ? v2Trade : v3Trade.trade) ?? undefined\n  const allowedSlippage = useSwapSlippageTolerance(toggledTrade)\n\n  // compare input balance to max input based on version\n  const [balanceIn, amountIn] = [currencyBalances[Field.INPUT], toggledTrade?.maximumAmountIn(allowedSlippage)]\n\n  if (balanceIn && amountIn && balanceIn.lessThan(amountIn)) {\n    inputError = t`Insufficient ${amountIn.currency.symbol} balance`\n  }\n\n  return {\n    currencies,\n    currencyBalances,\n    parsedAmount,\n    inputError,\n    v2Trade: v2Trade ?? undefined,\n    v3TradeState: v3Trade,\n    toggledTrade,\n    allowedSlippage,\n  }\n}\n\nfunction parseCurrencyFromURLParameter(urlParam: any): string {\n  if (typeof urlParam === 'string') {\n    const valid = isAddress(urlParam)\n    if (valid) return valid\n    if (urlParam.toUpperCase() === 'ETH') return 'ETH'\n  }\n  return ''\n}\n\nfunction parseTokenAmountURLParameter(urlParam: any): string {\n  return typeof urlParam === 'string' && !isNaN(parseFloat(urlParam)) ? urlParam : ''\n}\n\nfunction parseIndependentFieldURLParameter(urlParam: any): Field {\n  return typeof urlParam === 'string' && urlParam.toLowerCase() === 'output' ? Field.OUTPUT : Field.INPUT\n}\n\nconst ENS_NAME_REGEX = /^[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)?$/\nconst ADDRESS_REGEX = /^0x[a-fA-F0-9]{40}$/\nfunction validatedRecipient(recipient: any): string | null {\n  if (typeof recipient !== 'string') return null\n  const address = isAddress(recipient)\n  if (address) return address\n  if (ENS_NAME_REGEX.test(recipient)) return recipient\n  if (ADDRESS_REGEX.test(recipient)) return recipient\n  return null\n}\n\nexport function queryParametersToSwapState(parsedQs: ParsedQs): SwapState {\n  let inputCurrency = parseCurrencyFromURLParameter(parsedQs.inputCurrency)\n  let outputCurrency = parseCurrencyFromURLParameter(parsedQs.outputCurrency)\n  if (inputCurrency === '' && outputCurrency === '') {\n    // default to ETH input\n    inputCurrency = 'ETH'\n  } else if (inputCurrency === outputCurrency) {\n    // clear output if identical\n    outputCurrency = ''\n  }\n\n  const recipient = validatedRecipient(parsedQs.recipient)\n\n  return {\n    [Field.INPUT]: {\n      currencyId: inputCurrency,\n    },\n    [Field.OUTPUT]: {\n      currencyId: outputCurrency,\n    },\n    typedValue: parseTokenAmountURLParameter(parsedQs.exactAmount),\n    independentField: parseIndependentFieldURLParameter(parsedQs.exactField),\n    recipient,\n  }\n}\n\n// updates the swap state to use the defaults for a given network\nexport function useDefaultsFromURLSearch():\n  | { inputCurrencyId: string | undefined; outputCurrencyId: string | undefined }\n  | undefined {\n  const { chainId } = useActiveWeb3React()\n  const dispatch = useAppDispatch()\n  const parsedQs = useParsedQueryString()\n  const [result, setResult] =\n    useState<{ inputCurrencyId: string | undefined; outputCurrencyId: string | undefined } | undefined>()\n\n  useEffect(() => {\n    if (!chainId) return\n    const parsed = queryParametersToSwapState(parsedQs)\n\n    dispatch(\n      replaceSwapState({\n        typedValue: parsed.typedValue,\n        field: parsed.independentField,\n        inputCurrencyId: parsed[Field.INPUT].currencyId,\n        outputCurrencyId: parsed[Field.OUTPUT].currencyId,\n        recipient: parsed.recipient,\n      })\n    )\n\n    setResult({ inputCurrencyId: parsed[Field.INPUT].currencyId, outputCurrencyId: parsed[Field.OUTPUT].currencyId })\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dispatch, chainId])\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}