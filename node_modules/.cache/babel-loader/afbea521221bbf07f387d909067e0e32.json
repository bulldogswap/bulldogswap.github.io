{"ast":null,"code":"import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useSingleCallResult}from'state/multicall/hooks';import{useEffect,useState}from'react';import{useV3NFTPositionManagerContract}from'./useContract';import{BigNumber}from'@ethersproject/bignumber';import{CurrencyAmount}from'@uniswap/sdk-core';import{useBlockNumber}from'state/application/hooks';import{unwrappedToken}from'utils/unwrappedToken';var MAX_UINT128=BigNumber.from(2).pow(128).sub(1);// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(pool,tokenId){var _useSingleCallResult$;var asWETH=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;var positionManager=useV3NFTPositionManagerContract(false);var owner=(_useSingleCallResult$=useSingleCallResult(tokenId?positionManager:null,'ownerOf',[tokenId]).result)===null||_useSingleCallResult$===void 0?void 0:_useSingleCallResult$[0];var tokenIdHexString=tokenId===null||tokenId===void 0?void 0:tokenId.toHexString();var latestBlockNumber=useBlockNumber();// TODO find a way to get this into multicall\n// latestBlockNumber is included to ensure data stays up-to-date every block\nvar _useState=useState(),_useState2=_slicedToArray(_useState,2),amounts=_useState2[0],setAmounts=_useState2[1];useEffect(function(){var stale=false;if(positionManager&&tokenIdHexString&&owner&&typeof latestBlockNumber==='number'){positionManager.callStatic.collect({tokenId:tokenIdHexString,recipient:owner,// some tokens might fail if transferred to address(0)\namount0Max:MAX_UINT128,amount1Max:MAX_UINT128},{from:owner}// need to simulate the call as the owner\n).then(function(results){if(!stale)setAmounts([results.amount0,results.amount1]);});}return function(){stale=true;};},[positionManager,tokenIdHexString,owner,latestBlockNumber]);if(pool&&amounts){return[CurrencyAmount.fromRawAmount(!asWETH?unwrappedToken(pool.token0):pool.token0,amounts[0].toString()),CurrencyAmount.fromRawAmount(!asWETH?unwrappedToken(pool.token1):pool.token1,amounts[1].toString())];}else{return[undefined,undefined];}}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useV3PositionFees.ts"],"names":["useSingleCallResult","useEffect","useState","useV3NFTPositionManagerContract","BigNumber","CurrencyAmount","useBlockNumber","unwrappedToken","MAX_UINT128","from","pow","sub","useV3PositionFees","pool","tokenId","asWETH","positionManager","owner","result","tokenIdHexString","toHexString","latestBlockNumber","amounts","setAmounts","stale","callStatic","collect","recipient","amount0Max","amount1Max","then","results","amount0","amount1","fromRawAmount","token0","toString","token1","undefined"],"mappings":"wLAAA,OAASA,mBAAT,KAAoC,uBAApC,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,+BAAT,KAAgD,eAAhD,CACA,OAASC,SAAT,KAA0B,0BAA1B,CAEA,OAASC,cAAT,KAAyC,mBAAzC,CACA,OAASC,cAAT,KAA+B,yBAA/B,CACA,OAASC,cAAT,KAA+B,sBAA/B,CAEA,GAAMC,CAAAA,WAAW,CAAGJ,SAAS,CAACK,IAAV,CAAe,CAAf,EAAkBC,GAAlB,CAAsB,GAAtB,EAA2BC,GAA3B,CAA+B,CAA/B,CAApB,CAEA;AACA,MAAO,SAASC,CAAAA,iBAAT,CACLC,IADK,CAELC,OAFK,CAI0E,8BAD/EC,CAAAA,MAC+E,2DADtE,KACsE,CAC/E,GAAMC,CAAAA,eAAe,CAAGb,+BAA+B,CAAC,KAAD,CAAvD,CACA,GAAMc,CAAAA,KAAyB,wBAAGjB,mBAAmB,CAACc,OAAO,CAAGE,eAAH,CAAqB,IAA7B,CAAmC,SAAnC,CAA8C,CAACF,OAAD,CAA9C,CAAnB,CAC/BI,MAD4B,gDAAG,sBACtB,CADsB,CAAlC,CAGA,GAAMC,CAAAA,gBAAgB,CAAGL,OAAH,SAAGA,OAAH,iBAAGA,OAAO,CAAEM,WAAT,EAAzB,CACA,GAAMC,CAAAA,iBAAiB,CAAGf,cAAc,EAAxC,CAEA;AACA;AACA,cAA8BJ,QAAQ,EAAtC,wCAAOoB,OAAP,eAAgBC,UAAhB,eACAtB,SAAS,CAAC,UAAM,CACd,GAAIuB,CAAAA,KAAK,CAAG,KAAZ,CAEA,GAAIR,eAAe,EAAIG,gBAAnB,EAAuCF,KAAvC,EAAgD,MAAOI,CAAAA,iBAAP,GAA6B,QAAjF,CAA2F,CACzFL,eAAe,CAACS,UAAhB,CACGC,OADH,CAEI,CACEZ,OAAO,CAAEK,gBADX,CAEEQ,SAAS,CAAEV,KAFb,CAEoB;AAClBW,UAAU,CAAEpB,WAHd,CAIEqB,UAAU,CAAErB,WAJd,CAFJ,CAQI,CAAEC,IAAI,CAAEQ,KAAR,CAAgB;AARpB,EAUGa,IAVH,CAUQ,SAACC,OAAD,CAAa,CACjB,GAAI,CAACP,KAAL,CAAYD,UAAU,CAAC,CAACQ,OAAO,CAACC,OAAT,CAAkBD,OAAO,CAACE,OAA1B,CAAD,CAAV,CACb,CAZH,EAaD,CAED,MAAO,WAAM,CACXT,KAAK,CAAG,IAAR,CACD,CAFD,CAGD,CAtBQ,CAsBN,CAACR,eAAD,CAAkBG,gBAAlB,CAAoCF,KAApC,CAA2CI,iBAA3C,CAtBM,CAAT,CAwBA,GAAIR,IAAI,EAAIS,OAAZ,CAAqB,CACnB,MAAO,CACLjB,cAAc,CAAC6B,aAAf,CAA6B,CAACnB,MAAD,CAAUR,cAAc,CAACM,IAAI,CAACsB,MAAN,CAAxB,CAAwCtB,IAAI,CAACsB,MAA1E,CAAkFb,OAAO,CAAC,CAAD,CAAP,CAAWc,QAAX,EAAlF,CADK,CAEL/B,cAAc,CAAC6B,aAAf,CAA6B,CAACnB,MAAD,CAAUR,cAAc,CAACM,IAAI,CAACwB,MAAN,CAAxB,CAAwCxB,IAAI,CAACwB,MAA1E,CAAkFf,OAAO,CAAC,CAAD,CAAP,CAAWc,QAAX,EAAlF,CAFK,CAAP,CAID,CALD,IAKO,CACL,MAAO,CAACE,SAAD,CAAYA,SAAZ,CAAP,CACD,CACF","sourcesContent":["import { useSingleCallResult } from 'state/multicall/hooks'\nimport { useEffect, useState } from 'react'\nimport { useV3NFTPositionManagerContract } from './useContract'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { CurrencyAmount, Currency } from '@uniswap/sdk-core'\nimport { useBlockNumber } from 'state/application/hooks'\nimport { unwrappedToken } from 'utils/unwrappedToken'\n\nconst MAX_UINT128 = BigNumber.from(2).pow(128).sub(1)\n\n// compute current + counterfactual fees for a v3 position\nexport function useV3PositionFees(\n  pool?: Pool,\n  tokenId?: BigNumber,\n  asWETH = false\n): [CurrencyAmount<Currency>, CurrencyAmount<Currency>] | [undefined, undefined] {\n  const positionManager = useV3NFTPositionManagerContract(false)\n  const owner: string | undefined = useSingleCallResult(tokenId ? positionManager : null, 'ownerOf', [tokenId])\n    .result?.[0]\n\n  const tokenIdHexString = tokenId?.toHexString()\n  const latestBlockNumber = useBlockNumber()\n\n  // TODO find a way to get this into multicall\n  // latestBlockNumber is included to ensure data stays up-to-date every block\n  const [amounts, setAmounts] = useState<[BigNumber, BigNumber]>()\n  useEffect(() => {\n    let stale = false\n\n    if (positionManager && tokenIdHexString && owner && typeof latestBlockNumber === 'number') {\n      positionManager.callStatic\n        .collect(\n          {\n            tokenId: tokenIdHexString,\n            recipient: owner, // some tokens might fail if transferred to address(0)\n            amount0Max: MAX_UINT128,\n            amount1Max: MAX_UINT128,\n          },\n          { from: owner } // need to simulate the call as the owner\n        )\n        .then((results) => {\n          if (!stale) setAmounts([results.amount0, results.amount1])\n        })\n    }\n\n    return () => {\n      stale = true\n    }\n  }, [positionManager, tokenIdHexString, owner, latestBlockNumber])\n\n  if (pool && amounts) {\n    return [\n      CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token0) : pool.token0, amounts[0].toString()),\n      CurrencyAmount.fromRawAmount(!asWETH ? unwrappedToken(pool.token1) : pool.token1, amounts[1].toString()),\n    ]\n  } else {\n    return [undefined, undefined]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}