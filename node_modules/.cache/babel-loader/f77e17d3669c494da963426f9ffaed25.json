{"ast":null,"code":"import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _objectWithoutProperties from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";import _styled from\"styled-components\";var _excluded=[\"value\",\"onUserInput\",\"placeholder\",\"prependSymbol\"];import React from'react';import{escapeRegExp}from'../../utils';import{jsx as _jsx}from\"react/jsx-runtime\";var StyledInput=_styled.input.withConfig({componentId:\"sc-1x3stf0-0\"})([\"color:\",\";width:0;position:relative;font-weight:500;outline:none;border:none;flex:1 1 auto;background-color:\",\";font-size:\",\";text-align:\",\";white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding:0px;-webkit-appearance:textfield;text-align:right;::-webkit-search-decoration{-webkit-appearance:none;}[type='number']{-moz-appearance:textfield;}::-webkit-outer-spin-button,::-webkit-inner-spin-button{-webkit-appearance:none;}::placeholder{color:\",\";}\"],function(_ref){var error=_ref.error,theme=_ref.theme;return error?theme.red1:theme.text1;},function(_ref2){var theme=_ref2.theme;return theme.bg1;},function(_ref3){var fontSize=_ref3.fontSize;return fontSize!==null&&fontSize!==void 0?fontSize:'24px';},function(_ref4){var align=_ref4.align;return align&&align;},function(_ref5){var theme=_ref5.theme;return theme.text4;});var inputRegex=RegExp(\"^\\\\d*(?:\\\\\\\\[.])?\\\\d*$\");// match escaped \".\" characters via in a non-capturing group\nexport var Input=/*#__PURE__*/React.memo(function InnerInput(_ref6){var value=_ref6.value,onUserInput=_ref6.onUserInput,placeholder=_ref6.placeholder,prependSymbol=_ref6.prependSymbol,rest=_objectWithoutProperties(_ref6,_excluded);var enforcer=function enforcer(nextUserInput){if(nextUserInput===''||inputRegex.test(escapeRegExp(nextUserInput))){onUserInput(nextUserInput);}};return/*#__PURE__*/_jsx(StyledInput,_objectSpread(_objectSpread({},rest),{},{value:prependSymbol&&value?prependSymbol+value:value,onChange:function onChange(event){if(prependSymbol){var _value=event.target.value;// cut off prepended symbol\nvar formattedValue=_value.toString().includes(prependSymbol)?_value.toString().slice(1,_value.toString().length+1):_value;// replace commas with periods, because uniswap exclusively uses period as the decimal separator\nenforcer(formattedValue.replace(/,/g,'.'));}else{enforcer(event.target.value.replace(/,/g,'.'));}}// universal input options\n,inputMode:\"decimal\",autoComplete:\"off\",autoCorrect:\"off\"// text-specific options\n,type:\"text\",pattern:\"^[0-9]*[.,]?[0-9]*$\",placeholder:placeholder||'0.0',minLength:1,maxLength:79,spellCheck:\"false\"}));});export default Input;// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/components/NumericalInput/index.tsx"],"names":["React","escapeRegExp","StyledInput","styled","input","error","theme","red1","text1","bg1","fontSize","align","text4","inputRegex","RegExp","Input","memo","InnerInput","value","onUserInput","placeholder","prependSymbol","rest","enforcer","nextUserInput","test","event","target","formattedValue","toString","includes","slice","length","replace"],"mappings":"8eAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,OAASC,YAAT,KAA6B,aAA7B,C,2CAEA,GAAMC,CAAAA,WAAW,CAAGC,OAAM,CAACC,KAAV,0fACN,kBAAGC,CAAAA,KAAH,MAAGA,KAAH,CAAUC,KAAV,MAAUA,KAAV,OAAuBD,CAAAA,KAAK,CAAGC,KAAK,CAACC,IAAT,CAAgBD,KAAK,CAACE,KAAlD,EADM,CAQK,mBAAGF,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACG,GAArB,EARL,CASF,mBAAGC,CAAAA,QAAH,OAAGA,QAAH,OAAkBA,CAAAA,QAAlB,SAAkBA,QAAlB,UAAkBA,QAAlB,CAA8B,MAA9B,EATE,CAUD,mBAAGC,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,EAAIA,KAAxB,EAVC,CAgCJ,mBAAGL,CAAAA,KAAH,OAAGA,KAAH,OAAeA,CAAAA,KAAK,CAACM,KAArB,EAhCI,CAAjB,CAoCA,GAAMC,CAAAA,UAAU,CAAGC,MAAM,0BAAzB,CAAoD;AAEpD,MAAO,IAAMC,CAAAA,KAAK,cAAGf,KAAK,CAACgB,IAAN,CAAW,QAASC,CAAAA,UAAT,OAawC,IAZtEC,CAAAA,KAYsE,OAZtEA,KAYsE,CAXtEC,WAWsE,OAXtEA,WAWsE,CAVtEC,WAUsE,OAVtEA,WAUsE,CATtEC,aASsE,OATtEA,aASsE,CARnEC,IAQmE,2CACtE,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAACC,aAAD,CAA2B,CAC1C,GAAIA,aAAa,GAAK,EAAlB,EAAwBX,UAAU,CAACY,IAAX,CAAgBxB,YAAY,CAACuB,aAAD,CAA5B,CAA5B,CAA0E,CACxEL,WAAW,CAACK,aAAD,CAAX,CACD,CACF,CAJD,CAMA,mBACE,KAAC,WAAD,gCACMF,IADN,MAEE,KAAK,CAAED,aAAa,EAAIH,KAAjB,CAAyBG,aAAa,CAAGH,KAAzC,CAAiDA,KAF1D,CAGE,QAAQ,CAAE,kBAACQ,KAAD,CAAW,CACnB,GAAIL,aAAJ,CAAmB,CACjB,GAAMH,CAAAA,MAAK,CAAGQ,KAAK,CAACC,MAAN,CAAaT,KAA3B,CAEA;AACA,GAAMU,CAAAA,cAAc,CAAGV,MAAK,CAACW,QAAN,GAAiBC,QAAjB,CAA0BT,aAA1B,EACnBH,MAAK,CAACW,QAAN,GAAiBE,KAAjB,CAAuB,CAAvB,CAA0Bb,MAAK,CAACW,QAAN,GAAiBG,MAAjB,CAA0B,CAApD,CADmB,CAEnBd,MAFJ,CAIA;AACAK,QAAQ,CAACK,cAAc,CAACK,OAAf,CAAuB,IAAvB,CAA6B,GAA7B,CAAD,CAAR,CACD,CAVD,IAUO,CACLV,QAAQ,CAACG,KAAK,CAACC,MAAN,CAAaT,KAAb,CAAmBe,OAAnB,CAA2B,IAA3B,CAAiC,GAAjC,CAAD,CAAR,CACD,CACF,CACD;AAlBF,CAmBE,SAAS,CAAC,SAnBZ,CAoBE,YAAY,CAAC,KApBf,CAqBE,WAAW,CAAC,KACZ;AAtBF,CAuBE,IAAI,CAAC,MAvBP,CAwBE,OAAO,CAAC,qBAxBV,CAyBE,WAAW,CAAEb,WAAW,EAAI,KAzB9B,CA0BE,SAAS,CAAE,CA1Bb,CA2BE,SAAS,CAAE,EA3Bb,CA4BE,UAAU,CAAC,OA5Bb,GADF,CAgCD,CApDoB,CAAd,CAsDP,cAAeL,CAAAA,KAAf,CAEA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components/macro'\nimport { escapeRegExp } from '../../utils'\n\nconst StyledInput = styled.input<{ error?: boolean; fontSize?: string; align?: string }>`\n  color: ${({ error, theme }) => (error ? theme.red1 : theme.text1)};\n  width: 0;\n  position: relative;\n  font-weight: 500;\n  outline: none;\n  border: none;\n  flex: 1 1 auto;\n  background-color: ${({ theme }) => theme.bg1};\n  font-size: ${({ fontSize }) => fontSize ?? '24px'};\n  text-align: ${({ align }) => align && align};\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  padding: 0px;\n  -webkit-appearance: textfield;\n  text-align: right;\n\n  ::-webkit-search-decoration {\n    -webkit-appearance: none;\n  }\n\n  [type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  ::-webkit-outer-spin-button,\n  ::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  ::placeholder {\n    color: ${({ theme }) => theme.text4};\n  }\n`\n\nconst inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n\nexport const Input = React.memo(function InnerInput({\n  value,\n  onUserInput,\n  placeholder,\n  prependSymbol,\n  ...rest\n}: {\n  value: string | number\n  onUserInput: (input: string) => void\n  error?: boolean\n  fontSize?: string\n  align?: 'right' | 'left'\n  prependSymbol?: string | undefined\n} & Omit<React.HTMLProps<HTMLInputElement>, 'ref' | 'onChange' | 'as'>) {\n  const enforcer = (nextUserInput: string) => {\n    if (nextUserInput === '' || inputRegex.test(escapeRegExp(nextUserInput))) {\n      onUserInput(nextUserInput)\n    }\n  }\n\n  return (\n    <StyledInput\n      {...rest}\n      value={prependSymbol && value ? prependSymbol + value : value}\n      onChange={(event) => {\n        if (prependSymbol) {\n          const value = event.target.value\n\n          // cut off prepended symbol\n          const formattedValue = value.toString().includes(prependSymbol)\n            ? value.toString().slice(1, value.toString().length + 1)\n            : value\n\n          // replace commas with periods, because uniswap exclusively uses period as the decimal separator\n          enforcer(formattedValue.replace(/,/g, '.'))\n        } else {\n          enforcer(event.target.value.replace(/,/g, '.'))\n        }\n      }}\n      // universal input options\n      inputMode=\"decimal\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      // text-specific options\n      type=\"text\"\n      pattern=\"^[0-9]*[.,]?[0-9]*$\"\n      placeholder={placeholder || '0.0'}\n      minLength={1}\n      maxLength={79}\n      spellCheck=\"false\"\n    />\n  )\n})\n\nexport default Input\n\n// const inputRegex = RegExp(`^\\\\d*(?:\\\\\\\\[.])?\\\\d*$`) // match escaped \".\" characters via in a non-capturing group\n"]},"metadata":{},"sourceType":"module"}