{"ast":null,"code":"import _slicedToArray from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{DEFAULT_LOCALE,SUPPORTED_LOCALES}from'constants/locales';import{useEffect,useMemo}from'react';import{useUserLocale,useUserLocaleManager}from'state/user/hooks';import useParsedQueryString from'./useParsedQueryString';/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */function parseLocale(maybeSupportedLocale){var lowerMaybeSupportedLocale=maybeSupportedLocale.toLowerCase();return SUPPORTED_LOCALES.find(function(locale){return locale.toLowerCase()===lowerMaybeSupportedLocale||locale.split('-')[0]===lowerMaybeSupportedLocale;});}/**\n * Returns the supported locale read from the user agent (navigator)\n */export function navigatorLocale(){if(!navigator.language)return undefined;var _navigator$language$s=navigator.language.split('-'),_navigator$language$s2=_slicedToArray(_navigator$language$s,2),language=_navigator$language$s2[0],region=_navigator$language$s2[1];if(region){var _parseLocale;return(_parseLocale=parseLocale(\"\".concat(language,\"-\").concat(region.toUpperCase())))!==null&&_parseLocale!==void 0?_parseLocale:parseLocale(language);}return parseLocale(language);}export function useSetLocaleFromUrl(){var parsed=useParsedQueryString();var _useUserLocaleManager=useUserLocaleManager(),_useUserLocaleManager2=_slicedToArray(_useUserLocaleManager,2),userLocale=_useUserLocaleManager2[0],setUserLocale=_useUserLocaleManager2[1];useEffect(function(){var urlLocale=typeof parsed.lng==='string'?parseLocale(parsed.lng):undefined;if(urlLocale&&urlLocale!==userLocale){setUserLocale(urlLocale);}},[parsed.lng,setUserLocale,userLocale]);}/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n */export function useActiveLocale(){var userLocale=useUserLocale();return useMemo(function(){var _ref;return(_ref=userLocale!==null&&userLocale!==void 0?userLocale:navigatorLocale())!==null&&_ref!==void 0?_ref:DEFAULT_LOCALE;},[userLocale]);}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/hooks/useActiveLocale.ts"],"names":["DEFAULT_LOCALE","SUPPORTED_LOCALES","useEffect","useMemo","useUserLocale","useUserLocaleManager","useParsedQueryString","parseLocale","maybeSupportedLocale","lowerMaybeSupportedLocale","toLowerCase","find","locale","split","navigatorLocale","navigator","language","undefined","region","toUpperCase","useSetLocaleFromUrl","parsed","userLocale","setUserLocale","urlLocale","lng","useActiveLocale"],"mappings":"wLAAA,OAASA,cAAT,CAA0CC,iBAA1C,KAAmE,mBAAnE,CACA,OAASC,SAAT,CAAoBC,OAApB,KAAmC,OAAnC,CACA,OAASC,aAAT,CAAwBC,oBAAxB,KAAoD,kBAApD,CACA,MAAOC,CAAAA,oBAAP,KAAiC,wBAAjC,CAEA;AACA;AACA;AACA,GACA,QAASC,CAAAA,WAAT,CAAqBC,oBAArB,CAAgF,CAC9E,GAAMC,CAAAA,yBAAyB,CAAGD,oBAAoB,CAACE,WAArB,EAAlC,CACA,MAAOT,CAAAA,iBAAiB,CAACU,IAAlB,CACL,SAACC,MAAD,QAAYA,CAAAA,MAAM,CAACF,WAAP,KAAyBD,yBAAzB,EAAsDG,MAAM,CAACC,KAAP,CAAa,GAAb,EAAkB,CAAlB,IAAyBJ,yBAA3F,EADK,CAAP,CAGD,CAED;AACA;AACA,GACA,MAAO,SAASK,CAAAA,eAAT,EAAwD,CAC7D,GAAI,CAACC,SAAS,CAACC,QAAf,CAAyB,MAAOC,CAAAA,SAAP,CAEzB,0BAA2BF,SAAS,CAACC,QAAV,CAAmBH,KAAnB,CAAyB,GAAzB,CAA3B,gEAAOG,QAAP,2BAAiBE,MAAjB,2BAEA,GAAIA,MAAJ,CAAY,kBACV,oBAAOX,WAAW,WAAIS,QAAJ,aAAgBE,MAAM,CAACC,WAAP,EAAhB,EAAlB,6CAA6DZ,WAAW,CAACS,QAAD,CAAxE,CACD,CAED,MAAOT,CAAAA,WAAW,CAACS,QAAD,CAAlB,CACD,CAED,MAAO,SAASI,CAAAA,mBAAT,EAA+B,CACpC,GAAMC,CAAAA,MAAM,CAAGf,oBAAoB,EAAnC,CACA,0BAAoCD,oBAAoB,EAAxD,gEAAOiB,UAAP,2BAAmBC,aAAnB,2BAEArB,SAAS,CAAC,UAAM,CACd,GAAMsB,CAAAA,SAAS,CAAG,MAAOH,CAAAA,MAAM,CAACI,GAAd,GAAsB,QAAtB,CAAiClB,WAAW,CAACc,MAAM,CAACI,GAAR,CAA5C,CAA2DR,SAA7E,CACA,GAAIO,SAAS,EAAIA,SAAS,GAAKF,UAA/B,CAA2C,CACzCC,aAAa,CAACC,SAAD,CAAb,CACD,CACF,CALQ,CAKN,CAACH,MAAM,CAACI,GAAR,CAAaF,aAAb,CAA4BD,UAA5B,CALM,CAAT,CAMD,CAED;AACA;AACA,GACA,MAAO,SAASI,CAAAA,eAAT,EAA4C,CACjD,GAAMJ,CAAAA,UAAU,CAAGlB,aAAa,EAAhC,CAEA,MAAOD,CAAAA,OAAO,CAAC,UAAM,UACnB,YAAOmB,UAAP,SAAOA,UAAP,UAAOA,UAAP,CAAqBR,eAAe,EAApC,6BAA0Cd,cAA1C,CACD,CAFa,CAEX,CAACsB,UAAD,CAFW,CAAd,CAGD","sourcesContent":["import { DEFAULT_LOCALE, SupportedLocale, SUPPORTED_LOCALES } from 'constants/locales'\nimport { useEffect, useMemo } from 'react'\nimport { useUserLocale, useUserLocaleManager } from 'state/user/hooks'\nimport useParsedQueryString from './useParsedQueryString'\n\n/**\n * Given a locale string (e.g. from user agent), return the best match for corresponding SupportedLocale\n * @param maybeSupportedLocale the fuzzy locale identifier\n */\nfunction parseLocale(maybeSupportedLocale: string): SupportedLocale | undefined {\n  const lowerMaybeSupportedLocale = maybeSupportedLocale.toLowerCase()\n  return SUPPORTED_LOCALES.find(\n    (locale) => locale.toLowerCase() === lowerMaybeSupportedLocale || locale.split('-')[0] === lowerMaybeSupportedLocale\n  )\n}\n\n/**\n * Returns the supported locale read from the user agent (navigator)\n */\nexport function navigatorLocale(): SupportedLocale | undefined {\n  if (!navigator.language) return undefined\n\n  const [language, region] = navigator.language.split('-')\n\n  if (region) {\n    return parseLocale(`${language}-${region.toUpperCase()}`) ?? parseLocale(language)\n  }\n\n  return parseLocale(language)\n}\n\nexport function useSetLocaleFromUrl() {\n  const parsed = useParsedQueryString()\n  const [userLocale, setUserLocale] = useUserLocaleManager()\n\n  useEffect(() => {\n    const urlLocale = typeof parsed.lng === 'string' ? parseLocale(parsed.lng) : undefined\n    if (urlLocale && urlLocale !== userLocale) {\n      setUserLocale(urlLocale)\n    }\n  }, [parsed.lng, setUserLocale, userLocale])\n}\n\n/**\n * Returns the currently active locale, from a combination of user agent, query string, and user settings stored in redux\n */\nexport function useActiveLocale(): SupportedLocale {\n  const userLocale = useUserLocale()\n\n  return useMemo(() => {\n    return userLocale ?? navigatorLocale() ?? DEFAULT_LOCALE\n  }, [userLocale])\n}\n"]},"metadata":{},"sourceType":"module"}