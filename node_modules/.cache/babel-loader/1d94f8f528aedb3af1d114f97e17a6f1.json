{"ast":null,"code":"import _regeneratorRuntime from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _taggedTemplateLiteral from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";import _defineProperty from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _CHAIN_SUBGRAPH_URL,_templateObject,_templateObject2;import{createApi}from'@reduxjs/toolkit/query/react';import{SupportedChainId}from'constants/chains';import{ClientError,gql,GraphQLClient}from'graphql-request';// List of supported subgraphs. Note that the app currently only support one active subgraph at a time\nvar CHAIN_SUBGRAPH_URL=(_CHAIN_SUBGRAPH_URL={},_defineProperty(_CHAIN_SUBGRAPH_URL,SupportedChainId.MAINNET,'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'),_defineProperty(_CHAIN_SUBGRAPH_URL,SupportedChainId.RINKEBY,'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3'),_defineProperty(_CHAIN_SUBGRAPH_URL,SupportedChainId.ARBITRUM_ONE,'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-arbitrum-one'),_defineProperty(_CHAIN_SUBGRAPH_URL,SupportedChainId.OPTIMISM,'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-optimism'),_CHAIN_SUBGRAPH_URL);export var api=createApi({reducerPath:'dataApi',baseQuery:graphqlRequestBaseQuery(),endpoints:function endpoints(builder){return{allV3Ticks:builder.query({query:function query(_ref){var poolAddress=_ref.poolAddress,_ref$skip=_ref.skip,skip=_ref$skip===void 0?0:_ref$skip;return{document:gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n          query allV3Ticks($poolAddress: String!, $skip: Int!) {\\n            ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\\n              tickIdx\\n              liquidityNet\\n              price0\\n              price1\\n            }\\n          }\\n        \"]))),variables:{poolAddress:poolAddress,skip:skip}};}}),feeTierDistribution:builder.query({query:function query(_ref2){var token0=_ref2.token0,token1=_ref2.token1;return{document:gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n          query feeTierDistribution($token0: String!, $token1: String!) {\\n            _meta {\\n              block {\\n                number\\n              }\\n            }\\n            asToken0: pools(\\n              orderBy: totalValueLockedToken0\\n              orderDirection: desc\\n              where: { token0: $token0, token1: $token1 }\\n            ) {\\n              feeTier\\n              totalValueLockedToken0\\n              totalValueLockedToken1\\n            }\\n            asToken1: pools(\\n              orderBy: totalValueLockedToken0\\n              orderDirection: desc\\n              where: { token0: $token1, token1: $token0 }\\n            ) {\\n              feeTier\\n              totalValueLockedToken0\\n              totalValueLockedToken1\\n            }\\n          }\\n        \"]))),variables:{token0:token0,token1:token1}};}})};}});// Graphql query client wrapper that builds a dynamic url based on chain id\nfunction graphqlRequestBaseQuery(){return/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref3,_ref4){var document,variables,getState,chainId,subgraphUrl,name,message,stack,request,response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:document=_ref3.document,variables=_ref3.variables;getState=_ref4.getState;_context.prev=2;chainId=getState().application.chainId;subgraphUrl=chainId?CHAIN_SUBGRAPH_URL[chainId]:undefined;if(subgraphUrl){_context.next=7;break;}return _context.abrupt(\"return\",{error:{name:'UnsupportedChainId',message:\"Subgraph queries against ChainId \".concat(chainId,\" are not supported.\"),stack:''}});case 7:_context.next=9;return new GraphQLClient(subgraphUrl).request(document,variables);case 9:_context.t0=_context.sent;_context.t1={};return _context.abrupt(\"return\",{data:_context.t0,meta:_context.t1});case 14:_context.prev=14;_context.t2=_context[\"catch\"](2);if(!(_context.t2 instanceof ClientError)){_context.next=19;break;}name=_context.t2.name,message=_context.t2.message,stack=_context.t2.stack,request=_context.t2.request,response=_context.t2.response;return _context.abrupt(\"return\",{error:{name:name,message:message,stack:stack},meta:{request:request,response:response}});case 19:throw _context.t2;case 20:case\"end\":return _context.stop();}}},_callee,null,[[2,14]]);}));return function(_x,_x2){return _ref5.apply(this,arguments);};}();}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/data/slice.ts"],"names":["createApi","SupportedChainId","ClientError","gql","GraphQLClient","CHAIN_SUBGRAPH_URL","MAINNET","RINKEBY","ARBITRUM_ONE","OPTIMISM","api","reducerPath","baseQuery","graphqlRequestBaseQuery","endpoints","builder","allV3Ticks","query","poolAddress","skip","document","variables","feeTierDistribution","token0","token1","getState","chainId","application","subgraphUrl","undefined","error","name","message","stack","request","data","meta","response"],"mappings":"wyBACA,OAASA,SAAT,KAA0B,8BAA1B,CACA,OAASC,gBAAT,KAAiC,kBAAjC,CAEA,OAASC,WAAT,CAAsBC,GAAtB,CAA2BC,aAA3B,KAAgD,iBAAhD,CAGA;AACA,GAAMC,CAAAA,kBAA0C,6DAC7CJ,gBAAgB,CAACK,OAD4B,CAClB,4DADkB,sCAE7CL,gBAAgB,CAACM,OAF4B,CAElB,4DAFkB,sCAI7CN,gBAAgB,CAACO,YAJ4B,CAIb,wEAJa,sCAM7CP,gBAAgB,CAACQ,QAN4B,CAMjB,oEANiB,sBAAhD,CASA,MAAO,IAAMC,CAAAA,GAAG,CAAGV,SAAS,CAAC,CAC3BW,WAAW,CAAE,SADc,CAE3BC,SAAS,CAAEC,uBAAuB,EAFP,CAG3BC,SAAS,CAAE,mBAACC,OAAD,QAAc,CACvBC,UAAU,CAAED,OAAO,CAACE,KAAR,CAAc,CACxBA,KAAK,CAAE,wBAAGC,CAAAA,WAAH,MAAGA,WAAH,gBAAgBC,IAAhB,CAAgBA,IAAhB,oBAAuB,CAAvB,iBAAgC,CACrCC,QAAQ,CAAEjB,GAAF,+WAD6B,CAWrCkB,SAAS,CAAE,CACTH,WAAW,CAAXA,WADS,CAETC,IAAI,CAAJA,IAFS,CAX0B,CAAhC,EADiB,CAAd,CADW,CAmBvBG,mBAAmB,CAAEP,OAAO,CAACE,KAAR,CAAc,CACjCA,KAAK,CAAE,yBAAGM,CAAAA,MAAH,OAAGA,MAAH,CAAWC,MAAX,OAAWA,MAAX,OAAyB,CAC9BJ,QAAQ,CAAEjB,GAAF,u2BADsB,CA4B9BkB,SAAS,CAAE,CACTE,MAAM,CAANA,MADS,CAETC,MAAM,CAANA,MAFS,CA5BmB,CAAzB,EAD0B,CAAd,CAnBE,CAAd,EAHgB,CAAD,CAArB,CA4DP;AACA,QAASX,CAAAA,uBAAT,EAKE,CACA,gGAAO,sOAASO,QAAT,OAASA,QAAT,CAAmBC,SAAnB,OAAmBA,SAAnB,CAAkCI,QAAlC,OAAkCA,QAAlC,iBAEGC,OAFH,CAEcD,QAAQ,EAAT,CAAyBE,WAAzB,CAAqCD,OAFlD,CAIGE,WAJH,CAIiBF,OAAO,CAAGrB,kBAAkB,CAACqB,OAAD,CAArB,CAAiCG,SAJzD,IAMED,WANF,yDAOM,CACLE,KAAK,CAAE,CACLC,IAAI,CAAE,oBADD,CAELC,OAAO,4CAAsCN,OAAtC,uBAFF,CAGLO,KAAK,CAAE,EAHF,CADF,CAPN,+BAgBkB,IAAI7B,CAAAA,aAAJ,CAAkBwB,WAAlB,EAA+BM,OAA/B,CAAuCd,QAAvC,CAAiDC,SAAjD,CAhBlB,8CAgBqF,EAhBrF,kCAgBMc,IAhBN,aAgB+EC,IAhB/E,8EAkBC,sBAAiBlC,CAAAA,WAlBlB,2BAmBO6B,IAnBP,aAmBOA,IAnBP,CAmBaC,OAnBb,aAmBaA,OAnBb,CAmBsBC,KAnBtB,aAmBsBA,KAnBtB,CAmB6BC,OAnB7B,aAmB6BA,OAnB7B,CAmBsCG,QAnBtC,aAmBsCA,QAnBtC,iCAoBM,CAAEP,KAAK,CAAE,CAAEC,IAAI,CAAJA,IAAF,CAAQC,OAAO,CAAPA,OAAR,CAAiBC,KAAK,CAALA,KAAjB,CAAT,CAAmCG,IAAI,CAAE,CAAEF,OAAO,CAAPA,OAAF,CAAWG,QAAQ,CAARA,QAAX,CAAzC,CApBN,iGAAP,oEAyBD","sourcesContent":["import { BaseQueryApi, BaseQueryFn } from '@reduxjs/toolkit/dist/query/baseQueryTypes'\nimport { createApi } from '@reduxjs/toolkit/query/react'\nimport { SupportedChainId } from 'constants/chains'\nimport { DocumentNode } from 'graphql'\nimport { ClientError, gql, GraphQLClient } from 'graphql-request'\nimport { AppState } from 'state'\n\n// List of supported subgraphs. Note that the app currently only support one active subgraph at a time\nconst CHAIN_SUBGRAPH_URL: Record<number, string> = {\n  [SupportedChainId.MAINNET]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n  [SupportedChainId.RINKEBY]: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v3',\n\n  [SupportedChainId.ARBITRUM_ONE]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-arbitrum-one',\n\n  [SupportedChainId.OPTIMISM]: 'https://api.thegraph.com/subgraphs/name/ianlapham/uniswap-optimism',\n}\n\nexport const api = createApi({\n  reducerPath: 'dataApi',\n  baseQuery: graphqlRequestBaseQuery(),\n  endpoints: (builder) => ({\n    allV3Ticks: builder.query({\n      query: ({ poolAddress, skip = 0 }) => ({\n        document: gql`\n          query allV3Ticks($poolAddress: String!, $skip: Int!) {\n            ticks(first: 1000, skip: $skip, where: { poolAddress: $poolAddress }, orderBy: tickIdx) {\n              tickIdx\n              liquidityNet\n              price0\n              price1\n            }\n          }\n        `,\n        variables: {\n          poolAddress,\n          skip,\n        },\n      }),\n    }),\n    feeTierDistribution: builder.query({\n      query: ({ token0, token1 }) => ({\n        document: gql`\n          query feeTierDistribution($token0: String!, $token1: String!) {\n            _meta {\n              block {\n                number\n              }\n            }\n            asToken0: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token0, token1: $token1 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n            asToken1: pools(\n              orderBy: totalValueLockedToken0\n              orderDirection: desc\n              where: { token0: $token1, token1: $token0 }\n            ) {\n              feeTier\n              totalValueLockedToken0\n              totalValueLockedToken1\n            }\n          }\n        `,\n        variables: {\n          token0,\n          token1,\n        },\n      }),\n    }),\n  }),\n})\n\n// Graphql query client wrapper that builds a dynamic url based on chain id\nfunction graphqlRequestBaseQuery(): BaseQueryFn<\n  { document: string | DocumentNode; variables?: any },\n  unknown,\n  Pick<ClientError, 'name' | 'message' | 'stack'>,\n  Partial<Pick<ClientError, 'request' | 'response'>>\n> {\n  return async ({ document, variables }, { getState }: BaseQueryApi) => {\n    try {\n      const chainId = (getState() as AppState).application.chainId\n\n      const subgraphUrl = chainId ? CHAIN_SUBGRAPH_URL[chainId] : undefined\n\n      if (!subgraphUrl) {\n        return {\n          error: {\n            name: 'UnsupportedChainId',\n            message: `Subgraph queries against ChainId ${chainId} are not supported.`,\n            stack: '',\n          },\n        }\n      }\n\n      return { data: await new GraphQLClient(subgraphUrl).request(document, variables), meta: {} }\n    } catch (error) {\n      if (error instanceof ClientError) {\n        const { name, message, stack, request, response } = error\n        return { error: { name, message, stack }, meta: { request, response } }\n      }\n      throw error\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}