{"ast":null,"code":"import _objectSpread from\"/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createReducer}from'@reduxjs/toolkit';import{Field,resetMintState,typeInput}from'./actions';export var initialState={independentField:Field.CURRENCY_A,typedValue:'',otherTypedValue:'',startPriceTypedValue:'',leftRangeTypedValue:'',rightRangeTypedValue:''};export default createReducer(initialState,function(builder){return builder.addCase(resetMintState,function(){return initialState;}).addCase(typeInput,function(state,_ref){var _ref$payload=_ref.payload,field=_ref$payload.field,typedValue=_ref$payload.typedValue,noLiquidity=_ref$payload.noLiquidity;if(noLiquidity){// they're typing into the field they've last typed in\nif(field===state.independentField){return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue});}// they're typing into a new field, store the other value\nelse{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue,otherTypedValue:state.typedValue});}}else{return _objectSpread(_objectSpread({},state),{},{independentField:field,typedValue:typedValue,otherTypedValue:''});}});});","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/state/mint/reducer.ts"],"names":["createReducer","Field","resetMintState","typeInput","initialState","independentField","CURRENCY_A","typedValue","otherTypedValue","startPriceTypedValue","leftRangeTypedValue","rightRangeTypedValue","builder","addCase","state","payload","field","noLiquidity"],"mappings":"uLAAA,OAASA,aAAT,KAA8B,kBAA9B,CACA,OAASC,KAAT,CAAgBC,cAAhB,CAAgCC,SAAhC,KAAiD,WAAjD,CAWA,MAAO,IAAMC,CAAAA,YAAuB,CAAG,CACrCC,gBAAgB,CAAEJ,KAAK,CAACK,UADa,CAErCC,UAAU,CAAE,EAFyB,CAGrCC,eAAe,CAAE,EAHoB,CAIrCC,oBAAoB,CAAE,EAJe,CAKrCC,mBAAmB,CAAE,EALgB,CAMrCC,oBAAoB,CAAE,EANe,CAAhC,CASP,cAAeX,CAAAA,aAAa,CAAYI,YAAZ,CAA0B,SAACQ,OAAD,QACpDA,CAAAA,OAAO,CACJC,OADH,CACWX,cADX,CAC2B,iBAAME,CAAAA,YAAN,EAD3B,EAEGS,OAFH,CAEWV,SAFX,CAEsB,SAACW,KAAD,MAA4D,uBAAlDC,OAAkD,CAAvCC,KAAuC,cAAvCA,KAAuC,CAAhCT,UAAgC,cAAhCA,UAAgC,CAApBU,WAAoB,cAApBA,WAAoB,CAC9E,GAAIA,WAAJ,CAAiB,CACf;AACA,GAAID,KAAK,GAAKF,KAAK,CAACT,gBAApB,CAAsC,CACpC,sCACKS,KADL,MAEET,gBAAgB,CAAEW,KAFpB,CAGET,UAAU,CAAVA,UAHF,GAKD,CACD;AAPA,IAQK,CACH,sCACKO,KADL,MAEET,gBAAgB,CAAEW,KAFpB,CAGET,UAAU,CAAVA,UAHF,CAIEC,eAAe,CAAEM,KAAK,CAACP,UAJzB,GAMD,CACF,CAlBD,IAkBO,CACL,sCACKO,KADL,MAEET,gBAAgB,CAAEW,KAFpB,CAGET,UAAU,CAAVA,UAHF,CAIEC,eAAe,CAAE,EAJnB,GAMD,CACF,CA7BH,CADoD,EAA1B,CAA5B","sourcesContent":["import { createReducer } from '@reduxjs/toolkit'\nimport { Field, resetMintState, typeInput } from './actions'\n\nexport interface MintState {\n  readonly independentField: Field\n  readonly typedValue: string\n  readonly otherTypedValue: string // for the case when there's no liquidity\n  readonly startPriceTypedValue: string // for the case when there's no liquidity\n  readonly leftRangeTypedValue: string\n  readonly rightRangeTypedValue: string\n}\n\nexport const initialState: MintState = {\n  independentField: Field.CURRENCY_A,\n  typedValue: '',\n  otherTypedValue: '',\n  startPriceTypedValue: '',\n  leftRangeTypedValue: '',\n  rightRangeTypedValue: '',\n}\n\nexport default createReducer<MintState>(initialState, (builder) =>\n  builder\n    .addCase(resetMintState, () => initialState)\n    .addCase(typeInput, (state, { payload: { field, typedValue, noLiquidity } }) => {\n      if (noLiquidity) {\n        // they're typing into the field they've last typed in\n        if (field === state.independentField) {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n          }\n        }\n        // they're typing into a new field, store the other value\n        else {\n          return {\n            ...state,\n            independentField: field,\n            typedValue,\n            otherTypedValue: state.typedValue,\n          }\n        }\n      } else {\n        return {\n          ...state,\n          independentField: field,\n          typedValue,\n          otherTypedValue: '',\n        }\n      }\n    })\n)\n"]},"metadata":{},"sourceType":"module"}