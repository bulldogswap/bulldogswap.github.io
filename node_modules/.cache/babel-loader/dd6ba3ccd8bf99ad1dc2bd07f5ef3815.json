{"ast":null,"code":"var EXPLORER_HOSTNAMES={'etherscan.io':true,'ropsten.etherscan.io':true,'rinkeby.etherscan.io':true,'kovan.etherscan.io':true,'goerli.etherscan.io':true,'optimistic.etherscan.io':true,'kovan-optimistic.etherscan.io':true,'rinkeby-explorer.arbitrum.io':true,'explorer.arbitrum.io':true};/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */export function anonymizeLink(href){try{var url=new URL(href);if(EXPLORER_HOSTNAMES[url.hostname]){var pathPieces=url.pathname.split('/');var anonymizedPath=pathPieces.map(function(pc){return /0x[a-fA-F0-9]+/.test(pc)?'***':pc;}).join('/');return\"\".concat(url.protocol,\"//\").concat(url.hostname).concat(anonymizedPath);}return href;}catch(error){return href;}}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/anonymizeLink.ts"],"names":["EXPLORER_HOSTNAMES","anonymizeLink","href","url","URL","hostname","pathPieces","pathname","split","anonymizedPath","map","pc","test","join","protocol","error"],"mappings":"AAAA,GAAMA,CAAAA,kBAAgD,CAAG,CACvD,eAAgB,IADuC,CAEvD,uBAAwB,IAF+B,CAGvD,uBAAwB,IAH+B,CAIvD,qBAAsB,IAJiC,CAKvD,sBAAuB,IALgC,CAMvD,0BAA2B,IAN4B,CAOvD,gCAAiC,IAPsB,CAQvD,+BAAgC,IARuB,CASvD,uBAAwB,IAT+B,CAAzD,CAYA;AACA;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,aAAT,CAAuBC,IAAvB,CAA6C,CAClD,GAAI,CACF,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,GAAJ,CAAQF,IAAR,CAAZ,CACA,GAAIF,kBAAkB,CAACG,GAAG,CAACE,QAAL,CAAtB,CAAsC,CACpC,GAAMC,CAAAA,UAAU,CAAGH,GAAG,CAACI,QAAJ,CAAaC,KAAb,CAAmB,GAAnB,CAAnB,CAEA,GAAMC,CAAAA,cAAc,CAAGH,UAAU,CAACI,GAAX,CAAe,SAACC,EAAD,QAAS,kBAAiBC,IAAjB,CAAsBD,EAAtB,EAA4B,KAA5B,CAAoCA,EAA7C,EAAf,EAAiEE,IAAjE,CAAsE,GAAtE,CAAvB,CAEA,gBAAUV,GAAG,CAACW,QAAd,cAA2BX,GAAG,CAACE,QAA/B,SAA0CI,cAA1C,EACD,CACD,MAAOP,CAAAA,IAAP,CACD,CAAC,MAAOa,KAAP,CAAc,CACd,MAAOb,CAAAA,IAAP,CACD,CACF","sourcesContent":["const EXPLORER_HOSTNAMES: { [hostname: string]: true } = {\n  'etherscan.io': true,\n  'ropsten.etherscan.io': true,\n  'rinkeby.etherscan.io': true,\n  'kovan.etherscan.io': true,\n  'goerli.etherscan.io': true,\n  'optimistic.etherscan.io': true,\n  'kovan-optimistic.etherscan.io': true,\n  'rinkeby-explorer.arbitrum.io': true,\n  'explorer.arbitrum.io': true,\n}\n\n/**\n * Returns the anonymized version of the given href, i.e. one that does not leak user information\n * @param href the link to anonymize, i.e. remove any personal data from\n * @return string anonymized version of the given href\n */\nexport function anonymizeLink(href: string): string {\n  try {\n    const url = new URL(href)\n    if (EXPLORER_HOSTNAMES[url.hostname]) {\n      const pathPieces = url.pathname.split('/')\n\n      const anonymizedPath = pathPieces.map((pc) => (/0x[a-fA-F0-9]+/.test(pc) ? '***' : pc)).join('/')\n\n      return `${url.protocol}//${url.hostname}${anonymizedPath}`\n    }\n    return href\n  } catch (error) {\n    return href\n  }\n}\n"]},"metadata":{},"sourceType":"module"}