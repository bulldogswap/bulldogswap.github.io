{"ast":null,"code":"import JSBI from 'jsbi';\nimport invariant from 'tiny-invariant';\nimport _Decimal from 'decimal.js-light';\nimport _Big from 'big.js';\nimport toFormat from 'toformat';\nimport { getAddress } from '@ethersproject/address';\nvar TradeType;\n\n(function (TradeType) {\n  TradeType[TradeType[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType[TradeType[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n})(TradeType || (TradeType = {}));\n\nvar Rounding;\n\n(function (Rounding) {\n  Rounding[Rounding[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding[Rounding[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding[Rounding[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n})(Rounding || (Rounding = {}));\n\nvar MaxUint256 = /*#__PURE__*/JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar _toSignificantRoundin, _toFixedRounding;\n\nvar Decimal = /*#__PURE__*/toFormat(_Decimal);\nvar Big = /*#__PURE__*/toFormat(_Big);\nvar toSignificantRounding = (_toSignificantRoundin = {}, _toSignificantRoundin[Rounding.ROUND_DOWN] = Decimal.ROUND_DOWN, _toSignificantRoundin[Rounding.ROUND_HALF_UP] = Decimal.ROUND_HALF_UP, _toSignificantRoundin[Rounding.ROUND_UP] = Decimal.ROUND_UP, _toSignificantRoundin);\nvar toFixedRounding = (_toFixedRounding = {}, _toFixedRounding[Rounding.ROUND_DOWN] = 0, _toFixedRounding[Rounding.ROUND_HALF_UP] = 1, _toFixedRounding[Rounding.ROUND_UP] = 3, _toFixedRounding);\n\nvar Fraction = /*#__PURE__*/function () {\n  function Fraction(numerator, denominator) {\n    if (denominator === void 0) {\n      denominator = JSBI.BigInt(1);\n    }\n\n    this.numerator = JSBI.BigInt(numerator);\n    this.denominator = JSBI.BigInt(denominator);\n  }\n\n  Fraction.tryParseFraction = function tryParseFraction(fractionish) {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string') return new Fraction(fractionish);\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish;\n    throw new Error('Could not parse fraction');\n  } // performs floor division\n  ;\n\n  var _proto = Fraction.prototype;\n\n  _proto.invert = function invert() {\n    return new Fraction(this.denominator, this.numerator);\n  };\n\n  _proto.add = function add(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.add(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.subtract = function subtract(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n\n    return new Fraction(JSBI.subtract(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator)), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.lessThan = function lessThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.lessThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.equalTo = function equalTo(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.equal(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.greaterThan = function greaterThan(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return JSBI.greaterThan(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(otherParsed.numerator, this.denominator));\n  };\n\n  _proto.multiply = function multiply(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.numerator), JSBI.multiply(this.denominator, otherParsed.denominator));\n  };\n\n  _proto.divide = function divide(other) {\n    var otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(JSBI.multiply(this.numerator, otherParsed.denominator), JSBI.multiply(this.denominator, otherParsed.numerator));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(significantDigits) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not an integer.\") : invariant(false) : void 0;\n    !(significantDigits > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, significantDigits + \" is not positive.\") : invariant(false) : void 0;\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    var quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_HALF_UP;\n    }\n\n    !Number.isInteger(decimalPlaces) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is not an integer.\") : invariant(false) : void 0;\n    !(decimalPlaces >= 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, decimalPlaces + \" is negative.\") : invariant(false) : void 0;\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  /**\r\n   * Helper method for converting any super class back to a fraction\r\n   */\n  ;\n\n  _createClass(Fraction, [{\n    key: \"quotient\",\n    get: function get() {\n      return JSBI.divide(this.numerator, this.denominator);\n    } // remainder after floor division\n\n  }, {\n    key: \"remainder\",\n    get: function get() {\n      return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator);\n    }\n  }, {\n    key: \"asFraction\",\n    get: function get() {\n      return new Fraction(this.numerator, this.denominator);\n    }\n  }]);\n\n  return Fraction;\n}();\n\nvar Big$1 = /*#__PURE__*/toFormat(_Big);\n\nvar CurrencyAmount = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(CurrencyAmount, _Fraction);\n\n  function CurrencyAmount(currency, numerator, denominator) {\n    var _this;\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    !JSBI.lessThanOrEqual(_this.quotient, MaxUint256) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'AMOUNT') : invariant(false) : void 0;\n    _this.currency = currency;\n    _this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals));\n    return _this;\n  }\n  /**\r\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\r\n   * @param currency the currency in the amount\r\n   * @param rawAmount the raw token or ether amount\r\n   */\n\n\n  CurrencyAmount.fromRawAmount = function fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  /**\r\n   * Construct a currency amount with a denominator that is not equal to 1\r\n   * @param currency the currency\r\n   * @param numerator the numerator of the fractional token amount\r\n   * @param denominator the denominator of the fractional token amount\r\n   */\n  ;\n\n  CurrencyAmount.fromFractionalAmount = function fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  };\n\n  var _proto = CurrencyAmount.prototype;\n\n  _proto.add = function add(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n\n    var added = _Fraction.prototype.add.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  };\n\n  _proto.subtract = function subtract(other) {\n    !this.currency.equals(other.currency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CURRENCY') : invariant(false) : void 0;\n\n    var subtracted = _Fraction.prototype.subtract.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  };\n\n  _proto.multiply = function multiply(other) {\n    var multiplied = _Fraction.prototype.multiply.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  };\n\n  _proto.divide = function divide(other) {\n    var divided = _Fraction.prototype.divide.call(this, other);\n\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = this.currency.decimals;\n    }\n\n    if (rounding === void 0) {\n      rounding = Rounding.ROUND_DOWN;\n    }\n\n    !(decimalPlaces <= this.currency.decimals) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n    return _Fraction.prototype.divide.call(this, this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  };\n\n  _proto.toExact = function toExact(format) {\n    if (format === void 0) {\n      format = {\n        groupSeparator: ''\n      };\n    }\n\n    Big$1.DP = this.currency.decimals;\n    return new Big$1(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  };\n\n  _createClass(CurrencyAmount, [{\n    key: \"wrapped\",\n    get: function get() {\n      if (this.currency.isToken) return this;\n      return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n    }\n  }]);\n\n  return CurrencyAmount;\n}(Fraction);\n\nvar ONE_HUNDRED = /*#__PURE__*/new Fraction( /*#__PURE__*/JSBI.BigInt(100));\n/**\r\n * Converts a fraction to a percent\r\n * @param fraction the fraction to convert\r\n */\n\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\n\nvar Percent = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Percent, _Fraction);\n\n  function Percent() {\n    var _this;\n\n    _this = _Fraction.apply(this, arguments) || this;\n    /**\r\n     * This boolean prevents a fraction from being interpreted as a Percent\r\n     */\n\n    _this.isPercent = true;\n    return _this;\n  }\n\n  var _proto = Percent.prototype;\n\n  _proto.add = function add(other) {\n    return toPercent(_Fraction.prototype.add.call(this, other));\n  };\n\n  _proto.subtract = function subtract(other) {\n    return toPercent(_Fraction.prototype.subtract.call(this, other));\n  };\n\n  _proto.multiply = function multiply(other) {\n    return toPercent(_Fraction.prototype.multiply.call(this, other));\n  };\n\n  _proto.divide = function divide(other) {\n    return toPercent(_Fraction.prototype.divide.call(this, other));\n  };\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 5;\n    }\n\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 2;\n    }\n\n    return _Fraction.prototype.multiply.call(this, ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  };\n\n  return Percent;\n}(Fraction);\n\nvar Price = /*#__PURE__*/function (_Fraction) {\n  _inheritsLoose(Price, _Fraction);\n  /**\r\n   * Construct a price, either with the base and quote currency amount, or the\r\n   * @param args\r\n   */\n\n\n  function Price() {\n    var _this;\n\n    var baseCurrency, quoteCurrency, denominator, numerator;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 4) {\n      baseCurrency = args[0];\n      quoteCurrency = args[1];\n      denominator = args[2];\n      numerator = args[3];\n    } else {\n      var result = args[0].quoteAmount.divide(args[0].baseAmount);\n      var _ref = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n      baseCurrency = _ref[0];\n      quoteCurrency = _ref[1];\n      denominator = _ref[2];\n      numerator = _ref[3];\n    }\n\n    _this = _Fraction.call(this, numerator, denominator) || this;\n    _this.baseCurrency = baseCurrency;\n    _this.quoteCurrency = quoteCurrency;\n    _this.scalar = new Fraction(JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)), JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals)));\n    return _this;\n  }\n  /**\r\n   * Flip the price, switching the base and quote currency\r\n   */\n\n\n  var _proto = Price.prototype;\n\n  _proto.invert = function invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  /**\r\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\r\n   * @param other the other price\r\n   */\n  ;\n\n  _proto.multiply = function multiply(other) {\n    !this.quoteCurrency.equals(other.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var fraction = _Fraction.prototype.multiply.call(this, other);\n\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  /**\r\n   * Return the amount of quote currency corresponding to a given amount of the base currency\r\n   * @param currencyAmount the amount of base currency to quote against the price\r\n   */\n  ;\n\n  _proto.quote = function quote(currencyAmount) {\n    !currencyAmount.currency.equals(this.baseCurrency) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'TOKEN') : invariant(false) : void 0;\n\n    var result = _Fraction.prototype.multiply.call(this, currencyAmount);\n\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  /**\r\n   * Get the value scaled by decimals for formatting\r\n   * @private\r\n   */\n  ;\n\n  _proto.toSignificant = function toSignificant(significantDigits, format, rounding) {\n    if (significantDigits === void 0) {\n      significantDigits = 6;\n    }\n\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  };\n\n  _proto.toFixed = function toFixed(decimalPlaces, format, rounding) {\n    if (decimalPlaces === void 0) {\n      decimalPlaces = 4;\n    }\n\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  };\n\n  _createClass(Price, [{\n    key: \"adjustedForDecimals\",\n    get: function get() {\n      return _Fraction.prototype.multiply.call(this, this.scalar);\n    }\n  }]);\n\n  return Price;\n}(Fraction);\n/**\r\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\r\n */\n\n\nvar BaseCurrency =\n/**\r\n * Constructs an instance of the base class `BaseCurrency`.\r\n * @param chainId the chain ID on which this currency resides\r\n * @param decimals decimals of the currency\r\n * @param symbol symbol of the currency\r\n * @param name of the currency\r\n */\nfunction BaseCurrency(chainId, decimals, symbol, name) {\n  !Number.isSafeInteger(chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_ID') : invariant(false) : void 0;\n  !(decimals >= 0 && decimals < 255 && Number.isInteger(decimals)) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'DECIMALS') : invariant(false) : void 0;\n  this.chainId = chainId;\n  this.decimals = decimals;\n  this.symbol = symbol;\n  this.name = name;\n};\n/**\r\n * Represents the native currency of the chain on which it resides, e.g.\r\n */\n\n\nvar NativeCurrency = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(NativeCurrency, _BaseCurrency);\n\n  function NativeCurrency() {\n    var _this;\n\n    _this = _BaseCurrency.apply(this, arguments) || this;\n    _this.isNative = true;\n    _this.isToken = false;\n    return _this;\n  }\n\n  return NativeCurrency;\n}(BaseCurrency);\n/**\r\n * Validates an address and returns the parsed (checksummed) version of that address\r\n * @param address the unchecksummed hex address\r\n */\n\n\nfunction validateAndParseAddress(address) {\n  try {\n    return getAddress(address);\n  } catch (error) {\n    throw new Error(address + \" is not a valid address.\");\n  }\n}\n/**\r\n * Represents an ERC20 token with a unique address and some metadata.\r\n */\n\n\nvar Token = /*#__PURE__*/function (_BaseCurrency) {\n  _inheritsLoose(Token, _BaseCurrency);\n\n  function Token(chainId, address, decimals, symbol, name) {\n    var _this;\n\n    _this = _BaseCurrency.call(this, chainId, decimals, symbol, name) || this;\n    _this.isNative = false;\n    _this.isToken = true;\n    _this.address = validateAndParseAddress(address);\n    return _this;\n  }\n  /**\r\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\r\n   * @param other other token to compare\r\n   */\n\n\n  var _proto = Token.prototype;\n\n  _proto.equals = function equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address;\n  }\n  /**\r\n   * Returns true if the address of this token sorts before the address of the other token\r\n   * @param other other token to compare\r\n   * @throws if the tokens have the same address\r\n   * @throws if the tokens are on different chains\r\n   */\n  ;\n\n  _proto.sortsBefore = function sortsBefore(other) {\n    !(this.chainId === other.chainId) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'CHAIN_IDS') : invariant(false) : void 0;\n    !(this.address !== other.address) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ADDRESSES') : invariant(false) : void 0;\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  /**\r\n   * Return this token, which does not need to be wrapped\r\n   */\n  ;\n\n  _createClass(Token, [{\n    key: \"wrapped\",\n    get: function get() {\n      return this;\n    }\n  }]);\n\n  return Token;\n}(BaseCurrency);\n\nvar _WETH;\n/**\r\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\r\n */\n\n\nvar WETH9 = (_WETH = {}, _WETH[1] = /*#__PURE__*/new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'), _WETH[3] = /*#__PURE__*/new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[4] = /*#__PURE__*/new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'), _WETH[5] = /*#__PURE__*/new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'), _WETH[42] = /*#__PURE__*/new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'), _WETH[10] = /*#__PURE__*/new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[69] = /*#__PURE__*/new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'), _WETH[42161] = /*#__PURE__*/new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'), _WETH[421611] = /*#__PURE__*/new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether'), _WETH);\n/**\r\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\r\n */\n\nvar Ether = /*#__PURE__*/function (_NativeCurrency) {\n  _inheritsLoose(Ether, _NativeCurrency);\n\n  function Ether(chainId) {\n    return _NativeCurrency.call(this, chainId, 18, 'ETH', 'Ether') || this;\n  }\n\n  Ether.onChain = function onChain(chainId) {\n    var _this$_etherCache$cha;\n\n    return (_this$_etherCache$cha = this._etherCache[chainId]) != null ? _this$_etherCache$cha : this._etherCache[chainId] = new Ether(chainId);\n  };\n\n  var _proto = Ether.prototype;\n\n  _proto.equals = function equals(other) {\n    return other.isNative && other.chainId === this.chainId;\n  };\n\n  _createClass(Ether, [{\n    key: \"wrapped\",\n    get: function get() {\n      var weth9 = WETH9[this.chainId];\n      !!!weth9 ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'WRAPPED') : invariant(false) : void 0;\n      return weth9;\n    }\n  }]);\n\n  return Ether;\n}(NativeCurrency);\n\nEther._etherCache = {};\n/**\r\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\r\n * @param midPrice mid price before the trade\r\n * @param inputAmount the input amount of the trade\r\n * @param outputAmount the output amount of the trade\r\n */\n\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  var quotedOutputAmount = midPrice.quote(inputAmount); // calculate price impact := (exactQuote - outputAmount) / exactQuote\n\n  var priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n} // `maxSize` by removing the last item\n\n\nfunction sortedInsert(items, add, maxSize, comparator) {\n  !(maxSize > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'MAX_SIZE_ZERO') : invariant(false) : void 0; // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n\n  !(items.length <= maxSize) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'ITEMS_SIZE') : invariant(false) : void 0; // short circuit first item add\n\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    var isFull = items.length === maxSize; // short circuit if full and the additional item does not come before the last item\n\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n\n    var lo = 0,\n        hi = items.length;\n\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\n\nvar MAX_SAFE_INTEGER = /*#__PURE__*/JSBI.BigInt(Number.MAX_SAFE_INTEGER);\nvar ZERO = /*#__PURE__*/JSBI.BigInt(0);\nvar ONE = /*#__PURE__*/JSBI.BigInt(1);\nvar TWO = /*#__PURE__*/JSBI.BigInt(2);\n/**\r\n * Computes floor(sqrt(value))\r\n * @param value the value for which to compute the square root, rounded down\r\n */\n\nfunction sqrt(value) {\n  !JSBI.greaterThanOrEqual(value, ZERO) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'NEGATIVE') : invariant(false) : void 0; // rely on built in sqrt if possible\n\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))));\n  }\n\n  var z;\n  var x;\n  z = value;\n  x = JSBI.add(JSBI.divide(value, TWO), ONE);\n\n  while (JSBI.lessThan(x, z)) {\n    z = x;\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO);\n  }\n\n  return z;\n}\n\nexport { CurrencyAmount, Ether, Fraction, MaxUint256, NativeCurrency, Percent, Price, Rounding, Token, TradeType, WETH9, computePriceImpact, sortedInsert, sqrt, validateAndParseAddress };","map":{"version":3,"sources":["../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"names":["TradeType","Rounding","MaxUint256","JSBI","Decimal","toFormat","Big","toSignificantRounding","toFixedRounding","Fraction","denominator","fractionish","invert","add","otherParsed","subtract","lessThan","equalTo","greaterThan","multiply","divide","toSignificant","format","groupSeparator","rounding","ROUND_HALF_UP","Number","significantDigits","precision","quotient","toFixed","decimalPlaces","CurrencyAmount","currency","other","added","subtracted","multiplied","divided","ROUND_DOWN","decimals","toExact","ONE_HUNDRED","fraction","Percent","toPercent","Price","args","baseCurrency","quoteCurrency","numerator","result","quote","currencyAmount","BaseCurrency","NativeCurrency","validateAndParseAddress","address","getAddress","Token","equals","sortsBefore","WETH9","Ether","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","isFull","lo","hi","mid","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","Math","z","x"],"mappings":"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","sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"]},"metadata":{},"sourceType":"module"}