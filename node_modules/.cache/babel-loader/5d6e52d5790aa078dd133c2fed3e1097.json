{"ast":null,"code":"import{CurrencyAmount}from'@uniswap/sdk-core';import JSBI from'jsbi';var MIN_NATIVE_CURRENCY_FOR_GAS=JSBI.exponentiate(JSBI.BigInt(10),JSBI.BigInt(16));// .01 ETH\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */export function maxAmountSpend(currencyAmount){if(!currencyAmount)return undefined;if(currencyAmount.currency.isNative){if(JSBI.greaterThan(currencyAmount.quotient,MIN_NATIVE_CURRENCY_FOR_GAS)){return CurrencyAmount.fromRawAmount(currencyAmount.currency,JSBI.subtract(currencyAmount.quotient,MIN_NATIVE_CURRENCY_FOR_GAS));}else{return CurrencyAmount.fromRawAmount(currencyAmount.currency,JSBI.BigInt(0));}}return currencyAmount;}","map":{"version":3,"sources":["/Users/nakanoteppei/Documents/Jupiter/Codes/bulldogswap.github.io/src/utils/maxAmountSpend.ts"],"names":["CurrencyAmount","JSBI","MIN_NATIVE_CURRENCY_FOR_GAS","exponentiate","BigInt","maxAmountSpend","currencyAmount","undefined","currency","isNative","greaterThan","quotient","fromRawAmount","subtract"],"mappings":"AAAA,OAAmBA,cAAnB,KAAyC,mBAAzC,CACA,MAAOC,CAAAA,IAAP,KAAiB,MAAjB,CAEA,GAAMC,CAAAA,2BAAiC,CAAGD,IAAI,CAACE,YAAL,CAAkBF,IAAI,CAACG,MAAL,CAAY,EAAZ,CAAlB,CAAmCH,IAAI,CAACG,MAAL,CAAY,EAAZ,CAAnC,CAA1C,CAA8F;AAC9F;AACA;AACA;AACA,GACA,MAAO,SAASC,CAAAA,cAAT,CAAwBC,cAAxB,CAAyG,CAC9G,GAAI,CAACA,cAAL,CAAqB,MAAOC,CAAAA,SAAP,CACrB,GAAID,cAAc,CAACE,QAAf,CAAwBC,QAA5B,CAAsC,CACpC,GAAIR,IAAI,CAACS,WAAL,CAAiBJ,cAAc,CAACK,QAAhC,CAA0CT,2BAA1C,CAAJ,CAA4E,CAC1E,MAAOF,CAAAA,cAAc,CAACY,aAAf,CACLN,cAAc,CAACE,QADV,CAELP,IAAI,CAACY,QAAL,CAAcP,cAAc,CAACK,QAA7B,CAAuCT,2BAAvC,CAFK,CAAP,CAID,CALD,IAKO,CACL,MAAOF,CAAAA,cAAc,CAACY,aAAf,CAA6BN,cAAc,CAACE,QAA5C,CAAsDP,IAAI,CAACG,MAAL,CAAY,CAAZ,CAAtD,CAAP,CACD,CACF,CACD,MAAOE,CAAAA,cAAP,CACD","sourcesContent":["import { Currency, CurrencyAmount } from '@uniswap/sdk-core'\nimport JSBI from 'jsbi'\n\nconst MIN_NATIVE_CURRENCY_FOR_GAS: JSBI = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(16)) // .01 ETH\n/**\n * Given some token amount, return the max that can be spent of it\n * @param currencyAmount to return max of\n */\nexport function maxAmountSpend(currencyAmount?: CurrencyAmount<Currency>): CurrencyAmount<Currency> | undefined {\n  if (!currencyAmount) return undefined\n  if (currencyAmount.currency.isNative) {\n    if (JSBI.greaterThan(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)) {\n      return CurrencyAmount.fromRawAmount(\n        currencyAmount.currency,\n        JSBI.subtract(currencyAmount.quotient, MIN_NATIVE_CURRENCY_FOR_GAS)\n      )\n    } else {\n      return CurrencyAmount.fromRawAmount(currencyAmount.currency, JSBI.BigInt(0))\n    }\n  }\n  return currencyAmount\n}\n"]},"metadata":{},"sourceType":"module"}